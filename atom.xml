<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逍客 - Stay Happy and Enjoy Life!</title>
  
  <subtitle>保持快乐 享受生活; 放下自我 换位思维。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://choelea.github.io/"/>
  <updated>2018-12-11T09:52:56.708Z</updated>
  <id>https://choelea.github.io/</id>
  
  <author>
    <name>Joe Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://choelea.github.io/hello-world/"/>
    <id>https://choelea.github.io/hello-world/</id>
    <published>2018-12-11T09:52:56.707Z</published>
    <updated>2018-12-11T09:52:56.708Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring Data Elasticsearch 快速上手全文检索</title>
    <link href="https://choelea.github.io/Elastic-Technologies/spring-data-elasticsearch-quick-start/"/>
    <id>https://choelea.github.io/Elastic-Technologies/spring-data-elasticsearch-quick-start/</id>
    <published>2018-12-11T09:52:56.707Z</published>
    <updated>2018-12-11T09:52:56.707Z</updated>
    
    <content type="html"><![CDATA[<p>通过Spring Data Elasticsearch 实现全文检索; 通过指定 boost 来控制查询语句的相对的权重; 通过自定义ResultMapper 来实现查询聚合功能。</p><h2 id="Elasticsearch-基础知识"><a href="#Elasticsearch-基础知识" class="headerlink" title="Elasticsearch 基础知识"></a>Elasticsearch 基础知识</h2><p>建立对Elasticsearch的初步的认识可以参考：<a href="https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA</a></p><p>上面的有些解释只是为了方便初学者快速掌握知识。ES的索引的Type在后期ES中会逐渐消失。<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html</a></p><p>官方的中文文档参考： <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>Spring Boot： 1.4.7</li><li>Spring Data Elasticsearch  2.0.11</li><li>Elasticsearch server 2.4</li></ul><blockquote><p>追加补充： 在随后的版本spring-data-elasticsearch 2.1.10.RELEASE 中增加了<code>AggregatedPage</code> ， 同时<code>org.springframework.data.elasticsearch.core.DefaultResultMapper</code> 也增加了聚合的支持。 笔者这里针对聚合的有部分工作，在2.1.10.RELEASE种已经不在需要，或者可以更优化一些。</p></blockquote><h2 id="安装与运行"><a href="#安装与运行" class="headerlink" title="安装与运行"></a>安装与运行</h2><h3 id="Elasticsearch-安装及运行"><a href="#Elasticsearch-安装及运行" class="headerlink" title="Elasticsearch 安装及运行"></a>Elasticsearch 安装及运行</h3><p>elasticsearch 是运行于java之上，可以直接下载运行。从<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-6" target="_blank" rel="noopener">https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-6</a> 下载2.4.6 版本。 </p><ul><li>ZIP sha   —– window安装包  </li><li>TAR sha   —– Mac 或者linux安装包</li><li>DEB sha   </li><li>RPM sha   —– linux rpm 包可以安装成系统服务</li></ul><p>ZIP包解压的直接进入 bin 目录运行 <code>./elasticserach</code>, 运行 <code>./elasticsearch -d</code> 后台运行<br> RPM 安装后通过 <code>service elasticsearch start</code> 来启动</p><h3 id="Kibana-安装及运行"><a href="#Kibana-安装及运行" class="headerlink" title="Kibana 安装及运行"></a>Kibana 安装及运行</h3><p> 和es的类似，elasticsearch2.4 对应kibana的版本是4.6； 下载地址： <a href="https://www.elastic.co/downloads/past-releases/kibana-4-6-6" target="_blank" rel="noopener">https://www.elastic.co/downloads/past-releases/kibana-4-6-6</a> </p><blockquote><p>kibana 解压方式无后台运行命令，建议通过rpm方式安装<code>sudo rpm -ivh kibana-4.6.6-x86_64.rpm</code> , 以服务方式启动和停止。</p></blockquote><h3 id="安装Kibana的Sense插件"><a href="#安装Kibana的Sense插件" class="headerlink" title="安装Kibana的Sense插件"></a>安装Kibana的Sense插件</h3><p>此版本下没有dev tools，需要单独安装sense插件, 进入Kibana 的安装目录 <code>/opt/kibana</code> 运行<code>./bin/kibana plugin --install elastic/sense</code>。 </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/choelea/spring-data-elasticsearch-quick-start" target="_blank" rel="noopener">https://github.com/choelea/spring-data-elasticsearch-quick-start</a>  2.0.11.RELEASE<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/choelea/spring-data-elasticsearch-quick-start</span><br><span class="line">cd spring-data-elasticsearch-quick-start/</span><br><span class="line">git checkout tags/2.0.11.RELEASE</span><br></pre></td></tr></table></figure></p><blockquote><p>最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch  自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper  已经支持了聚合。无需为聚合儿自定义ResultMapper。 </p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.data.elasticsearch.repositories.enabled = true</span><br><span class="line">spring.data.elasticsearch.cluster-nodes : 192.168.1.99:9300</span><br></pre></td></tr></table></figure><h2 id="定义Document"><a href="#定义Document" class="headerlink" title="定义Document"></a>定义Document</h2><p>参考： <code>com.joe.springdataelasticsearch.document.ProductDoc</code> . 定义文档需要注意必须有个id字段或者通过注解指定一个id字段，只有在有ID得情况下，文档才可以被更新。 否则会抛出异常：<code>No id property found for class com.joe.springdataelasticsearch.document.ProductDoc</code></p><p>当前版本下需要指定Field的type，否则也会报错。</p><blockquote><p>修改FieldType 会导致无法通过程序启动异常，需要手动删除后创建索引。 比如: 原有的type字段的FieldType是Long，改成String后会出现类似如下错误：<code>mapper [type] of different type, current_type [long], merged_type [string]</code></p></blockquote><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>系统启动后，创建索引和创建/更新mapping</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elasticsearchTemplate.deleteIndex(ProductDoc.class);</span><br><span class="line">elasticsearchTemplate.createIndex(ProductDoc.class);</span><br><span class="line">elasticsearchTemplate.putMapping(ProductDoc.class);</span><br></pre></td></tr></table></figure><p>启动后可以通过<code>http://192.168.1.99:9200/product-index/_mapping/main/</code> 来查看mapping。</p><blockquote><p>Notes：文档索引的mapping的创建，不会因为注解@Document， 而是因为ElasticsearchRepository的存在。删除ProductDocRespository，可以发现启动服务后，文档不会自动创建。 参考问题：<a href="https://stackoverflow.com/questions/29496081/spring-data-elasticsearchs-field-annotation-not-working" target="_blank" rel="noopener">https://stackoverflow.com/questions/29496081/spring-data-elasticsearchs-field-annotation-not-working</a></p></blockquote><h2 id="索引文档"><a href="#索引文档" class="headerlink" title="索引文档"></a>索引文档</h2><p>elasticsearch 是通过PUT接口来索引文档。<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html</a>。 在使用Spring Data Elasticsearch的的时候，我们可以很方便的通过防JPA Repository的方式来操作;  <code>ProductDocRespository.save(ProductDoc doc)</code>  来索引和更新文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface ProductDocRespository extends ElasticsearchRepository&lt;ProductDoc, Long&gt;</span><br></pre></td></tr></table></figure></p><p>参考<code>com.joe.springdataelasticsearch.listner.ContextRefreshedListener</code> 来查看索引测试文档数据。</p><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><p><img src="http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-productdocs.png" alt="spring-data-elasticsearch-productdocs"></p><h2 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h2><p>查询主要解决：</p><ul><li>多个字段搜索查询使用布尔匹配的方式， 参考官方说明 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_how_match_uses_bool.html" target="_blank" rel="noopener">布尔匹配</a></li><li>不同字段的权重设置，采用设置Boost方式， 参考： <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_boosting_query_clauses.html" target="_blank" rel="noopener">查询语句提升权重</a></li><li>聚合结果集 </li></ul><p><strong>具体代码参考如下</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public Page&lt;ProductDoc&gt; search(String keyword, Boolean isSelfRun, Pageable pageable) &#123;</span><br><span class="line">BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">if (StringUtils.isNotEmpty(keyword)) &#123;</span><br><span class="line">queryBuilder.should(QueryBuilders.matchQuery(ProductDoc._name, keyword).boost(3)); // 给name字段更高的权重</span><br><span class="line">queryBuilder.should(QueryBuilders.matchQuery(ProductDoc._description, keyword));   // description 默认权重 1</span><br><span class="line">queryBuilder.minimumNumberShouldMatch(1); // 至少一个should条件满足</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isSelfRun!=null &amp;&amp; isSelfRun) &#123;</span><br><span class="line">queryBuilder.must(QueryBuilders.matchQuery(ProductDoc._isSelfRun, Boolean.TRUE)); // 精准值条件查询</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)</span><br><span class="line">.withPageable(pageable).build();</span><br><span class="line">LOGGER.info(&quot;\n search(): searchContent [&quot; + keyword + &quot;] \n DSL  = \n &quot; + searchQuery.getQuery().toString());</span><br><span class="line">return productDocRespository.search(searchQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试全文检索"><a href="#测试全文检索" class="headerlink" title="测试全文检索"></a>测试全文检索</h2><ol><li><a href="http://localhost:8080/products?keyword=huawei" target="_blank" rel="noopener">http://localhost:8080/products?keyword=huawei</a> </li><li><a href="http://localhost:8080/products?keyword=iphone" target="_blank" rel="noopener">http://localhost:8080/products?keyword=iphone</a> 通过对iphone的搜索可以验证boost值得效果</li><li><a href="http://localhost:8080/products?keyword=iphone&amp;isSelfRun=true" target="_blank" rel="noopener">http://localhost:8080/products?keyword=iphone&amp;isSelfRun=true</a>  验证精准值匹配效果</li></ol><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><p><strong>需求： </strong>统计搜索出来的智能手机和普通手机的数量，从而提供进一步的过滤。</p><p>聚合的详细理解参考 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/aggregations.html" target="_blank" rel="noopener">聚合 | Elasticsearch: 权威指南  | Elastic</a>， 这里我们只通过简单的桶（Bucket）的方式来实现需求。</p><p>通过google搜索<code>spring data elasticsearch aggregation example</code> 不难找到类似如下链接中的代码：<a href="https://github.com/spring-projects/spring-data-elasticsearch/blob/master/src/test/java/org/springframework/data/elasticsearch/core/aggregation/ElasticsearchTemplateAggregationTests.java；" target="_blank" rel="noopener">https://github.com/spring-projects/spring-data-elasticsearch/blob/master/src/test/java/org/springframework/data/elasticsearch/core/aggregation/ElasticsearchTemplateAggregationTests.java；</a> 但是我们需要同时返回桶的信息和检索出来的分页信息。如何利用Spring Data Elasticsearch来完成？</p><p>通过查看spring-data-elasticsearch的源代码我们可以发现<code>org.springframework.data.elasticsearch.core.DefaultResultMapper</code> 会被默认用来返回分页检索出来的数据。需要同时返回分页数据及桶的数据，我们就需要定制一个ResultMapper； 参考：<code>com.joe.springdataelasticsearch.core.ProductDocAggregationResultMapper</code>。</p><h2 id="聚合查询测试"><a href="#聚合查询测试" class="headerlink" title="聚合查询测试"></a>聚合查询测试</h2><p><a href="http://localhost:8080/products/aggregation?keyword=China" target="_blank" rel="noopener">http://localhost:8080/products/aggregation?keyword=China</a> 可以查出总共有5条结果，聚合返回告诉你其中有4个智能手机，1个普通手机。<br><strong>返回JSON 数据如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;content&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 2,</span><br><span class="line">      &quot;name&quot;: &quot;Huawei&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 5,</span><br><span class="line">      &quot;name&quot;: &quot;Iphone X&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Iphone X is made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 1,</span><br><span class="line">      &quot;name&quot;: &quot;Mac Pro&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Mac Pro is made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 7,</span><br><span class="line">      &quot;name&quot;: &quot;Nokia N90&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Nokia N 90 is made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;GENERAL&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 3,</span><br><span class="line">      &quot;name&quot;: &quot;Huawei Max3&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Huawei is designed / made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;bucketsByType&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;key&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;lable&quot;: &quot;type&quot;,</span><br><span class="line">      &quot;docCount&quot;: 4</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;key&quot;: &quot;GENERAL&quot;,</span><br><span class="line">      &quot;lable&quot;: &quot;type&quot;,</span><br><span class="line">      &quot;docCount&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;totalElements&quot;: 5,</span><br><span class="line">  &quot;last&quot;: true,</span><br><span class="line">  &quot;totalPages&quot;: 1,</span><br><span class="line">  &quot;number&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 10,</span><br><span class="line">  &quot;sort&quot;: null,</span><br><span class="line">  &quot;numberOfElements&quot;: 5,</span><br><span class="line">  &quot;first&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h2><p>参考：<a href="http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-highlight" target="_blank" rel="noopener">http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-highlight</a></p>]]></content>
    
    <summary type="html">
    
      通过Spring Data Elasticsearch 实现全文检索; 通过指定 boost 来控制查询语句的相对的权重; 通过自定义ResultMapper 来实现查询聚合功能
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring Data Elasticsearch 快速上手全文检索 - 进阶</title>
    <link href="https://choelea.github.io/Elastic-Technologies/spring-data-elasticsearch-quick-start-2/"/>
    <id>https://choelea.github.io/Elastic-Technologies/spring-data-elasticsearch-quick-start-2/</id>
    <published>2018-12-11T09:52:56.706Z</published>
    <updated>2018-12-11T09:52:56.706Z</updated>
    
    <content type="html"><![CDATA[<p>继上一篇 <a href="http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-quick-start" target="_blank" rel="noopener">Spring Data Elasticsearch 快速上手全文检索</a>之后，进一步深入以下内容：</p><ul><li>高亮显示关键词</li><li>指定Analyzer更合理的检索</li></ul><blockquote><p>最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch 自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper 已经支持了聚合。无需为聚合儿自定义ResultMapper。</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/choelea/spring-data-elasticsearch-quick-start</span><br></pre></td></tr></table></figure><p><a href="https://github.com/elastic/elasticsearch/issues/11713" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch/issues/11713</a></p><h2 id="高亮关键词"><a href="#高亮关键词" class="headerlink" title="高亮关键词"></a>高亮关键词</h2><p>对name和description中的关键字进行高亮显示，直接参考代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)</span><br><span class="line">.withPageable(pageable)</span><br><span class="line">.withHighlightFields( new HighlightBuilder.Field(ProductDoc._name).forceSource(true), new HighlightBuilder.Field(ProductDoc._description).forceSource(true))</span><br><span class="line">.addAggregation(termBuilder).build();</span><br></pre></td></tr></table></figure></p><p>默认情况下返回高亮字段不在_source内，当转成成我们的ProductDoc的时候对应的name和description是不会有变化的， 这个时候还是需要定制ResultMapper， 因此这里定制了一个ExtResultMapper。 将高亮字段覆盖到ProductDoc 中对应的字段去。</p>]]></content>
    
    <summary type="html">
    
      通过Spring Data Elasticsearch 实现全文检索并高亮关键词。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>文档的title，页面及列表都会展示</title>
    <link href="https://choelea.github.io/Elastic-Technologies/spring-data-elasticsearch-2.1.12-highlight/"/>
    <id>https://choelea.github.io/Elastic-Technologies/spring-data-elasticsearch-2.1.12-highlight/</id>
    <published>2018-12-11T09:52:56.703Z</published>
    <updated>2018-12-11T09:52:56.703Z</updated>
    
    <content type="html"><![CDATA[<p>这个是一个模板, 请务必将showOnHome 修改为true</p><h1 id="欢迎使用"><a href="#欢迎使用" class="headerlink" title="欢迎使用"></a>欢迎使用</h1><p>本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：</p><ul><li><strong>Markdown和扩展Markdown简洁的语法</strong></li><li><strong>代码块高亮</strong></li><li><strong>图片链接和图片上传</strong></li><li><strong>丰富的快捷键</strong></li></ul><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>Cmd-‘ 引用</li><li>Cmd-B    加粗</li><li>Cmd-E     清除Block</li><li>Cmd-H     标题Header变小</li><li>Cmd-I       斜体</li><li>Cmd-K      链接</li><li>Cmd-L     无序列表</li><li>Cmd-P     Preview</li><li>Cmd-Alt-C     代码块</li><li>Cmd-Alt-I     插入图片</li><li>Cmd-Alt-L    有序列表</li><li>Shift-Cmd-H  标题Header变大</li><li>F9     窗口拆分</li><li>F11    全屏</li></ul>]]></content>
    
    <summary type="html">
    
      描述这个页面的信息
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://choelea.github.io/Elastic-Technologies/elasticsearch-fuzzy-query/"/>
    <id>https://choelea.github.io/Elastic-Technologies/elasticsearch-fuzzy-query/</id>
    <published>2018-12-11T09:52:56.698Z</published>
    <updated>2018-12-11T09:52:56.698Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title:  Elasticsearch 模糊匹配<br>description: fuzzy 查询是一个词项级别的查询，所以它不做任何分析。它通过某个词项以及指定的 fuzziness 查找到词典中所有的词项。 fuzziness 默认设置为 AUTO 。<br>…</p><p>这个是一个模板, 请务必将showOnHome 修改为true</p><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/fuzzy-scoring.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/fuzzy-scoring.html</a><br>以下来自<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">模糊性评分编辑</span><br><span class="line">用户喜欢模糊查询。他们认为这种查询会魔法般的找到正确拼写组合。 很遗憾，实际效果平平。</span><br><span class="line"></span><br><span class="line">假设我们有1000个文档包含 ``Schwarzenegger`` ，只是一个文档的出现拼写错误 ``Schwarzeneger`` 。 根据 term frequency/inverse document frequency 理论，这个拼写错误文档比拼写正确的相关度更高，因为错误拼写出现在更少的文档中！</span><br><span class="line"></span><br><span class="line">换句话说，如果我们对待模糊匹配 类似其他匹配方法，我们将偏爱错误的拼写超过了正确的拼写，这会让用户抓狂。</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title:  Elasticsearch 模糊匹配&lt;br&gt;description: fuzzy 查询是一个词项级别的查询，所以它不做任何分析。它通过某个词项以及指定的 fuzziness 查找到词典中所有的词项。 fuzziness 默认设置为 AUTO 。&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kibana的访问控制 - Nginx 反向代理 - 免费</title>
    <link href="https://choelea.github.io/Elastic-Technologies/Nignx-Kibana-Security/"/>
    <id>https://choelea.github.io/Elastic-Technologies/Nignx-Kibana-Security/</id>
    <published>2018-12-11T09:52:56.694Z</published>
    <updated>2018-12-11T09:52:56.694Z</updated>
    
    <content type="html"><![CDATA[<p>前一篇<a href="http://blog.csdn.net/choelea/article/details/53841218" target="_blank" rel="noopener"> Kibana 5.x 加强安全</a> 采用的是官方的x-pack 插件来实现elastic技术栈的相关产品的权限控制。功能不错，也提供了很大的灵活性，不过x-pack并非免费产品；咨询了下licence价格，大概三个节点年费六千多美刀。。。废话不多说了，想想替代方案 - Nginx 反向代理 （收回5601端口，通过nginx反向代理+basic authentication来保证安全）</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-on-centos-7" target="_blank" rel="noopener">How To Create a Self-Signed SSL Certificate for Nginx on CentOS 7</a></p><h3 id="配置Nginx-SSL"><a href="#配置Nginx-SSL" class="headerlink" title="配置Nginx SSL"></a>配置Nginx SSL</h3><h4 id="第一步-安装-Nginx-并配置防火墙"><a href="#第一步-安装-Nginx-并配置防火墙" class="headerlink" title="第一步: 安装 Nginx 并配置防火墙"></a>第一步: 安装 Nginx 并配置防火墙</h4><p>参考上面的文章</p><blockquote><p><strong>注意： 80 和 443 端口必须对外打开。 当遇见ERR_CONNECTION_REFUSED 这类错误的时候，一定要提高警惕查看端口是否打开。以免浪费时间在配置上面。可以ssh到nginx机器上通过curl 的命令来验证，如果服务器上curl可以访问，外面不可访问；那么很可能端口没开放</strong></p></blockquote><h4 id="第二步：生成证书"><a href="#第二步：生成证书" class="headerlink" title="第二步：生成证书"></a>第二步：生成证书</h4><p>参考上面的文章</p><h4 id="第三步：添加kibana-https-conf配置"><a href="#第三步：添加kibana-https-conf配置" class="headerlink" title="第三步：添加kibana.https.conf配置"></a>第三步：添加kibana.https.conf配置</h4><p>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 http2 ssl;</span><br><span class="line">    listen [::]:443 http2 ssl;</span><br><span class="line"></span><br><span class="line">    server_name kibana.domain.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;</span><br><span class="line">    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;</span><br><span class="line">    ssl_dhparam /etc/ssl/certs/dhparam.pem;</span><br><span class="line"></span><br><span class="line">    ########################################################################</span><br><span class="line">    # from https://cipherli.st/                                            #</span><br><span class="line">    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html #</span><br><span class="line">    ########################################################################</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_ciphers &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;</span><br><span class="line">    ssl_ecdh_curve secp384r1;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_tickets off;</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    ssl_stapling_verify on;</span><br><span class="line">    resolver 8.8.8.8 8.8.4.4 valid=300s;</span><br><span class="line">    resolver_timeout 5s;</span><br><span class="line">    # Disable preloading HSTS for now.  You can use the commented out header line that includes</span><br><span class="line">    # the &quot;preload&quot; directive if you understand the implications.</span><br><span class="line">    #add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains&quot;;</span><br><span class="line">    add_header X-Frame-Options DENY;</span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line"></span><br><span class="line">    ##################################</span><br><span class="line">    # END https://cipherli.st/ BLOCK #</span><br><span class="line">    ##################################</span><br><span class="line">    </span><br><span class="line">    # 这里是反向代理到kibana服务 走http协议</span><br><span class="line">    location / &#123;</span><br><span class="line">       proxy_pass   http://localhost:5601;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第四步：验证SSL-访问"><a href="#第四步：验证SSL-访问" class="headerlink" title="第四步：验证SSL 访问"></a>第四步：验证SSL 访问</h4><p>为设置http跳转的时候，注意在浏览器地址栏中输入<a href="https://kibana.domain.com" target="_blank" rel="noopener">https://kibana.domain.com</a> 来验证</p><h4 id="第五步：-添加Nginx的Basic-Authentication-访问控制"><a href="#第五步：-添加Nginx的Basic-Authentication-访问控制" class="headerlink" title="第五步： 添加Nginx的Basic Authentication 访问控制"></a>第五步： 添加Nginx的Basic Authentication 访问控制</h4><ol><li>查看是否有安装httpd-tools <code>sudo rpm -qa | grep httpd-tools</code>, 如果有，则可以看到如下信息：<code>httpd-tools-2.4.6-40.el7.centos.4.x86_64</code> 如果没有安装，可以通过<code>sudo yum -y install httpd-tools</code> 来安装</li><li><p>配置nginx 反向代理 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auth_basic &quot; Basic Authentication &quot;;      </span><br><span class="line">auth_basic_user_file &quot;/etc/nginx/.htpasswd&quot;;</span><br></pre></td></tr></table></figure><p>添加至反向代理的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass   http://localhost:5601;</span><br><span class="line">    auth_basic &quot; Basic Authentication &quot;;      </span><br><span class="line">    auth_basic_user_file &quot;/etc/nginx/.htpasswd&quot;;       </span><br><span class="line">&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></li><li><p>生成密码文件 <code>sudo htpasswd -c /etc/nginx/.htpasswd username</code> 根据提示输入密码</p></li><li>重新加载ngixn <code>sudo service nginx reload</code></li><li>再次登录来，提示弹出框，输入用户名和密码</li></ol>]]></content>
    
    <summary type="html">
    
      通过Nginx的反向代理来加强kibana的访问安全
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Metricbeat 的使用</title>
    <link href="https://choelea.github.io/Elastic-Technologies/Metricbeat-Usage/"/>
    <id>https://choelea.github.io/Elastic-Technologies/Metricbeat-Usage/</id>
    <published>2018-12-11T09:52:56.693Z</published>
    <updated>2018-12-11T09:52:56.693Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>统计并展示系统的信息 cpu， 内存等 (当然metricbeat能收集的信息种类还很多)</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol><li>版本： 5.x</li><li>已经安装了ELK (elasticsearch, logstash (可选）, kibana)</li><li>安装了x-pack  （配置了对应的security）（可选） 参考 <a href="http://blog.csdn.net/choelea/article/details/53841218" target="_blank" rel="noopener">Kibana 5.x 加强安全</a></li></ol><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装，配置参考  <a href="https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-installation.html" target="_blank" rel="noopener">官方网站</a><br>使用OOTB配置即可，一般只需要修改ES的端口和地址。 如果加强了security，也需要更改 metricbeat.yml。 这里已经加强了安全，配置了用户，故需要更改metricbeat.yml添加elasticsearch的相关访问用户。<br>（创建角色和用户可以参考 <a href="http://blog.csdn.net/choelea/article/details/53841218" target="_blank" rel="noopener">Kibana 5.x 加强安全</a> ，这里角色需要用操作索引metricbeat-*）</p><blockquote><p>elasticsearch 默认绑定了localhost的访问，需要取消这种绑定。 设置<code>network.host: 0.0.0.0</code> 0.0.0.0 表示任意地址，如果设置成了IP地址，那么同台机器的kibana和logstash的需要做对应的修改。（比如：192.168.1.50， logstash和kibana需要把链接elasticsearch的hosts 从localhost改成：192.168.1.50）</p></blockquote><h3 id="加载kibana的示例-index-template-和-dashboards"><a href="#加载kibana的示例-index-template-和-dashboards" class="headerlink" title="加载kibana的示例 index template 和 dashboards"></a>加载kibana的示例 index template 和 dashboards</h3><blockquote><p>因为metricbeat 可能装在多个机器，index template 和dashboard 只需要导入一次即可。默认会自动加载index template到elasticsearch。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./scripts/import_dashboards -es http://localhost:9200 -user elastic -pass changeme</span><br></pre></td></tr></table></figure><h3 id="kibana中查看对应的结果"><a href="#kibana中查看对应的结果" class="headerlink" title="kibana中查看对应的结果"></a>kibana中查看对应的结果</h3><p>登录kibana打开对应的dashboard 既可以看到统计报告了</p><p><img src="http://tech.jiu-shu.com/Elastic-Technologies/kibana-statics.png" alt="Kibana 中 展示系统运行状态"></p>]]></content>
    
    <summary type="html">
    
      通过Metricbeat 来统计并展示系统的信息 cpu， 内存等
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Logstash Filter 配置</title>
    <link href="https://choelea.github.io/Elastic-Technologies/Logstash-Filter/"/>
    <id>https://choelea.github.io/Elastic-Technologies/Logstash-Filter/</id>
    <published>2018-12-11T09:52:56.692Z</published>
    <updated>2018-12-11T09:52:56.692Z</updated>
    
    <content type="html"><![CDATA[<p>笔者这里仅仅列出配置文件，在研究之后最红并没有采用在logstash的接下日志为json的做法。而是将json的输出放在了各个服务/应用中处理， spring boot的app可以参考：<a href="https://github.com/logstash/logstash-logback-encoder" target="_blank" rel="noopener">logstash-logback-encoder</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  #If log line contains tab character followed by &apos;at&apos; then we will tag that entry as stacktrace</span><br><span class="line">  if [message] =~ &quot;\tat&quot; &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; [&quot;message&quot;, &quot;^(\tat)&quot;]</span><br><span class="line">      add_tag =&gt; [&quot;stacktrace&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #Grokking Spring Boot&apos;s default log format</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; [ </span><br><span class="line">#Record transaction</span><br><span class="line">&quot;message&quot;,&quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \[\s*(?&lt;thread&gt;[^\]]+)\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\s*: \[\s*(?&lt;transactionInfo&gt;[^\]]+)\]&quot;,</span><br><span class="line">&quot;message&quot;, &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \[\s*(?&lt;thread&gt;[^\]]+)\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\s*:\s+(?&lt;logmessage&gt;.*)&quot;,</span><br><span class="line">&quot;message&quot;, &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- .+? :\s+(?&lt;logmessage&gt;.*)&quot;</span><br><span class="line">             ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #Parsing out timestamps which are in timestamp field thanks to previous grok section</span><br><span class="line">  date &#123;</span><br><span class="line">    match =&gt; [ &quot;timestamp&quot; , &quot;yyyy-MM-dd HH:mm:ss.SSS&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line"> elasticsearch&#123;&#125; </span><br><span class="line"> stdout&#123;</span><br><span class="line">   codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里grok配置了三册过滤， 第一层用作统计，message的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2016-07-15 20:30:30.884  INFO 14624 --- [nio-8081-exec-3] c.l.a.w.controller.OfbizProxyController  : [&#123;&quot;transactionCode&quot;:&quot;ofbizProxy&quot;,&quot;transactionDuration&quot;:246&#125;]</span><br></pre></td></tr></table></figure><p>使用<a href="http://grokdebug.herokuapp.com/" target="_blank" rel="noopener">Grok Debugger</a> 解析后如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"timestamp"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"2016-07-15 20:30:30.884"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"YEAR"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"2016"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"MONTHNUM"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"07"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"MONTHDAY"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"15"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"TIME"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"20:30:30.884"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"HOUR"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"20"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"MINUTE"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"30"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"SECOND"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"30.884"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"level"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"INFO"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"pid"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"14624"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"BASE10NUM"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"14624"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"thread"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"nio-8081-exec-3"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"class"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"c.l.a.w.controller.OfbizProxyController"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"transactionInfo"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"&#123;"</span>transactionCode<span class="string">":"</span>ofbizProxy<span class="string">","</span>transactionDuration<span class="string">":246&#125;"</span></span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二层针对普通的log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2016-07-15 20:30:07.768  INFO 14624 --- [nio-8081-exec-1] c.l.a.web.controller.LoginController     : Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1</span><br></pre></td></tr></table></figure><p>解析后的json如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;timestamp&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;2016-07-15 20:30:07.768&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;YEAR&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;2016&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;MONTHNUM&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;07&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;MONTHDAY&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;15&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;TIME&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;20:30:07.768&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;HOUR&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;20&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;MINUTE&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;30&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;SECOND&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;07.768&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;level&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;INFO&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;pid&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;14624&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;BASE10NUM&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;14624&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;thread&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;nio-8081-exec-1&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;class&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;c.l.a.web.controller.LoginController&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;logmessage&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1&quot;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三层针对遗漏的无法匹配到的log再次解析， 这里暂时没有示例</p>]]></content>
    
    <summary type="html">
    
      Logstash Filter 配置
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用ELK来做日志归总</title>
    <link href="https://choelea.github.io/Elastic-Technologies/Elasticsearch-Logstash-Kibana-Log-Collecting/"/>
    <id>https://choelea.github.io/Elastic-Technologies/Elasticsearch-Logstash-Kibana-Log-Collecting/</id>
    <published>2018-12-11T09:52:56.691Z</published>
    <updated>2018-12-11T09:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK-初探"><a href="#ELK-初探" class="headerlink" title="ELK 初探"></a>ELK 初探</h1><p>ELK实时日志分析平台 初次尝试。 ELK 的多种架构请参考文章: <a href="https://blog.csdn.net/lively1982/article/details/50678657" target="_blank" rel="noopener">漫谈ELK在大数据运维中的应用</a></p><h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><ul><li>CentOS 7 </li><li>Oracle JDK 8</li><li>Kibana 4.5.2</li><li>Elaticsearch 2.3.4</li><li>logstash 2.3.4</li><li>filebeat 1.2.3<br>查看version command： <code>filebeat --version</code><h2 id="系统架构图"><a href="#系统架构图" class="headerlink" title="系统架构图"></a>系统架构图</h2><img src="http://tech.jiu-shu.com/Elastic-Technologies/elk.png" alt="elk"><h2 id="软件的安装"><a href="#软件的安装" class="headerlink" title="软件的安装"></a>软件的安装</h2>采用yum的安装模式。首先需要添加对应的repo文件。 对应的详细的安装方法可以参考在线文档， 这里以logstash为例。<h3 id="logstash-安装"><a href="#logstash-安装" class="headerlink" title="logstash 安装"></a>logstash 安装</h3></li></ul><ul><li><strong>Download and install the public signing key</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure><ul><li><strong>添加Repo到目录/etc/yum.repos.d/， 比如：logstash.repo</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[logstash-2.3]</span><br><span class="line">name=Logstash repository for 2.3.x packages</span><br><span class="line">baseurl=https://packages.elastic.co/logstash/2.3/centos</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><ul><li><strong>安装</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install logstash</span><br></pre></td></tr></table></figure><ul><li><strong>随系统自动启动</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig --add filebeat</span><br></pre></td></tr></table></figure></li></ul><h3 id="其他软件的repositories"><a href="#其他软件的repositories" class="headerlink" title="其他软件的repositories"></a>其他软件的repositories</h3><p><strong>filebeat</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[beats]</span><br><span class="line">name=Elastic Beats Repository</span><br><span class="line">baseurl=https://packages.elastic.co/beats/yum/el/$basearch</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure><p><strong>elasticsearch <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-repositories.html" target="_blank" rel="noopener">官方介绍</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch-2.x]</span><br><span class="line">name=Elasticsearch repository for 2.x packages</span><br><span class="line">baseurl=https://packages.elastic.co/elasticsearch/2.x/centos</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p><strong>kibana <a href="https://www.elastic.co/guide/en/kibana/current/setup.html" target="_blank" rel="noopener">在线文档</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[kibana-4.5]</span><br><span class="line">name=Kibana repository for 4.5.x packages</span><br><span class="line">baseurl=http://packages.elastic.co/kibana/4.5/centos</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p><strong>查看服务状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">servie logstash status</span><br></pre></td></tr></table></figure><p><strong>查看服务文件路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql logstash</span><br></pre></td></tr></table></figure><h2 id="FileBeat-使用"><a href="#FileBeat-使用" class="headerlink" title="FileBeat 使用"></a>FileBeat 使用</h2><p>filebeat 安装后的配置文件存放于：/etc/filebeat/下<br>修改配置文件filebeat.yml<br><strong>1， 修改文件的路径：比如：/home/osboxes/app.log</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filebeat:</span><br><span class="line">  prospectors:</span><br><span class="line">    -</span><br><span class="line">      paths:</span><br><span class="line">        - &quot;/home/osboxes/app.log&quot;</span><br></pre></td></tr></table></figure></p><p><strong>2， 修改输出， 默认是直接输出到Elasticsearch，我们修改输出到logstash</strong><br>只需要打开对应的注释即可，将elasticsearch相关注释掉， 打开logstash的注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line">  logstash:</span><br><span class="line">    hosts: [&quot;127.0.0.1:5044&quot;]</span><br><span class="line"></span><br><span class="line">    # Optional load balance the events between the Logstash hosts</span><br><span class="line">    #loadbalance: true</span><br></pre></td></tr></table></figure><p>filebeat.yml 已经配置了多个output选项，我们只需要打开注解。 这里可以做个小的测试。 修改配置后可运行命令验证：<code>filebeat -configtest -e.</code> <strong>filebeat只能配置一个output项，修改配置后需要重启</strong><br>1，找到Console output，打开注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##Console output</span><br><span class="line">   console:</span><br><span class="line">    # Pretty print json event</span><br><span class="line">    pretty: true</span><br></pre></td></tr></table></figure><p>2， 停止filebeat服务 <code>sudo service filebeat stop</code>，手动启动filebeat来方便我们观察console输出<code>sudo filebeat -e -c /etc/filebeat/filebeat.yml</code>。(On windows: <code>filebeat.exe -e -c filebeat.yml</code>)<br>3， 新开窗口输出信息至文件/var/log/app.log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure></p><p>4，切换至filebeat的启动窗口可以看到如下的输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[osboxes@osboxes logstash]$ sudo filebeat -e -c /etc/filebeat/filebeat.yml</span><br><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2016-07-11T13:44:43.926Z&quot;,</span><br><span class="line">  &quot;beat&quot;: &#123;</span><br><span class="line">    &quot;hostname&quot;: &quot;osboxes&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;osboxes&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;count&quot;: 1,</span><br><span class="line">  &quot;fields&quot;: null,</span><br><span class="line">  &quot;input_type&quot;: &quot;log&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot;,</span><br><span class="line">  &quot;offset&quot;: 130,</span><br><span class="line">  &quot;source&quot;: &quot;/home/osboxes/app.log&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;log&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LogStash-配置"><a href="#LogStash-配置" class="headerlink" title="LogStash 配置"></a>LogStash 配置</h2><p> 上面的小测做完后，将filebeat的配置改回输出到logstash。</p><h3 id="连通filebeat和logstash"><a href="#连通filebeat和logstash" class="headerlink" title="连通filebeat和logstash"></a>连通filebeat和logstash</h3><p> <strong>1， 添加logstash.conf 文件在/etc/logstash/conf.d/logstash.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后可以通过命令验证配置是否正确：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf --configtest</span><br></pre></td></tr></table></figure><p><strong>2, 启动logstash</strong><br>采用命令启动方便从console观察输出。<code>sudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf</code>如果采用service的启动方式，需要去/var/log/logstash/logstash.stdout 查看log<br><strong>3，启动filebeat 然后向文件app.log 写入log</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure><p><strong>4，切换至logstash窗口， 可以观察到一下输出，证明filebeat已经可以成功输出到logstash</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[osboxes@osboxes bin]$ sudo ./logstash -f /etc/logstash/conf.d/logstash.conf </span><br><span class="line">Settings: Default pipeline workers: 1</span><br><span class="line">Pipeline main started</span><br><span class="line">2016-07-12T05:57:46.877Z osboxes 2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Grok-Filter-Plugin解析日志-（spring-boot-的默认日志格式）"><a href="#使用Grok-Filter-Plugin解析日志-（spring-boot-的默认日志格式）" class="headerlink" title="使用Grok Filter Plugin解析日志 （spring boot 的默认日志格式）"></a>使用Grok Filter Plugin解析日志 （spring boot 的默认日志格式）</h3><p><strong>1， 修改logstash.conf 添加filter，重启logstash</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  #If log line contains tab character followed by &apos;at&apos; then we will tag that entry as stacktrace</span><br><span class="line">  if [message] =~ &quot;\tat&quot; &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; [&quot;message&quot;, &quot;^(\tat)&quot;]</span><br><span class="line">      add_tag =&gt; [&quot;stacktrace&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #Grokking Spring Boot&apos;s default log format</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; [ &quot;message&quot;,</span><br><span class="line">               &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \[(?&lt;thread&gt;[A-Za-z0-9-]+)\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\s*:\s+(?&lt;logmessage&gt;.*)&quot;,</span><br><span class="line">               &quot;message&quot;,</span><br><span class="line">               &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- .+? :\s+(?&lt;logmessage&gt;.*)&quot;</span><br><span class="line">             ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #Parsing out timestamps which are in timestamp field thanks to previous grok section</span><br><span class="line">  date &#123;</span><br><span class="line">    match =&gt; [ &quot;timestamp&quot; , &quot;yyyy-MM-dd HH:mm:ss.SSS&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout&#123;</span><br><span class="line">   codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>2，写入log到文件app.log</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure><p><strong>3， 切换logstash查看输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       &quot;message&quot; =&gt; &quot;2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; &quot;2016-06-29T16:14:09.477Z&quot;,</span><br><span class="line">         &quot;count&quot; =&gt; 1,</span><br><span class="line">        &quot;fields&quot; =&gt; nil,</span><br><span class="line">        &quot;source&quot; =&gt; &quot;/home/osboxes/app.log&quot;,</span><br><span class="line">        &quot;offset&quot; =&gt; 987,</span><br><span class="line">          &quot;type&quot; =&gt; &quot;log&quot;,</span><br><span class="line">    &quot;input_type&quot; =&gt; &quot;log&quot;,</span><br><span class="line">          &quot;beat&quot; =&gt; &#123;</span><br><span class="line">        &quot;hostname&quot; =&gt; &quot;osboxes&quot;,</span><br><span class="line">            &quot;name&quot; =&gt; &quot;osboxes&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">          &quot;host&quot; =&gt; &quot;osboxes&quot;,</span><br><span class="line">          &quot;tags&quot; =&gt; [</span><br><span class="line">        [0] &quot;beats_input_codec_plain_applied&quot;</span><br><span class="line">    ],</span><br><span class="line">     &quot;timestamp&quot; =&gt; &quot;2016-06-29 17:14:09.477&quot;,</span><br><span class="line">         &quot;level&quot; =&gt; &quot;INFO&quot;,</span><br><span class="line">           &quot;pid&quot; =&gt; &quot;6244&quot;,</span><br><span class="line">        &quot;thread&quot; =&gt; &quot;main&quot;,</span><br><span class="line">         &quot;class&quot; =&gt; &quot;faultConfiguringBeanFactoryPostProcessor&quot;,</span><br><span class="line">    &quot;logmessage&quot; =&gt; &quot;No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，完成了初步的日志的解析，日志别解析至对应的fields中。 接下来将这些数据推送至Elasticsearch进行索引。</p><h3 id="修改logstash配置，输出到elasticsearch"><a href="#修改logstash配置，输出到elasticsearch" class="headerlink" title="修改logstash配置，输出到elasticsearch"></a>修改logstash配置，输出到elasticsearch</h3><p>修改配置文件的output。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这样的结构，Logstash使用http协议连接到Elasticsearch。上面的例子假设Logstash和Elasticsearch运行在同一个机器上。您可以使用主机配置<code>hosts =&gt; &quot;es-machine:9092</code>指定远程Elasticsearch实例。</p><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p>一次启动elasticsearch，kibana，logstash，filebeat。 （filebeat已启动的话，无需重启）</p><h3 id="安装Sense"><a href="#安装Sense" class="headerlink" title="安装Sense"></a>安装Sense</h3><p>进入/opt/kibana/ 运行：<code>$sudo ./bin/kibana plugin --install elastic/sense</code><br>You should now be able to access Sense with a web browser on <a href="http://localhost:5601/app/sense" target="_blank" rel="noopener">http://localhost:5601/app/sense</a></p><h2 id="spring-boot-日志配置"><a href="#spring-boot-日志配置" class="headerlink" title="spring boot 日志配置"></a>spring boot 日志配置</h2><p><strong>尽量采用统一的日志输出格式</strong><br>1, JPA 的sql输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#spring.jpa.show-sql = true #不推荐这种方式</span><br><span class="line">logging.level.org.hibernate.SQL=DEBUG</span><br></pre></td></tr></table></figure><h2 id="常见的部署方式"><a href="#常见的部署方式" class="headerlink" title="常见的部署方式"></a>常见的部署方式</h2><p>由于logstash比较消耗系统资源， 采用filebeat 来采集数据， 然后推送到logstash。 简单的case可以将logstash elasticsearch  kibana 放在一个虚拟机。 filebeat可以分别安装在各个对应的微服务上。 <strong>注意：</strong>当这些部署在不同的机器上的时候，需要打开对应的端口。 对应的配置也需要相对修改下。<br><strong>打开logstash的端口：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo firewall-cmd --zone=public --add-port=5044/tcp --permanent</span><br><span class="line">$ sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>filebeat的配置修改</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logstash:</span><br><span class="line">    # The Logstash hosts</span><br><span class="line">    hosts: [&quot;192.168.1.186:5044&quot;]</span><br></pre></td></tr></table></figure><p><strong>修改hostName</strong><br>如果微服务部署在不同的虚拟机中， 可以通过修改hostname，然后在ES的index中通过hostname 来区分日志的来源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hostnamectl status</span><br><span class="line"># hostnamectl set-hostname Your-New-Host-Name-Here</span><br></pre></td></tr></table></figure><h2 id="关于日志采集的策略"><a href="#关于日志采集的策略" class="headerlink" title="关于日志采集的策略"></a>关于日志采集的策略</h2><p>（网上未提及此topic）<br>配置logstash是件麻烦事情。 一下两种策略互相冲突<br><strong>1， 保证所有的log都index到ES</strong><br>这中策略方便用户查找问题， 因为所有的log都可以搜索到<br><strong>2， 严格过滤， 只提取我们需要的log信息</strong><br>这种很方便做统计， 但是其他很多log会被过滤掉， 用来找问题不方便。</p><h2 id="服务器时间设置"><a href="#服务器时间设置" class="headerlink" title="服务器时间设置"></a>服务器时间设置</h2><p>最好保证日志源的服务器时间和ELK的数据库服务器时间一直<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
       阐述使用ELK来做日志归总
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch 自定义Mapping</title>
    <link href="https://choelea.github.io/Elastic-Technologies/Elasticsearch-Mapping/"/>
    <id>https://choelea.github.io/Elastic-Technologies/Elasticsearch-Mapping/</id>
    <published>2018-12-11T09:52:56.691Z</published>
    <updated>2018-12-11T09:52:56.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mapping-定义"><a href="#Mapping-定义" class="headerlink" title="Mapping 定义"></a>Mapping 定义</h2><p>前面有一个篇简单的关于mapping的博客，当时是基于2.4 版本。 elastic技术栈在最近很活跃，目前版本已经更新至5.x。5.x有了比较大的变化。2.4 版本的定义在5.x上大部分已经失去了意义。（比如：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/string.html" target="_blank" rel="noopener">5.x已经不再支持string 类型</a>）<br><strong>这里截取一点官网对应的</strong><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/mapping.html" target="_blank" rel="noopener">定义</a>：</p><blockquote><p>elasticsearch 通过定义的映射mapping来决定文档及其字段改如何被存储和索引。比如：字段是否可以支持全文搜索; 字段是否包含日期，地理位置; 日期的格式; 自定义自动映射的规则。</p></blockquote><p>基于5.x，<a href="http://blog.csdn.net/choelea/article/details/53320140" target="_blank" rel="noopener">前面博客</a> 提到的user，uri等字段就可以使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/keyword.html" target="_blank" rel="noopener">keyword type</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /business-index-*/_mapping/business</span><br><span class="line">&#123;</span><br><span class="line"> &quot;properties&quot; : &#123;</span><br><span class="line">    &quot;uri&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class="line">    &quot;user&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class="line">    &quot;keyword&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class="line">    &quot;responseStatus&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125;,</span><br><span class="line">    &quot;responseTime&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>elastic的文档维护的算是比较好的，基本英语OK的都是直接去参考官方文档。  mapping的更新可以参考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/indices-put-mapping.html" target="_blank" rel="noopener">elastic 官网</a>     </p>]]></content>
    
    <summary type="html">
    
      Elasticsearch 自定义Mapping
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kibana 5.x 加强安全 - x-pack篇</title>
    <link href="https://choelea.github.io/Elastic-Technologies/Elasticsearch-Kibana-Security-xpack/"/>
    <id>https://choelea.github.io/Elastic-Technologies/Elasticsearch-Kibana-Security-xpack/</id>
    <published>2018-12-11T09:52:56.689Z</published>
    <updated>2018-12-11T09:52:56.690Z</updated>
    
    <content type="html"><![CDATA[<p> 此文之前，假定读者已经一次完成了Kibana和elasticsearch的安装。参考官方文档，安装后默认配置已经可以连通kibana和es。 </p><ul><li>系统： centos7</li><li><p>内容： 增加authentication &amp; enable ssl</p><p>elastic 技术栈 的另外一个重要的角色是x-pack. </p></li></ul><p><img src="http://tech.jiu-shu.com/Elastic-Technologies/elastic-charm.png" alt="elastic-charm"></p><h3 id="ES安装xpack插件"><a href="#ES安装xpack插件" class="headerlink" title="ES安装xpack插件"></a>ES安装xpack插件</h3><p>参考<a href="https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html" target="_blank" rel="noopener">安装xpack</a><br>Run bin/elasticsearch-plugin install from ES_HOME on each node in your cluster:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch-plugin install x-pack</span><br></pre></td></tr></table></figure></p><h3 id="Kibana-安装xpack-插件"><a href="#Kibana-安装xpack-插件" class="headerlink" title="Kibana 安装xpack 插件"></a>Kibana 安装xpack 插件</h3><p>参考<a href="https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html" target="_blank" rel="noopener">安装xpack</a></p><p>Install X-Pack into Kibana by running bin/kibana-plugin in your Kibana installation directory.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kibana-plugin install x-pack</span><br></pre></td></tr></table></figure></p><h3 id="依次启动elasticsearch-和kibana"><a href="#依次启动elasticsearch-和kibana" class="headerlink" title="依次启动elasticsearch 和kibana"></a>依次启动elasticsearch 和kibana</h3><h3 id="修改用户elastic-和-kibana的密码"><a href="#修改用户elastic-和-kibana的密码" class="headerlink" title="修改用户elastic 和 kibana的密码"></a>修改用户elastic 和 kibana的密码</h3><p><a href="https://www.elastic.co/guide/en/x-pack/current/security-getting-started.html" target="_blank" rel="noopener">X-Pack 文档：修改密码</a></p><blockquote><p>X-Pack security provides a built-in elastic superuser you can use to start setting things up. The default password for the elastic user is changeme.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -u elastic &apos;localhost:9200/_xpack/security/user/elastic/_password&apos; -d &apos;&#123;</span><br><span class="line">  &quot;password&quot; : &quot;elasticpassword&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -u elastic &apos;localhost:9200/_xpack/security/user/kibana/_password&apos; -d &apos;&#123;</span><br><span class="line">  &quot;password&quot; : &quot;kibanapassword&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>CURL授权<br>在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权。 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露</p></blockquote><h3 id="Enable-Kibana-SSL"><a href="#Enable-Kibana-SSL" class="headerlink" title="Enable Kibana SSL"></a>Enable Kibana SSL</h3><p><a href="https://www.elastic.co/guide/en/kibana/current/production.html" target="_blank" rel="noopener">Using Kibana in a Production Environment</a><br>配置上证书的路径即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># SSL for outgoing requests from the Kibana Server (PEM formatted)</span><br><span class="line">server.ssl.key: /path/to/your/server.key</span><br><span class="line">server.ssl.cert: /path/to/your/server.crt</span><br></pre></td></tr></table></figure></p><p>修改了超级用户的密码，enable ssl后，就可以放心的去使用kibana的<strong>Dev Tools</strong> 或者chrome插件（sense）进行大部分API 的操作。 （在此之前需要ssh到服务器通过curl来操作以保证安全）</p><h3 id="创建用户logstash-writer"><a href="#创建用户logstash-writer" class="headerlink" title="创建用户logstash_writer"></a>创建用户logstash_writer</h3><p><a href="https://www.elastic.co/guide/en/x-pack/5.1/logstash.html" target="_blank" rel="noopener">官方参考</a><br>上面步骤完成后会发现logstash推送给es报错了。因为现在ES需要用户名和密码了。 这里我们需要创建一个用户拥有write, delete, and create_index的权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[2016-12-23T20:42:19,350][WARN ][logstash.outputs.elasticsearch] Attempted to resurrect connection to dead ES instance, but got an error. &#123;:url=&gt;#&lt;URI::HTTP:0x17b5a1bd URL:http://localhost:9200&gt;, :error_type=&gt;LogStash::Outputs::ElasticSearch::HttpClient::Pool::BadResponseCodeError, :error=&gt;&quot;Got response code &apos;401&apos; contact Elasticsearch at URL &apos;http://localhost:9200/&apos;&quot;&#125;</span><br><span class="line">[2016-12-23T20:42:20,132][WARN ][logstash.shutdownwatcher ] &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>先创建一个role：logstash_writer</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST _xpack/security/role/logstash_writer</span><br><span class="line">&#123;</span><br><span class="line">  &quot;cluster&quot;: [&quot;manage_index_templates&quot;, &quot;monitor&quot;],</span><br><span class="line">  &quot;indices&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;names&quot;: [ &quot;logstash-*&quot;,&quot;business-index-*&quot;], </span><br><span class="line">      &quot;privileges&quot;: [&quot;write&quot;,&quot;delete&quot;,&quot;create_index&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再创建一个用户：logstash_internal拥有Role：logstash_writer</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /_xpack/security/user/logstash_internal</span><br><span class="line">&#123;</span><br><span class="line">  &quot;password&quot; : &quot;changeme&quot;,</span><br><span class="line">  &quot;roles&quot; : [ &quot;logstash_writer&quot;],</span><br><span class="line">  &quot;full_name&quot; : &quot;Internal Logstash User&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的操作也可以通过Kibana的Management UI来操作</p></blockquote><ul><li>配置logstash.conf</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    ...</span><br><span class="line">    user =&gt; logstash_internal</span><br><span class="line">    password =&gt; changeme</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>logstash, elasticsearch, kibana 如果在同一网络，而暴露出去的只有kibana的话，logstash和elasticsearch 之前是无需授权的。可以参考<a href="https://www.elastic.co/guide/en/x-pack/current/anonymous-access.html" target="_blank" rel="noopener">Enabling Anonymous Access</a> 另外，logstash和elasticsearch之间如果需要授权，会不会有性能的影响？</p></blockquote><h3 id="给Kibana用户加上index的读的权限"><a href="#给Kibana用户加上index的读的权限" class="headerlink" title="给Kibana用户加上index的读的权限"></a>给Kibana用户加上index的读的权限</h3><p>Kibana安装xpack后默认就需要登录了。也可以用超级用户elastic登录<br>登录后打开DevTools进行ES API的操作。</p><p>修改后停掉kibana服务。修改kibana的配置：</p><blockquote><p>Once you change the password, you need to specify it with the elasticsearch.password property in kibana.yml:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.password: &quot;s0m3th1ngs3cr3t&quot;</span><br></pre></td></tr></table></figure><h3 id="坑-（Tricky-Part）"><a href="#坑-（Tricky-Part）" class="headerlink" title="坑 （Tricky Part）"></a>坑 （Tricky Part）</h3><ol><li>/etc/logstash/conf.d 下不要有多余的文件。比如logstash.conf.bak， 似乎logstash会读这个文件夹下的不止logstash.conf这个文件配置。logstash.conf.bak 会导致死循环一样的重启。<a href="https://discuss.elastic.co/t/logstash-endless-loop-with-starting-and-stopping/69913" target="_blank" rel="noopener">elastic community</a></li></ol>]]></content>
    
    <summary type="html">
    
      使用插件x-pack来加强Kibana 5.x 的访问控制
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Elastcisearch 6.2 Restful API</title>
    <link href="https://choelea.github.io/Elastic-Technologies/Elasticsearch-6_2-Restful-API/"/>
    <id>https://choelea.github.io/Elastic-Technologies/Elasticsearch-6_2-Restful-API/</id>
    <published>2018-12-11T09:52:56.689Z</published>
    <updated>2018-12-11T09:52:56.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elastcisearch"><a href="#Elastcisearch" class="headerlink" title="Elastcisearch"></a>Elastcisearch</h1><p>详细的API请参考官方网站： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a> 这里只列举常用的方式。</p><h2 id="索引API"><a href="#索引API" class="headerlink" title="索引API"></a>索引API</h2><p>官方链接： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html</a></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><h4 id="快速创建"><a href="#快速创建" class="headerlink" title="快速创建"></a>快速创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /news</span><br></pre></td></tr></table></figure><p>创建名为test的索引，没有创建任何对应的Type,以及Mapping<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;acknowledged&quot;: true,</span><br><span class="line">  &quot;shards_acknowledged&quot;: true,</span><br><span class="line">  &quot;index&quot;: &quot;news&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /news</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;news&quot;: &#123;</span><br><span class="line">    &quot;aliases&quot;: &#123;&#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;&#125;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;index&quot;: &#123;</span><br><span class="line">        &quot;creation_date&quot;: &quot;1535677066065&quot;,</span><br><span class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot;: &quot;-fZX17QdQjWE_AK79pO8lQ&quot;,</span><br><span class="line">        &quot;version&quot;: &#123;</span><br><span class="line">          &quot;created&quot;: &quot;6020499&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot;: &quot;news&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE &quot;http://192.168.1.99:9200/news&quot; // 删除索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;ok&quot;: true,</span><br><span class="line">   &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置类型并定义Mapping-推荐"><a href="#设置类型并定义Mapping-推荐" class="headerlink" title="设置类型并定义Mapping (推荐)"></a>设置类型并定义Mapping (推荐)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT /news/_mapping/_doc</span><br><span class="line">&#123;</span><br><span class="line">   &quot;properties&quot;:&#123;</span><br><span class="line">     &quot;title&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;text&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;content&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;text&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;postDate&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;date&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;categories&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;tags&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>title和content是用于全文检索的，同时需要分词的</li><li>categories tags无需分词，这里的categories和tags都会存放多个值的数组。关于数组类型参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/array.html" target="_blank" rel="noopener">Array DataType</a></li></ol><blockquote><p>elasticsearch 支持 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-mapping.html" target="_blank" rel="noopener">Dynamical Mapping</a>, 大多数情况下，这都不是一个推荐方式。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Elastcisearch 常用的 Restful API
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Elastcisearch 2.4 Restful API</title>
    <link href="https://choelea.github.io/Elastic-Technologies/Elasticsearch-2_4-Restful-Api/"/>
    <id>https://choelea.github.io/Elastic-Technologies/Elasticsearch-2_4-Restful-Api/</id>
    <published>2018-12-11T09:52:56.688Z</published>
    <updated>2018-12-11T09:52:56.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elastcisearch"><a href="#Elastcisearch" class="headerlink" title="Elastcisearch"></a>Elastcisearch</h1><p>详细的API请参考官方网站： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a> 这里只列举常用的方式。</p><h2 id="索引API"><a href="#索引API" class="headerlink" title="索引API"></a>索引API</h2><p>官方链接： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html</a></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &quot;http://192.168.1.99:9200/test&quot; //创建test的索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;ok&quot;: true,</span><br><span class="line">   &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE &quot;http://192.168.1.99:9200/test&quot; // 删除索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;ok&quot;: true,</span><br><span class="line">   &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以下开始使用Kibana的Sense 来简化curl的操作</strong></p><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test</span><br></pre></td></tr></table></figure><h3 id="创建索引并设置Type和Mapping"><a href="#创建索引并设置Type和Mapping" class="headerlink" title="创建索引并设置Type和Mapping"></a>创建索引并设置Type和Mapping</h3><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>Cmd-‘ 引用</li><li>Cmd-B    加粗</li><li>Cmd-E     清除Block</li><li>Cmd-H     标题Header变小</li><li>Cmd-I       斜体</li><li>Cmd-K      链接</li><li>Cmd-L     无序列表</li><li>Cmd-P     Preview</li><li>Cmd-Alt-C     代码块</li><li>Cmd-Alt-I     插入图片</li><li>Cmd-Alt-L    有序列表</li><li>Shift-Cmd-H  标题Header变大</li><li>F9     窗口拆分</li><li>F11    全屏</li></ul>]]></content>
    
    <summary type="html">
    
      Elastcisearch 常用的 Restful API
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch 2.X 自定义字段的Mapping</title>
    <link href="https://choelea.github.io/Elastic-Technologies/Elasticsearch-2-X-Mapping/"/>
    <id>https://choelea.github.io/Elastic-Technologies/Elasticsearch-2-X-Mapping/</id>
    <published>2018-12-11T09:52:56.686Z</published>
    <updated>2018-12-11T09:52:56.686Z</updated>
    
    <content type="html"><![CDATA[<p>说到Mapping大家可能觉得有些不解，其实我大体上可以将Elasticsearch理解为一个RDBMS（关系型数据库，比如MySQL），那么index 就相当于数据库实例，type可以理解为表,这样mapping可以理解为表的结构和相关设置的信息（当然mapping有更大范围的意思）。</p><p>默认情况不需要显式的定义mapping， 当新的type或者field引入时，Elasticsearch会自动创建并且注册有合理的默认值的mapping(毫无性能压力)， 只有要覆盖默认值时才必须要提供mapping定义。</p><blockquote><p>引用博客：<a href="http://blog.csdn.net/top_code/article/details/50767138" target="_blank" rel="noopener">http://blog.csdn.net/top_code/article/details/50767138</a></p></blockquote><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>term - individual word （拆分后的最小单词）</p><h2 id="Mapping-简介"><a href="#Mapping-简介" class="headerlink" title="Mapping 简介"></a>Mapping 简介</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping.html" target="_blank" rel="noopener">Elasticsearch Reference [2.4] » Mapping</a><br>Mapping是用来定义文档及包含字段的保存和索引的方式。</p><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>接触mapping是因为要收集除了log之外的业务信息。 业务log和系统log不同，很多的自定义字段，并将这些信息推送到单独的index。 最终目的是用过kibana的图形化的展示来统计和分析。当我们要统计比如：用户的访问排名（字段名：user：<a href="mailto:test@gmail.com" target="_blank" rel="noopener">test@gmail.com</a>）。 当没有设置任何mapping的时候，ES会采用动态mapping（Dynamic Mapping），针对String的字段默认的index方式是：analyzed。这种方式下，<a href="mailto:test@gmail.com" target="_blank" rel="noopener">test@gmail.com</a> 会被拆分成test和gmail.com(怎么拆分取决于用什么analyzer)。这样不便于统计，这里我们必须显示地去设置mapping。<br> <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-index.html" target="_blank" rel="noopener">Mapping parameters » index</a> </p><blockquote><p>通过kibana去选择analyzed的字段去做terms aggregation可以看到对应的warning信息</p></blockquote><h2 id="自定义mapping"><a href="#自定义mapping" class="headerlink" title="自定义mapping"></a>自定义mapping</h2><p>可以通过API 去自定义mapping。 （这个最好在数据开始index之前，因为数据index的时候会动态设置mapping，再去修改会出现一些冲突）新增加的字段可以继续通过修改mapping来增加。  ES 支持一个index多个type，mapping可以针对单个type也可以针对index。<br><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT http://localhost:9200/business-index-*/_mapping/biz -d &apos;</span><br><span class="line">&#123;</span><br><span class="line"> &quot;properties&quot; : &#123;</span><br><span class="line">    &quot;uri&quot; : &#123;&quot;type&quot;: &quot;string&quot;,&quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class="line">    &quot;user&quot; : &#123;&quot;type&quot;: &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class="line">&quot;keyword&quot; : &#123;&quot;type&quot;: &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class="line">    &quot;responseStatus&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125;,</span><br><span class="line">    &quot;responseTime&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;&apos;;</span><br></pre></td></tr></table></figure><h2 id="自定义template"><a href="#自定义template" class="headerlink" title="自定义template"></a>自定义template</h2><p>对于确定的index，通过mapping的方式就可以达到我们的目的。 比如： 商品的索引，这个index不会变，里面的数据document会增删改查，但是index始终在那里。<br>但是对于类似log和数据分析的数据，这些数据会惊人的速度增加，如果放在一个index就不现实。 所以ELK就有了 “<strong><em>time-based index pattern</em></strong>“ , 通过这种方式可以每天或者每月生成一个index文件。比如logstash的日志： <code>logstash-2016.08.20</code> 针对这种场景，就需要引入更高一层的配置: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html" target="_blank" rel="noopener">Index Template</a><br>设定自己的template的示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT http://localhost:9200/_template/business -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">&quot;template&quot;: &quot;business*&quot;,</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;number_of_shards&quot;: 1</span><br><span class="line">&#125;,</span><br><span class="line">&quot;mappings&quot;: &#123;</span><br><span class="line">&quot;_default_&quot;: &#123;</span><br><span class="line">&quot;properties&quot;: &#123;</span><br><span class="line">&quot;uri&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;string&quot;,</span><br><span class="line">&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;user&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;string&quot;,</span><br><span class="line">&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;keyword&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;string&quot;,</span><br><span class="line">&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;responseStatus&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;integer&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;responseTime&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;long&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>The settings and mappings will be applied to any index name that matches the business* template</p></blockquote>]]></content>
    
    <summary type="html">
    
      Elasticsearch 2.X 自定义字段的Mapping
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://choelea.github.io/Elastic-Technologies/Elasticsearch-2.4-Restful-Api/"/>
    <id>https://choelea.github.io/Elastic-Technologies/Elasticsearch-2.4-Restful-Api/</id>
    <published>2018-12-11T09:52:56.686Z</published>
    <updated>2018-12-11T09:52:56.687Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title:  文档的title，页面及列表都会展示<br>description: 描述这个页面的信息<br>showOnHome: false<br>…</p><p>这个是一个模板, 请务必将showOnHome 修改为true</p><h1 id="欢迎使用"><a href="#欢迎使用" class="headerlink" title="欢迎使用"></a>欢迎使用</h1><p>本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：</p><ul><li><strong>Markdown和扩展Markdown简洁的语法</strong></li><li><strong>代码块高亮</strong></li><li><strong>图片链接和图片上传</strong></li><li><strong>丰富的快捷键</strong></li></ul><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>Cmd-‘ 引用</li><li>Cmd-B    加粗</li><li>Cmd-E     清除Block</li><li>Cmd-H     标题Header变小</li><li>Cmd-I       斜体</li><li>Cmd-K      链接</li><li>Cmd-L     无序列表</li><li>Cmd-P     Preview</li><li>Cmd-Alt-C     代码块</li><li>Cmd-Alt-I     插入图片</li><li>Cmd-Alt-L    有序列表</li><li>Shift-Cmd-H  标题Header变大</li><li>F9     窗口拆分</li><li>F11    全屏</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title:  文档的title，页面及列表都会展示&lt;br&gt;description: 描述这个页面的信息&lt;br&gt;showOnHome: false&lt;br&gt;…&lt;/p&gt;
&lt;p&gt;这个是一个模板, 请务必将showOnHome 修改为true&lt;/p&gt;
&lt;h1 id=&quot;欢迎
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Windows 常用命令</title>
    <link href="https://choelea.github.io/Dev-Ops/Windows-Commands/"/>
    <id>https://choelea.github.io/Dev-Ops/Windows-Commands/</id>
    <published>2018-12-11T09:52:56.672Z</published>
    <updated>2018-12-11T09:52:56.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>doc 窗口设置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=512m</span><br></pre></td></tr></table></figure></p><h2 id="删除服务"><a href="#删除服务" class="headerlink" title="删除服务"></a>删除服务</h2><p>删除服务名为mysql的服务： <code>sc delete mysql</code></p><h2 id="端口相关"><a href="#端口相关" class="headerlink" title="端口相关"></a>端口相关</h2><h3 id="端口占用的应用的PID"><a href="#端口占用的应用的PID" class="headerlink" title="端口占用的应用的PID"></a>端口占用的应用的PID</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon|findstr &quot;8599&quot;</span><br></pre></td></tr></table></figure><p>结果如下： （PID为2948）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Documents and Settings\XPMUser&gt;netstat -aon|findstr &quot;8599&quot;</span><br><span class="line">  TCP    0.0.0.0:8599           0.0.0.0:0              LISTENING       2948</span><br></pre></td></tr></table></figure></p><h3 id="对应PID的进程"><a href="#对应PID的进程" class="headerlink" title="对应PID的进程"></a>对应PID的进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist|findstr &quot;2948&quot;</span><br></pre></td></tr></table></figure><p>结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Documents and Settings\XPMUser&gt;tasklist|findstr &quot;2948&quot;</span><br><span class="line">tomcat6.exe                 2948 RDP-Tcp#4               0     44,072 K</span><br></pre></td></tr></table></figure></p><p>或者：打开任务管理器，切换到进程选项卡，在PID一列查看2720对应的进程是谁，如果看不到PID这一列，点击查看—&gt;选择列，将PID(进程标示符)前面的勾打上，点击确定。</p><h3 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h3><p>结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im Tencentdl.exe。</p><h2 id="列出文件夹下面的文件名称"><a href="#列出文件夹下面的文件名称" class="headerlink" title="列出文件夹下面的文件名称"></a>列出文件夹下面的文件名称</h2><p>创建一个bat文件, 加入下面的内容。 将这个bat文件放入文件夹内运行即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DIR *.* /B&gt; LIST.TXT</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      收集Windows中常用的命令包括：设置环境变量; 查看服务; 查看进程; 列出文件夹名字等;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Shell 脚本学习笔记</title>
    <link href="https://choelea.github.io/Dev-Ops/Shell-learning-notes/"/>
    <id>https://choelea.github.io/Dev-Ops/Shell-learning-notes/</id>
    <published>2018-12-11T09:52:56.671Z</published>
    <updated>2018-12-11T09:52:56.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="括号的使用说明"><a href="#括号的使用说明" class="headerlink" title="括号的使用说明"></a>括号的使用说明</h3><p>参考：<a href="http://stackoverflow.com/questions/31255699/double-parenthesis-with-and-without-dollar" target="_blank" rel="noopener">Double parenthesis with and without dollar</a></p><ul><li>$(…) means execute the command in the parens and return its stdout. </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;The current date is $(date)&quot;</span><br><span class="line">The current date is Mon Jul  6 14:27:59 PDT 2015</span><br></pre></td></tr></table></figure><ul><li>(…) means run the commands listed in the parens in a subshell. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ a=1; (a=2; echo &quot;inside: a=$a&quot;); echo &quot;outside: a=$a&quot;</span><br><span class="line">inside: a=2</span><br><span class="line">outside: a=1</span><br></pre></td></tr></table></figure><ul><li>$((…)) means perform arithmetic and return the result of the calculation. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ a=$((2+3)); echo &quot;a=$a&quot;</span><br><span class="line">a=5</span><br></pre></td></tr></table></figure><ul><li>((…)) means perform arithmetic, possibly changing the values of shell variables, but don’t return its result. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ((a=2+3)); echo &quot;a=$a&quot;</span><br><span class="line">a=5</span><br></pre></td></tr></table></figure><ul><li>${…} means return the value of the shell variable named in the braces. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo $&#123;SHELL&#125;</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><ul><li>{…} means execute the commands in the braces as a group. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ false || &#123; echo &quot;We failed&quot;; exit 1; &#125;</span><br><span class="line">We failed</span><br></pre></td></tr></table></figure><h2 id="有用脚本收集"><a href="#有用脚本收集" class="headerlink" title="有用脚本收集"></a>有用脚本收集</h2><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>读取文件目录的所有文件，按行读取每个文件，判断行文字是否包含特定字符串；如果包含，通过特殊字符来split并输出想要的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">for filename in /home/okchem/mysqlbackup/*.sql; do</span><br><span class="line">    while IFS= read line</span><br><span class="line">do</span><br><span class="line"># display $line or do somthing with $line</span><br><span class="line">if [[ $line == *&quot;/ocf/&quot;* ]]; then</span><br><span class="line">SUBSTRING=$(echo $line| cut -d&apos;`&apos; -f 2) # 用&apos;`&apos;来拆分,输出数组第二个</span><br><span class="line">echo $SUBSTRING</span><br><span class="line">fi</span><br><span class="line">done &lt;&quot;$&#123;filename&#125;.sql&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Shell 学习笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx 问题收集</title>
    <link href="https://choelea.github.io/Dev-Ops/Nginx-Technologies/"/>
    <id>https://choelea.github.io/Dev-Ops/Nginx-Technologies/</id>
    <published>2018-12-11T09:52:56.670Z</published>
    <updated>2018-12-11T09:52:56.671Z</updated>
    
    <content type="html"><![CDATA[<p>收集在使用Nginx过程中遇见的问题。</p><h1 id="知识积累"><a href="#知识积累" class="headerlink" title="知识积累"></a>知识积累</h1><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>平均负载示例如下; 以下配置必须保证两个实例都正常运行在，因为这个配置并不会failover。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">        server 127.0.0.1:8080;</span><br><span class="line">        server 127.0.0.1:8081;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name auth.jiu-shu.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">            client_max_body_size    10m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>上例中的8080 和 8081 端口都是Spring Boot的app。由于Java 是多线程的程序，在同一个虚拟机上运行多个实例并非最佳实践；这里只是方便测试。</p></blockquote><h1 id="问题收集"><a href="#问题收集" class="headerlink" title="问题收集"></a>问题收集</h1><h3 id="反向代理后request的host和schema和浏览器请求不一致"><a href="#反向代理后request的host和schema和浏览器请求不一致" class="headerlink" title="反向代理后request的host和schema和浏览器请求不一致"></a>反向代理后request的host和schema和浏览器请求不一致</h3><p>反向代理后<br>下面如果不加proxy_set_header的两行，那么在microservice这个服务中，<code>request.getScheme() + &quot;://&quot; + request.getServerName()</code> 就会变成<a href="http://microservice.dev.com" target="_blank" rel="noopener">http://microservice.dev.com</a>, nginx rewrite 之后，就可以获取到：<a href="http://www.dev.com" target="_blank" rel="noopener">http://www.dev.com</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server_name  www.dev.com;</span><br><span class="line">location / &#123;</span><br><span class="line"> proxy_set_header Host $host;</span><br><span class="line">   proxy_set_header X-Scheme $scheme;</span><br><span class="line"> proxy_pass   http://microservice.dev.com:8091;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="bind-to-0-0-0-0-80-failed-98-Address-already-in-use"><a href="#bind-to-0-0-0-0-80-failed-98-Address-already-in-use" class="headerlink" title="bind() to 0.0.0.0:80 failed (98: Address already in use)"></a>bind() to 0.0.0.0:80 failed (98: Address already in use)</h3><p>启动碰见以上问题，有两种可能</p><ol><li>先检查80端口是否已经被其他http server占用 <code>sudo netstat -nlpt</code></li><li>remove the IPv6 bind block (something along the lines of ::1:80。 参考：<a href="http://serverfault.com/questions/520535/nginx-is-still-on-port-80-bind-to-0-0-0-080-failed-98-address-already-in" target="_blank" rel="noopener">http://serverfault.com/questions/520535/nginx-is-still-on-port-80-bind-to-0-0-0-080-failed-98-address-already-in</a></li></ol><h3 id="403-forbidden-13-Permission-denied"><a href="#403-forbidden-13-Permission-denied" class="headerlink" title="403 forbidden (13: Permission denied)"></a>403 forbidden (13: Permission denied)</h3><p>参考：<a href="https://www.hi-docs.com/article/detail-MTE1.html" target="_blank" rel="noopener">Nginx报错403 forbidden (13: Permission denied)的解决办法</a><br>解决办法一： 关闭 SELinux  （在了解了SELinux的重要性后，决定继续寻找更好的解决办法）</p><p>需要进一步了解SELinux相关，需要解决办法二：（感谢Zeal老师给出的解决方案）</p><blockquote><p>Every directory has a SeLinux context and the default ‘Document Root’ ( /var/www/html ) has an context which allows the nginx / apache user to access the directory.<br>The new ROOT ( /data/images ) will not have the same context and thus SeLinux  is blocking the access.<br>You can verify with ls -lZ /Default-Document-Root and verify the context and associate the same context to /data/images.<br>This should ideally solve the issue, can you try and verify once  :-<br><code>chcon -R -u system_u -t httpd_sys_content_t /data/</code></p></blockquote><p>相信ftp等服务，如果更改了根目录，也会有同样的问题。需要更深入的对SELinux学习。</p>]]></content>
    
    <summary type="html">
    
      Nginx 使用问题收集
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Maven父子工程的搭建</title>
    <link href="https://choelea.github.io/Dev-Ops/Maven-usage-of-parent/"/>
    <id>https://choelea.github.io/Dev-Ops/Maven-usage-of-parent/</id>
    <published>2018-12-11T09:52:56.669Z</published>
    <updated>2018-12-11T09:52:56.670Z</updated>
    
    <content type="html"><![CDATA[<p>尝试dubbo+spring的同时，总结下通过maven创建父子工程的方法。（不考虑unit test）</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p><strong>Spring Boot：</strong> 1.4.7.RELEASE<br><strong>Maven：</strong> 3.2.5</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>eclipse</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/dubbo/dubbo-spring-boot-project" target="_blank" rel="noopener">https://github.com/dubbo/dubbo-spring-boot-project</a><br><a href="http://blog.csdn.net/yaerfeng/article/details/26448417" target="_blank" rel="noopener">http://blog.csdn.net/yaerfeng/article/details/26448417</a><br><a href="http://blog.csdn.net/isea533/article/details/73744497" target="_blank" rel="noopener">http://blog.csdn.net/isea533/article/details/73744497</a></p><h2 id="maven-国内镜像"><a href="#maven-国内镜像" class="headerlink" title="maven 国内镜像"></a>maven 国内镜像</h2><p>如果不翻墙，下载maven的依赖相当慢，可以添加阿里云的镜像， 速度相当快。<br>修改conf文件夹下的settings.xml文件，添加如下镜像配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">  &lt;/mirrors&gt;</span><br></pre></td></tr></table></figure></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="创建父maven工程"><a href="#创建父maven工程" class="headerlink" title="创建父maven工程"></a>创建父maven工程</h3><h4 id="创建普通的maven工程，参考如下截图"><a href="#创建普通的maven工程，参考如下截图" class="headerlink" title="创建普通的maven工程，参考如下截图"></a>创建普通的maven工程，参考如下截图</h4><p><img src="http://tech.jiu-shu.com/Dev-Ops/maven-create-parent.png" alt="maven-create-parent"></p><h4 id="填写参数"><a href="#填写参数" class="headerlink" title="填写参数"></a>填写参数</h4><p><img src="http://tech.jiu-shu.com/Dev-Ops/maven-create-parent-1.png" alt="maven-create-parent-1"></p><h4 id="删除无用文件夹"><a href="#删除无用文件夹" class="headerlink" title="删除无用文件夹"></a>删除无用文件夹</h4><p><img src="http://tech.jiu-shu.com/Dev-Ops/maven-create-parent-2.png" alt="maven-create-parent-2"></p><h4 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h4><ol><li>packaging 从jar改成pom <code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></li><li>添加spring-boot-starter-parent，添加dependency management。（maven的配置解释参考：<a href="http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html）" target="_blank" rel="noopener">http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html）</a><br>修改后配置如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.dubboot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;dubboot-example&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;dubboot-example&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.4.7.RELEASE&lt;/version&gt; &lt;!-- keep the version same with $&#123;springboot.version&#125; --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;dependencyManagement&gt; &lt;!-- 存在的价值只是为了方便管理版本 --&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.dubbo.springboot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-dubbo&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt; </span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="方式一：创建子maven子工程-（dubbo-服务接口）"><a href="#方式一：创建子maven子工程-（dubbo-服务接口）" class="headerlink" title="方式一：创建子maven子工程 （dubbo 服务接口）"></a>方式一：创建子maven子工程 （dubbo 服务接口）</h3><ul><li>选中父maven工程右键，新建maven module，输入相关参数即可。 -      </li><li>工程导入后删除测试相关：pom.xml 的junit依赖及测试相关java文件夹。</li><li>pom.xml 添加 <code>&lt;packaging&gt;jar&lt;/packaging&gt;</code><h3 id="方式二：创建子maven子工程-（Spring-Boot，-dubbo-服务实现）"><a href="#方式二：创建子maven子工程-（Spring-Boot，-dubbo-服务实现）" class="headerlink" title="方式二：创建子maven子工程 （Spring Boot， dubbo 服务实现）"></a>方式二：创建子maven子工程 （Spring Boot， dubbo 服务实现）</h3>从<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 创建, 添加依赖，JPA， Validation, Mysql 及其他依赖项（不选Spring Cloud 相关）。下载后解压至父maven工程，修改pom.xml 中的parent使其匹配父工程。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;com.dubboot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;dubboot-example&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure><p><img src="http://tech.jiu-shu.com/Dev-Ops/spring-io-initiator.png" alt="Spring Initiator"></p><p>在父工程中添加module：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">&lt;module&gt;dubboot-jpa&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure><p>然后可以顺利将子工程导入eclipse。</p>]]></content>
    
    <summary type="html">
    
      总结通过maven创建父子工程的方式。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用Nexus搭建Maven私服</title>
    <link href="https://choelea.github.io/Dev-Ops/Maven-Private-Repository-Server/"/>
    <id>https://choelea.github.io/Dev-Ops/Maven-Private-Repository-Server/</id>
    <published>2018-12-11T09:52:56.668Z</published>
    <updated>2018-12-11T09:52:56.669Z</updated>
    
    <content type="html"><![CDATA[<p>阐述如果利用Nexus来快速搭建maven仓库的私有服务器<br>私服搭建<br>Docker Hub链接地址： <a href="https://hub.docker.com/r/sonatype/nexus/" target="_blank" rel="noopener">https://hub.docker.com/r/sonatype/nexus/</a></p><p>docker pull sonatype/nexus<br>mkdir /data/nexus-data &amp;&amp; chown -R 200 /data/nexus-data<br>docker run -d -p 8081:8081 –name nexus -v /data/nexus-data:/nexus-data sonatype/nexus3​</p><p>本地Maven配置<br>​修改Maven的全局setting.xml文件如下：</p><p>文件路径： $MAVEN_HOME/conf/setting.xml</p><p>mirrors节点加入如下内容<br>    <mirror><br>      <id>nexus</id><br>      <mirrorof>*</mirrorof><br>      <name>Nexus</name><br>      <url><a href="http://192.168.1.80:8081/repository/maven-public/" target="_blank" rel="noopener">http://192.168.1.80:8081/repository/maven-public/</a></url><br>    </mirror> </p><p>profiles节点加入如下内容<br>    <profile><br>      <id>nexus</id><br>      <!--Enable snapshots for the built in central repo to direct --><br>      <!--all requests to nexus via the mirror --><br>      <repositories><br>        <repository><br>          <id>central</id><br>          <url><a href="http://central" target="_blank" rel="noopener">http://central</a></url><br>          <releases><enabled>true</enabled></releases><br>          <snapshots><enabled>true</enabled></snapshots><br>        </repository><br>      </repositories><br>     <pluginrepositories><br>        <pluginrepository><br>          <id>central</id><br>          <url><a href="http://central" target="_blank" rel="noopener">http://central</a></url><br>          <releases><enabled>true</enabled></releases><br>          <snapshots><enabled>true</enabled></snapshots><br>        </pluginrepository><br>      </pluginrepositories><br>    </profile> </p><p>activeProfiles​节点加入</p><p><activeprofile>nexus</activeprofile>​</p><p>对于Snapshot的jar，如果想及时的更新，可以在maven参数中加上-U，就可以获得最新的jar包。<br>本地组件deploy<br>除了配置本地Maven配置外，还需要在setting.xml文件中加入如下内容：</p><p>servers节点<br>    <server><br>      <id>maven-releases</id><br>      <username>admin</username><br>      <password>admin123</password><br>    </server><br>    <server><br>      <id>maven-snapshots</id><br>      <username>admin</username><br>      <password>admin123</password><br>    </server>  </p><p>项目的pom.xml文件，加入如下配置：<br>  <distributionmanagement><br>      <repository><br>          <id>maven-releases</id><br>          <url><a href="http://192.168.1.​80:8081/repository/maven-releases/" target="_blank" rel="noopener">http://192.168.1.​80:8081/repository/maven-releases/</a></url><br>      </repository><br>      <snapshotrepository><br>          <id>maven-snapshots</id><br>          <url><a href="http://192.168.1.80:8081/repository/maven-snapshots/" target="_blank" rel="noopener">http://192.168.1.80:8081/repository/maven-snapshots/</a></url><br>      </snapshotrepository><br>  </distributionmanagement>​</p>]]></content>
    
    <summary type="html">
    
      利用Nexus搭建Maven私服
    
    </summary>
    
    
  </entry>
  
</feed>
