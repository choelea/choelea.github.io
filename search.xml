<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>符号英语</title>
      <link href="/English-Material/symbol-english/"/>
      <url>/English-Material/symbol-english/</url>
      
        <content type="html"><![CDATA[<h1 id="符号英语表达汇总"><a href="#符号英语表达汇总" class="headerlink" title="符号英语表达汇总"></a>符号英语表达汇总</h1><ul><li>` back quote 反引号</li><li>~ tilde</li><li>! exclaim</li><li>@ at</li><li># number sign,英语国家是hash，美语是pound,音乐里作- -      sharp,如C#</li><li>$ dollar</li><li>% percent</li><li>^ caret</li><li>&amp; ampersand</li><li>* asterisk, star(美语),数学公式中作multiply</li><li>( parenleft,opening parentheses</li><li>) parenright,closing paretheses</li><li>minus; hyphen连字符,不读</li><li>_ underscore</li><li>+ plus</li><li>= equal</li><li>[ bracketleft,opening bracket</li><li>] bracketright,closing bracket</li><li>{ bracelet</li><li>} brace right</li><li>; semicolon</li><li>: colon</li><li>‘ quote</li><li>“ double quote</li><li>/ slash</li><li>\ backslash 反斜杠</li><li>| bar</li><li>, comma</li><li>&lt; less</li><li>> greater</li><li>. period</li><li>? question</li><li>space 空格</li></ul><h2 id="下面是一些特殊符号的英文读法"><a href="#下面是一些特殊符号的英文读法" class="headerlink" title="下面是一些特殊符号的英文读法,"></a>下面是一些特殊符号的英文读法,</h2><h4 id="主要是数学符号"><a href="#主要是数学符号" class="headerlink" title="主要是数学符号"></a>主要是数学符号</h4><ul><li>＜ is less than</li><li>＞ is more than</li><li>≮ is not less than </li><li>≯ is not more than</li><li>≤ is less than or equal to 小于或等于号 </li><li><ul><li>hyphen 连字符 </li></ul></li><li>≥ is more than or equal to 大于或等于号 </li><li>‘ apostrophe 省略号,英文中省略字符用的撇号;所有格符号</li><li>％ percent </li><li>－ dash 破折号 </li><li>‰ per mille</li><li>∞ infinity 无限大号 </li><li>∝ varies as 与…成比例 </li><li>( ) parentheses 圆括号 </li><li>√ (square) root 平方根 </li><li style="list-style: none"><input type="checkbox"> square brackets 方括号 </li><li>∵ since; because 因为 </li><li>《 》 French quotes 法文引号;书名号 </li><li>∴ hence 所以 </li><li>… ellipsis 省略号 </li><li>∷ equals, as (proportion) 等于，成比例 </li><li>¨ tandem colon 双点号</li><li>∠ angle 角 </li><li>∶ ditto 双点号</li><li>⌒ semicircle 半圆 </li><li>‖ parallel 双线号 </li><li>⊙ circle 圆 </li><li>／ virgule 斜线号 </li><li>○ circumference 圆周</li><li>～ swung dash 代字号 </li><li>△ triangle 三角形 </li><li>§ section; division 分节号 </li><li>⊥ perpendicular to 垂直于 </li><li>→ arrow 箭号；参见号 </li><li>∪ union of 并，合集</li><li>∩ intersection of 交，通集 </li><li>∫ the integral of …的积分 </li><li>± plus or minus 正负号 </li><li>∑ summation of 总和 </li><li>× is multiplied by 乘号 </li><li>° degree 度 </li><li>÷ is divided by 除号 </li><li>′ minute 分</li><li>″ second 秒 </li><li>≠ is not equal to 不等于号 </li><li>≡ is equivalent to 全等于号 </li><li>℃ Celsius degree 摄氏度 </li><li>≌ is equal to or approximately equal to 等于或约等于号</li></ul><h4 id="再附送希腊字母的读法"><a href="#再附送希腊字母的读法" class="headerlink" title="再附送希腊字母的读法"></a>再附送希腊字母的读法</h4><ul><li>α　Α　alpha [‘&aelig;lfa] </li><li>β　Β　beta [‘bi:ta / ‘beita] </li><li>γ　Γ　gamma [‘g&aelig;ma]　 </li><li>δ　Δ　delta [‘delta] </li><li>ε　Ε　epsilon [‘epsilan / ep’sailan] </li><li>ζ　Ζ　zeta [‘zi:ta] </li><li>η　Η　eta [‘i:ta / ‘eita] </li><li>θ　Θ　theta [‘θita] </li><li>ι　Ι　iota [ai’outa] </li><li>κ　Κ　kappa [‘k&aelig;pa] </li><li>λ　Λ　lamda [‘l&aelig;mda] </li><li>μ　Μ　mu [mju:] </li><li>ν　Ν　nu [nju:] </li><li>ξ　Ξ　xi [ksai / gzai / zai] </li><li>ο　Ο　omicron [ou’maikran] </li><li>π　Π　pi [pai] </li><li>ρ　Ρ　rho [rou] </li><li>σ　Σ　sigma [‘sigma] </li><li>τ　Τ　tau [tau] </li><li>υ　Υ　upsilon [‘ju:psilon / ju:p’sailan]　o 是反 c 。 </li><li>φ　Φ　phi [fai] </li><li>χ　Χ　chi [kai] </li><li>ψ　Ψ　psi [psi:] </li><li>ω　Ω　omega [‘oumiga / ou’mi:ga]</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Data Elasticsearch 快速上手全文检索</title>
      <link href="/Elastic-Technologies/spring-data-elasticsearch-quick-start/"/>
      <url>/Elastic-Technologies/spring-data-elasticsearch-quick-start/</url>
      
        <content type="html"><![CDATA[<p>通过Spring Data Elasticsearch 实现全文检索; 通过指定 boost 来控制查询语句的相对的权重; 通过自定义ResultMapper 来实现查询聚合功能。</p><h2 id="Elasticsearch-基础知识"><a href="#Elasticsearch-基础知识" class="headerlink" title="Elasticsearch 基础知识"></a>Elasticsearch 基础知识</h2><p>建立对Elasticsearch的初步的认识可以参考：<a href="https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA</a></p><p>上面的有些解释只是为了方便初学者快速掌握知识。ES的索引的Type在后期ES中会逐渐消失。<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html</a></p><p>官方的中文文档参考： <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>Spring Boot： 1.4.7</li><li>Spring Data Elasticsearch  2.0.11</li><li>Elasticsearch server 2.4</li></ul><blockquote><p>追加补充： 在随后的版本spring-data-elasticsearch 2.1.10.RELEASE 中增加了<code>AggregatedPage</code> ， 同时<code>org.springframework.data.elasticsearch.core.DefaultResultMapper</code> 也增加了聚合的支持。 笔者这里针对聚合的有部分工作，在2.1.10.RELEASE种已经不在需要，或者可以更优化一些。</p></blockquote><h2 id="安装与运行"><a href="#安装与运行" class="headerlink" title="安装与运行"></a>安装与运行</h2><h3 id="Elasticsearch-安装及运行"><a href="#Elasticsearch-安装及运行" class="headerlink" title="Elasticsearch 安装及运行"></a>Elasticsearch 安装及运行</h3><p>elasticsearch 是运行于java之上，可以直接下载运行。从<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-6" target="_blank" rel="noopener">https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-6</a> 下载2.4.6 版本。 </p><ul><li>ZIP sha   —– window安装包  </li><li>TAR sha   —– Mac 或者linux安装包</li><li>DEB sha   </li><li>RPM sha   —– linux rpm 包可以安装成系统服务</li></ul><p>ZIP包解压的直接进入 bin 目录运行 <code>./elasticserach</code>, 运行 <code>./elasticsearch -d</code> 后台运行<br> RPM 安装后通过 <code>service elasticsearch start</code> 来启动</p><h3 id="Kibana-安装及运行"><a href="#Kibana-安装及运行" class="headerlink" title="Kibana 安装及运行"></a>Kibana 安装及运行</h3><p> 和es的类似，elasticsearch2.4 对应kibana的版本是4.6； 下载地址： <a href="https://www.elastic.co/downloads/past-releases/kibana-4-6-6" target="_blank" rel="noopener">https://www.elastic.co/downloads/past-releases/kibana-4-6-6</a> </p><blockquote><p>kibana 解压方式无后台运行命令，建议通过rpm方式安装<code>sudo rpm -ivh kibana-4.6.6-x86_64.rpm</code> , 以服务方式启动和停止。</p></blockquote><h3 id="安装Kibana的Sense插件"><a href="#安装Kibana的Sense插件" class="headerlink" title="安装Kibana的Sense插件"></a>安装Kibana的Sense插件</h3><p>此版本下没有dev tools，需要单独安装sense插件, 进入Kibana 的安装目录 <code>/opt/kibana</code> 运行<code>./bin/kibana plugin --install elastic/sense</code>。 </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/choelea/spring-data-elasticsearch-quick-start" target="_blank" rel="noopener">https://github.com/choelea/spring-data-elasticsearch-quick-start</a>  2.0.11.RELEASE<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/choelea/spring-data-elasticsearch-quick-start</span><br><span class="line">cd spring-data-elasticsearch-quick-start/</span><br><span class="line">git checkout tags/2.0.11.RELEASE</span><br></pre></td></tr></table></figure></p><blockquote><p>最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch  自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper  已经支持了聚合。无需为聚合儿自定义ResultMapper。 </p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.data.elasticsearch.repositories.enabled = true</span><br><span class="line">spring.data.elasticsearch.cluster-nodes : 192.168.1.99:9300</span><br></pre></td></tr></table></figure><h2 id="定义Document"><a href="#定义Document" class="headerlink" title="定义Document"></a>定义Document</h2><p>参考： <code>com.joe.springdataelasticsearch.document.ProductDoc</code> . 定义文档需要注意必须有个id字段或者通过注解指定一个id字段，只有在有ID得情况下，文档才可以被更新。 否则会抛出异常：<code>No id property found for class com.joe.springdataelasticsearch.document.ProductDoc</code></p><p>当前版本下需要指定Field的type，否则也会报错。</p><blockquote><p>修改FieldType 会导致无法通过程序启动异常，需要手动删除后创建索引。 比如: 原有的type字段的FieldType是Long，改成String后会出现类似如下错误：<code>mapper [type] of different type, current_type [long], merged_type [string]</code></p></blockquote><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>系统启动后，创建索引和创建/更新mapping</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elasticsearchTemplate.deleteIndex(ProductDoc.class);</span><br><span class="line">elasticsearchTemplate.createIndex(ProductDoc.class);</span><br><span class="line">elasticsearchTemplate.putMapping(ProductDoc.class);</span><br></pre></td></tr></table></figure><p>启动后可以通过<code>http://192.168.1.99:9200/product-index/_mapping/main/</code> 来查看mapping。</p><blockquote><p>Notes：文档索引的mapping的创建，不会因为注解@Document， 而是因为ElasticsearchRepository的存在。删除ProductDocRespository，可以发现启动服务后，文档不会自动创建。 参考问题：<a href="https://stackoverflow.com/questions/29496081/spring-data-elasticsearchs-field-annotation-not-working" target="_blank" rel="noopener">https://stackoverflow.com/questions/29496081/spring-data-elasticsearchs-field-annotation-not-working</a></p></blockquote><h2 id="索引文档"><a href="#索引文档" class="headerlink" title="索引文档"></a>索引文档</h2><p>elasticsearch 是通过PUT接口来索引文档。<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html</a>。 在使用Spring Data Elasticsearch的的时候，我们可以很方便的通过防JPA Repository的方式来操作;  <code>ProductDocRespository.save(ProductDoc doc)</code>  来索引和更新文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface ProductDocRespository extends ElasticsearchRepository&lt;ProductDoc, Long&gt;</span><br></pre></td></tr></table></figure></p><p>参考<code>com.joe.springdataelasticsearch.listner.ContextRefreshedListener</code> 来查看索引测试文档数据。</p><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><p><img src="/assets/preimg/Elastic-Technologies/spring-data-elasticsearch-productdocs.png" alt="spring-data-elasticsearch-productdocs"></p><h2 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h2><p>查询主要解决：</p><ul><li>多个字段搜索查询使用布尔匹配的方式， 参考官方说明 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_how_match_uses_bool.html" target="_blank" rel="noopener">布尔匹配</a></li><li>不同字段的权重设置，采用设置Boost方式， 参考： <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_boosting_query_clauses.html" target="_blank" rel="noopener">查询语句提升权重</a></li><li>聚合结果集 </li></ul><p><strong>具体代码参考如下</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public Page&lt;ProductDoc&gt; search(String keyword, Boolean isSelfRun, Pageable pageable) &#123;</span><br><span class="line">BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">if (StringUtils.isNotEmpty(keyword)) &#123;</span><br><span class="line">queryBuilder.should(QueryBuilders.matchQuery(ProductDoc._name, keyword).boost(3)); // 给name字段更高的权重</span><br><span class="line">queryBuilder.should(QueryBuilders.matchQuery(ProductDoc._description, keyword));   // description 默认权重 1</span><br><span class="line">queryBuilder.minimumNumberShouldMatch(1); // 至少一个should条件满足</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isSelfRun!=null &amp;&amp; isSelfRun) &#123;</span><br><span class="line">queryBuilder.must(QueryBuilders.matchQuery(ProductDoc._isSelfRun, Boolean.TRUE)); // 精准值条件查询</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)</span><br><span class="line">.withPageable(pageable).build();</span><br><span class="line">LOGGER.info(&quot;\n search(): searchContent [&quot; + keyword + &quot;] \n DSL  = \n &quot; + searchQuery.getQuery().toString());</span><br><span class="line">return productDocRespository.search(searchQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试全文检索"><a href="#测试全文检索" class="headerlink" title="测试全文检索"></a>测试全文检索</h2><ol><li><a href="http://localhost:8080/products?keyword=huawei" target="_blank" rel="noopener">http://localhost:8080/products?keyword=huawei</a> </li><li><a href="http://localhost:8080/products?keyword=iphone" target="_blank" rel="noopener">http://localhost:8080/products?keyword=iphone</a> 通过对iphone的搜索可以验证boost值得效果</li><li><a href="http://localhost:8080/products?keyword=iphone&amp;isSelfRun=true" target="_blank" rel="noopener">http://localhost:8080/products?keyword=iphone&amp;isSelfRun=true</a>  验证精准值匹配效果</li></ol><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><p><strong>需求： </strong>统计搜索出来的智能手机和普通手机的数量，从而提供进一步的过滤。</p><p>聚合的详细理解参考 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/aggregations.html" target="_blank" rel="noopener">聚合 | Elasticsearch: 权威指南  | Elastic</a>， 这里我们只通过简单的桶（Bucket）的方式来实现需求。</p><p>通过google搜索<code>spring data elasticsearch aggregation example</code> 不难找到类似如下链接中的代码：<a href="https://github.com/spring-projects/spring-data-elasticsearch/blob/master/src/test/java/org/springframework/data/elasticsearch/core/aggregation/ElasticsearchTemplateAggregationTests.java；" target="_blank" rel="noopener">https://github.com/spring-projects/spring-data-elasticsearch/blob/master/src/test/java/org/springframework/data/elasticsearch/core/aggregation/ElasticsearchTemplateAggregationTests.java；</a> 但是我们需要同时返回桶的信息和检索出来的分页信息。如何利用Spring Data Elasticsearch来完成？</p><p>通过查看spring-data-elasticsearch的源代码我们可以发现<code>org.springframework.data.elasticsearch.core.DefaultResultMapper</code> 会被默认用来返回分页检索出来的数据。需要同时返回分页数据及桶的数据，我们就需要定制一个ResultMapper； 参考：<code>com.joe.springdataelasticsearch.core.ProductDocAggregationResultMapper</code>。</p><h2 id="聚合查询测试"><a href="#聚合查询测试" class="headerlink" title="聚合查询测试"></a>聚合查询测试</h2><p><a href="http://localhost:8080/products/aggregation?keyword=China" target="_blank" rel="noopener">http://localhost:8080/products/aggregation?keyword=China</a> 可以查出总共有5条结果，聚合返回告诉你其中有4个智能手机，1个普通手机。<br><strong>返回JSON 数据如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;content&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 2,</span><br><span class="line">      &quot;name&quot;: &quot;Huawei&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 5,</span><br><span class="line">      &quot;name&quot;: &quot;Iphone X&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Iphone X is made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 1,</span><br><span class="line">      &quot;name&quot;: &quot;Mac Pro&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Mac Pro is made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 7,</span><br><span class="line">      &quot;name&quot;: &quot;Nokia N90&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Nokia N 90 is made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;GENERAL&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 3,</span><br><span class="line">      &quot;name&quot;: &quot;Huawei Max3&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Huawei is designed / made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;bucketsByType&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;key&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;lable&quot;: &quot;type&quot;,</span><br><span class="line">      &quot;docCount&quot;: 4</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;key&quot;: &quot;GENERAL&quot;,</span><br><span class="line">      &quot;lable&quot;: &quot;type&quot;,</span><br><span class="line">      &quot;docCount&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;totalElements&quot;: 5,</span><br><span class="line">  &quot;last&quot;: true,</span><br><span class="line">  &quot;totalPages&quot;: 1,</span><br><span class="line">  &quot;number&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 10,</span><br><span class="line">  &quot;sort&quot;: null,</span><br><span class="line">  &quot;numberOfElements&quot;: 5,</span><br><span class="line">  &quot;first&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h2><p>参考：<a href="http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-highlight" target="_blank" rel="noopener">http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-highlight</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Data Elasticsearch 快速上手全文检索 - 进阶</title>
      <link href="/Elastic-Technologies/spring-data-elasticsearch-quick-start-2/"/>
      <url>/Elastic-Technologies/spring-data-elasticsearch-quick-start-2/</url>
      
        <content type="html"><![CDATA[<p>继上一篇 <a href="/assets/preimg/Elastic-Technologies/spring-data-elasticsearch-quick-start">Spring Data Elasticsearch 快速上手全文检索</a>之后，进一步深入以下内容：</p><ul><li>高亮显示关键词</li><li>指定Analyzer更合理的检索</li></ul><blockquote><p>最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch 自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper 已经支持了聚合。无需为聚合儿自定义ResultMapper。</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/choelea/spring-data-elasticsearch-quick-start</span><br></pre></td></tr></table></figure><p><a href="https://github.com/elastic/elasticsearch/issues/11713" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch/issues/11713</a></p><h2 id="高亮关键词"><a href="#高亮关键词" class="headerlink" title="高亮关键词"></a>高亮关键词</h2><p>对name和description中的关键字进行高亮显示，直接参考代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)</span><br><span class="line">.withPageable(pageable)</span><br><span class="line">.withHighlightFields( new HighlightBuilder.Field(ProductDoc._name).forceSource(true), new HighlightBuilder.Field(ProductDoc._description).forceSource(true))</span><br><span class="line">.addAggregation(termBuilder).build();</span><br></pre></td></tr></table></figure></p><p>默认情况下返回高亮字段不在_source内，当转成成我们的ProductDoc的时候对应的name和description是不会有变化的， 这个时候还是需要定制ResultMapper， 因此这里定制了一个ExtResultMapper。 将高亮字段覆盖到ProductDoc 中对应的字段去。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>文档的title，页面及列表都会展示</title>
      <link href="/Elastic-Technologies/spring-data-elasticsearch-2.1.12-highlight/"/>
      <url>/Elastic-Technologies/spring-data-elasticsearch-2.1.12-highlight/</url>
      
        <content type="html"><![CDATA[<p>这个是一个模板, 请务必将showOnHome 修改为true</p><h1 id="欢迎使用"><a href="#欢迎使用" class="headerlink" title="欢迎使用"></a>欢迎使用</h1><p>本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：</p><ul><li><strong>Markdown和扩展Markdown简洁的语法</strong></li><li><strong>代码块高亮</strong></li><li><strong>图片链接和图片上传</strong></li><li><strong>丰富的快捷键</strong></li></ul><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>Cmd-‘ 引用</li><li>Cmd-B    加粗</li><li>Cmd-E     清除Block</li><li>Cmd-H     标题Header变小</li><li>Cmd-I       斜体</li><li>Cmd-K      链接</li><li>Cmd-L     无序列表</li><li>Cmd-P     Preview</li><li>Cmd-Alt-C     代码块</li><li>Cmd-Alt-I     插入图片</li><li>Cmd-Alt-L    有序列表</li><li>Shift-Cmd-H  标题Header变大</li><li>F9     窗口拆分</li><li>F11    全屏</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>kibana的访问控制 - Nginx 反向代理 - 免费</title>
      <link href="/Elastic-Technologies/Nignx-Kibana-Security/"/>
      <url>/Elastic-Technologies/Nignx-Kibana-Security/</url>
      
        <content type="html"><![CDATA[<p>前一篇<a href="http://blog.csdn.net/choelea/article/details/53841218" target="_blank" rel="noopener"> Kibana 5.x 加强安全</a> 采用的是官方的x-pack 插件来实现elastic技术栈的相关产品的权限控制。功能不错，也提供了很大的灵活性，不过x-pack并非免费产品；咨询了下licence价格，大概三个节点年费六千多美刀。。。废话不多说了，想想替代方案 - Nginx 反向代理 （收回5601端口，通过nginx反向代理+basic authentication来保证安全）</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-on-centos-7" target="_blank" rel="noopener">How To Create a Self-Signed SSL Certificate for Nginx on CentOS 7</a></p><h3 id="配置Nginx-SSL"><a href="#配置Nginx-SSL" class="headerlink" title="配置Nginx SSL"></a>配置Nginx SSL</h3><h4 id="第一步-安装-Nginx-并配置防火墙"><a href="#第一步-安装-Nginx-并配置防火墙" class="headerlink" title="第一步: 安装 Nginx 并配置防火墙"></a>第一步: 安装 Nginx 并配置防火墙</h4><p>参考上面的文章</p><blockquote><p><strong>注意： 80 和 443 端口必须对外打开。 当遇见ERR_CONNECTION_REFUSED 这类错误的时候，一定要提高警惕查看端口是否打开。以免浪费时间在配置上面。可以ssh到nginx机器上通过curl 的命令来验证，如果服务器上curl可以访问，外面不可访问；那么很可能端口没开放</strong></p></blockquote><h4 id="第二步：生成证书"><a href="#第二步：生成证书" class="headerlink" title="第二步：生成证书"></a>第二步：生成证书</h4><p>参考上面的文章</p><h4 id="第三步：添加kibana-https-conf配置"><a href="#第三步：添加kibana-https-conf配置" class="headerlink" title="第三步：添加kibana.https.conf配置"></a>第三步：添加kibana.https.conf配置</h4><p>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 http2 ssl;</span><br><span class="line">    listen [::]:443 http2 ssl;</span><br><span class="line"></span><br><span class="line">    server_name kibana.domain.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;</span><br><span class="line">    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;</span><br><span class="line">    ssl_dhparam /etc/ssl/certs/dhparam.pem;</span><br><span class="line"></span><br><span class="line">    ########################################################################</span><br><span class="line">    # from https://cipherli.st/                                            #</span><br><span class="line">    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html #</span><br><span class="line">    ########################################################################</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_ciphers &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;</span><br><span class="line">    ssl_ecdh_curve secp384r1;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_tickets off;</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    ssl_stapling_verify on;</span><br><span class="line">    resolver 8.8.8.8 8.8.4.4 valid=300s;</span><br><span class="line">    resolver_timeout 5s;</span><br><span class="line">    # Disable preloading HSTS for now.  You can use the commented out header line that includes</span><br><span class="line">    # the &quot;preload&quot; directive if you understand the implications.</span><br><span class="line">    #add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains&quot;;</span><br><span class="line">    add_header X-Frame-Options DENY;</span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line"></span><br><span class="line">    ##################################</span><br><span class="line">    # END https://cipherli.st/ BLOCK #</span><br><span class="line">    ##################################</span><br><span class="line">    </span><br><span class="line">    # 这里是反向代理到kibana服务 走http协议</span><br><span class="line">    location / &#123;</span><br><span class="line">       proxy_pass   http://localhost:5601;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第四步：验证SSL-访问"><a href="#第四步：验证SSL-访问" class="headerlink" title="第四步：验证SSL 访问"></a>第四步：验证SSL 访问</h4><p>为设置http跳转的时候，注意在浏览器地址栏中输入<a href="https://kibana.domain.com" target="_blank" rel="noopener">https://kibana.domain.com</a> 来验证</p><h4 id="第五步：-添加Nginx的Basic-Authentication-访问控制"><a href="#第五步：-添加Nginx的Basic-Authentication-访问控制" class="headerlink" title="第五步： 添加Nginx的Basic Authentication 访问控制"></a>第五步： 添加Nginx的Basic Authentication 访问控制</h4><ol><li>查看是否有安装httpd-tools <code>sudo rpm -qa | grep httpd-tools</code>, 如果有，则可以看到如下信息：<code>httpd-tools-2.4.6-40.el7.centos.4.x86_64</code> 如果没有安装，可以通过<code>sudo yum -y install httpd-tools</code> 来安装</li><li><p>配置nginx 反向代理 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auth_basic &quot; Basic Authentication &quot;;      </span><br><span class="line">auth_basic_user_file &quot;/etc/nginx/.htpasswd&quot;;</span><br></pre></td></tr></table></figure><p>添加至反向代理的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass   http://localhost:5601;</span><br><span class="line">    auth_basic &quot; Basic Authentication &quot;;      </span><br><span class="line">    auth_basic_user_file &quot;/etc/nginx/.htpasswd&quot;;       </span><br><span class="line">&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></li><li><p>生成密码文件 <code>sudo htpasswd -c /etc/nginx/.htpasswd username</code> 根据提示输入密码</p></li><li>重新加载ngixn <code>sudo service nginx reload</code></li><li>再次登录来，提示弹出框，输入用户名和密码</li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Metricbeat 的使用</title>
      <link href="/Elastic-Technologies/Metricbeat-Usage/"/>
      <url>/Elastic-Technologies/Metricbeat-Usage/</url>
      
        <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>统计并展示系统的信息 cpu， 内存等 (当然metricbeat能收集的信息种类还很多)</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol><li>版本： 5.x</li><li>已经安装了ELK (elasticsearch, logstash (可选）, kibana)</li><li>安装了x-pack  （配置了对应的security）（可选） 参考 <a href="http://blog.csdn.net/choelea/article/details/53841218" target="_blank" rel="noopener">Kibana 5.x 加强安全</a></li></ol><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装，配置参考  <a href="https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-installation.html" target="_blank" rel="noopener">官方网站</a><br>使用OOTB配置即可，一般只需要修改ES的端口和地址。 如果加强了security，也需要更改 metricbeat.yml。 这里已经加强了安全，配置了用户，故需要更改metricbeat.yml添加elasticsearch的相关访问用户。<br>（创建角色和用户可以参考 <a href="http://blog.csdn.net/choelea/article/details/53841218" target="_blank" rel="noopener">Kibana 5.x 加强安全</a> ，这里角色需要用操作索引metricbeat-*）</p><blockquote><p>elasticsearch 默认绑定了localhost的访问，需要取消这种绑定。 设置<code>network.host: 0.0.0.0</code> 0.0.0.0 表示任意地址，如果设置成了IP地址，那么同台机器的kibana和logstash的需要做对应的修改。（比如：192.168.1.50， logstash和kibana需要把链接elasticsearch的hosts 从localhost改成：192.168.1.50）</p></blockquote><h3 id="加载kibana的示例-index-template-和-dashboards"><a href="#加载kibana的示例-index-template-和-dashboards" class="headerlink" title="加载kibana的示例 index template 和 dashboards"></a>加载kibana的示例 index template 和 dashboards</h3><blockquote><p>因为metricbeat 可能装在多个机器，index template 和dashboard 只需要导入一次即可。默认会自动加载index template到elasticsearch。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./scripts/import_dashboards -es http://localhost:9200 -user elastic -pass changeme</span><br></pre></td></tr></table></figure><h3 id="kibana中查看对应的结果"><a href="#kibana中查看对应的结果" class="headerlink" title="kibana中查看对应的结果"></a>kibana中查看对应的结果</h3><p>登录kibana打开对应的dashboard 既可以看到统计报告了</p><p><img src="/assets/preimg/Elastic-Technologies/kibana-statics.png" alt="Kibana 中 展示系统运行状态"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Logstash Filter 配置</title>
      <link href="/Elastic-Technologies/Logstash-Filter/"/>
      <url>/Elastic-Technologies/Logstash-Filter/</url>
      
        <content type="html"><![CDATA[<p>笔者这里仅仅列出配置文件，在研究之后最红并没有采用在logstash的接下日志为json的做法。而是将json的输出放在了各个服务/应用中处理， spring boot的app可以参考：<a href="https://github.com/logstash/logstash-logback-encoder" target="_blank" rel="noopener">logstash-logback-encoder</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  #If log line contains tab character followed by &apos;at&apos; then we will tag that entry as stacktrace</span><br><span class="line">  if [message] =~ &quot;\tat&quot; &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; [&quot;message&quot;, &quot;^(\tat)&quot;]</span><br><span class="line">      add_tag =&gt; [&quot;stacktrace&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #Grokking Spring Boot&apos;s default log format</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; [ </span><br><span class="line">#Record transaction</span><br><span class="line">&quot;message&quot;,&quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \[\s*(?&lt;thread&gt;[^\]]+)\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\s*: \[\s*(?&lt;transactionInfo&gt;[^\]]+)\]&quot;,</span><br><span class="line">&quot;message&quot;, &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \[\s*(?&lt;thread&gt;[^\]]+)\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\s*:\s+(?&lt;logmessage&gt;.*)&quot;,</span><br><span class="line">&quot;message&quot;, &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- .+? :\s+(?&lt;logmessage&gt;.*)&quot;</span><br><span class="line">             ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #Parsing out timestamps which are in timestamp field thanks to previous grok section</span><br><span class="line">  date &#123;</span><br><span class="line">    match =&gt; [ &quot;timestamp&quot; , &quot;yyyy-MM-dd HH:mm:ss.SSS&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line"> elasticsearch&#123;&#125; </span><br><span class="line"> stdout&#123;</span><br><span class="line">   codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里grok配置了三册过滤， 第一层用作统计，message的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2016-07-15 20:30:30.884  INFO 14624 --- [nio-8081-exec-3] c.l.a.w.controller.OfbizProxyController  : [&#123;&quot;transactionCode&quot;:&quot;ofbizProxy&quot;,&quot;transactionDuration&quot;:246&#125;]</span><br></pre></td></tr></table></figure><p>使用<a href="http://grokdebug.herokuapp.com/" target="_blank" rel="noopener">Grok Debugger</a> 解析后如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"timestamp"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"2016-07-15 20:30:30.884"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"YEAR"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"2016"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"MONTHNUM"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"07"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"MONTHDAY"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"15"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"TIME"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"20:30:30.884"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"HOUR"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"20"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"MINUTE"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"30"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"SECOND"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"30.884"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"level"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"INFO"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"pid"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"14624"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"BASE10NUM"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"14624"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"thread"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"nio-8081-exec-3"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"class"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"c.l.a.w.controller.OfbizProxyController"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"transactionInfo"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"&#123;"</span>transactionCode<span class="string">":"</span>ofbizProxy<span class="string">","</span>transactionDuration<span class="string">":246&#125;"</span></span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二层针对普通的log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2016-07-15 20:30:07.768  INFO 14624 --- [nio-8081-exec-1] c.l.a.web.controller.LoginController     : Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1</span><br></pre></td></tr></table></figure><p>解析后的json如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;timestamp&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;2016-07-15 20:30:07.768&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;YEAR&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;2016&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;MONTHNUM&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;07&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;MONTHDAY&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;15&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;TIME&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;20:30:07.768&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;HOUR&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;20&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;MINUTE&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;30&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;SECOND&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;07.768&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;level&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;INFO&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;pid&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;14624&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;BASE10NUM&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;14624&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;thread&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;nio-8081-exec-1&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;class&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;c.l.a.web.controller.LoginController&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;logmessage&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1&quot;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三层针对遗漏的无法匹配到的log再次解析， 这里暂时没有示例</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Elasticsearch 自定义Mapping</title>
      <link href="/Elastic-Technologies/Elasticsearch-Mapping/"/>
      <url>/Elastic-Technologies/Elasticsearch-Mapping/</url>
      
        <content type="html"><![CDATA[<h2 id="Mapping-定义"><a href="#Mapping-定义" class="headerlink" title="Mapping 定义"></a>Mapping 定义</h2><p>前面有一个篇简单的关于mapping的博客，当时是基于2.4 版本。 elastic技术栈在最近很活跃，目前版本已经更新至5.x。5.x有了比较大的变化。2.4 版本的定义在5.x上大部分已经失去了意义。（比如：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/string.html" target="_blank" rel="noopener">5.x已经不再支持string 类型</a>）<br><strong>这里截取一点官网对应的</strong><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/mapping.html" target="_blank" rel="noopener">定义</a>：</p><blockquote><p>elasticsearch 通过定义的映射mapping来决定文档及其字段改如何被存储和索引。比如：字段是否可以支持全文搜索; 字段是否包含日期，地理位置; 日期的格式; 自定义自动映射的规则。</p></blockquote><p>基于5.x，<a href="http://blog.csdn.net/choelea/article/details/53320140" target="_blank" rel="noopener">前面博客</a> 提到的user，uri等字段就可以使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/keyword.html" target="_blank" rel="noopener">keyword type</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /business-index-*/_mapping/business</span><br><span class="line">&#123;</span><br><span class="line"> &quot;properties&quot; : &#123;</span><br><span class="line">    &quot;uri&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class="line">    &quot;user&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class="line">    &quot;keyword&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class="line">    &quot;responseStatus&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125;,</span><br><span class="line">    &quot;responseTime&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>elastic的文档维护的算是比较好的，基本英语OK的都是直接去参考官方文档。  mapping的更新可以参考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/indices-put-mapping.html" target="_blank" rel="noopener">elastic 官网</a>     </p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>使用ELK来做日志归总</title>
      <link href="/Elastic-Technologies/Elasticsearch-Logstash-Kibana-Log-Collecting/"/>
      <url>/Elastic-Technologies/Elasticsearch-Logstash-Kibana-Log-Collecting/</url>
      
        <content type="html"><![CDATA[<h1 id="ELK-初探"><a href="#ELK-初探" class="headerlink" title="ELK 初探"></a>ELK 初探</h1><p>ELK实时日志分析平台 初次尝试。 ELK 的多种架构请参考文章: <a href="https://blog.csdn.net/lively1982/article/details/50678657" target="_blank" rel="noopener">漫谈ELK在大数据运维中的应用</a></p><h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><ul><li>CentOS 7 </li><li>Oracle JDK 8</li><li>Kibana 4.5.2</li><li>Elaticsearch 2.3.4</li><li>logstash 2.3.4</li><li>filebeat 1.2.3<br>查看version command： <code>filebeat --version</code><h2 id="系统架构图"><a href="#系统架构图" class="headerlink" title="系统架构图"></a>系统架构图</h2><img src="/assets/preimg/Elastic-Technologies/elk.png" alt="elk"><h2 id="软件的安装"><a href="#软件的安装" class="headerlink" title="软件的安装"></a>软件的安装</h2>采用yum的安装模式。首先需要添加对应的repo文件。 对应的详细的安装方法可以参考在线文档， 这里以logstash为例。<h3 id="logstash-安装"><a href="#logstash-安装" class="headerlink" title="logstash 安装"></a>logstash 安装</h3></li></ul><ul><li><strong>Download and install the public signing key</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure><ul><li><strong>添加Repo到目录/etc/yum.repos.d/， 比如：logstash.repo</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[logstash-2.3]</span><br><span class="line">name=Logstash repository for 2.3.x packages</span><br><span class="line">baseurl=https://packages.elastic.co/logstash/2.3/centos</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><ul><li><strong>安装</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install logstash</span><br></pre></td></tr></table></figure><ul><li><strong>随系统自动启动</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig --add filebeat</span><br></pre></td></tr></table></figure></li></ul><h3 id="其他软件的repositories"><a href="#其他软件的repositories" class="headerlink" title="其他软件的repositories"></a>其他软件的repositories</h3><p><strong>filebeat</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[beats]</span><br><span class="line">name=Elastic Beats Repository</span><br><span class="line">baseurl=https://packages.elastic.co/beats/yum/el/$basearch</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure><p><strong>elasticsearch <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-repositories.html" target="_blank" rel="noopener">官方介绍</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch-2.x]</span><br><span class="line">name=Elasticsearch repository for 2.x packages</span><br><span class="line">baseurl=https://packages.elastic.co/elasticsearch/2.x/centos</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p><strong>kibana <a href="https://www.elastic.co/guide/en/kibana/current/setup.html" target="_blank" rel="noopener">在线文档</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[kibana-4.5]</span><br><span class="line">name=Kibana repository for 4.5.x packages</span><br><span class="line">baseurl=http://packages.elastic.co/kibana/4.5/centos</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p><strong>查看服务状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">servie logstash status</span><br></pre></td></tr></table></figure><p><strong>查看服务文件路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql logstash</span><br></pre></td></tr></table></figure><h2 id="FileBeat-使用"><a href="#FileBeat-使用" class="headerlink" title="FileBeat 使用"></a>FileBeat 使用</h2><p>filebeat 安装后的配置文件存放于：/etc/filebeat/下<br>修改配置文件filebeat.yml<br><strong>1， 修改文件的路径：比如：/home/osboxes/app.log</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filebeat:</span><br><span class="line">  prospectors:</span><br><span class="line">    -</span><br><span class="line">      paths:</span><br><span class="line">        - &quot;/home/osboxes/app.log&quot;</span><br></pre></td></tr></table></figure></p><p><strong>2， 修改输出， 默认是直接输出到Elasticsearch，我们修改输出到logstash</strong><br>只需要打开对应的注释即可，将elasticsearch相关注释掉， 打开logstash的注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line">  logstash:</span><br><span class="line">    hosts: [&quot;127.0.0.1:5044&quot;]</span><br><span class="line"></span><br><span class="line">    # Optional load balance the events between the Logstash hosts</span><br><span class="line">    #loadbalance: true</span><br></pre></td></tr></table></figure><p>filebeat.yml 已经配置了多个output选项，我们只需要打开注解。 这里可以做个小的测试。 修改配置后可运行命令验证：<code>filebeat -configtest -e.</code> <strong>filebeat只能配置一个output项，修改配置后需要重启</strong><br>1，找到Console output，打开注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##Console output</span><br><span class="line">   console:</span><br><span class="line">    # Pretty print json event</span><br><span class="line">    pretty: true</span><br></pre></td></tr></table></figure><p>2， 停止filebeat服务 <code>sudo service filebeat stop</code>，手动启动filebeat来方便我们观察console输出<code>sudo filebeat -e -c /etc/filebeat/filebeat.yml</code>。(On windows: <code>filebeat.exe -e -c filebeat.yml</code>)<br>3， 新开窗口输出信息至文件/var/log/app.log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure></p><p>4，切换至filebeat的启动窗口可以看到如下的输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[osboxes@osboxes logstash]$ sudo filebeat -e -c /etc/filebeat/filebeat.yml</span><br><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2016-07-11T13:44:43.926Z&quot;,</span><br><span class="line">  &quot;beat&quot;: &#123;</span><br><span class="line">    &quot;hostname&quot;: &quot;osboxes&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;osboxes&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;count&quot;: 1,</span><br><span class="line">  &quot;fields&quot;: null,</span><br><span class="line">  &quot;input_type&quot;: &quot;log&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot;,</span><br><span class="line">  &quot;offset&quot;: 130,</span><br><span class="line">  &quot;source&quot;: &quot;/home/osboxes/app.log&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;log&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LogStash-配置"><a href="#LogStash-配置" class="headerlink" title="LogStash 配置"></a>LogStash 配置</h2><p> 上面的小测做完后，将filebeat的配置改回输出到logstash。</p><h3 id="连通filebeat和logstash"><a href="#连通filebeat和logstash" class="headerlink" title="连通filebeat和logstash"></a>连通filebeat和logstash</h3><p> <strong>1， 添加logstash.conf 文件在/etc/logstash/conf.d/logstash.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后可以通过命令验证配置是否正确：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf --configtest</span><br></pre></td></tr></table></figure><p><strong>2, 启动logstash</strong><br>采用命令启动方便从console观察输出。<code>sudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf</code>如果采用service的启动方式，需要去/var/log/logstash/logstash.stdout 查看log<br><strong>3，启动filebeat 然后向文件app.log 写入log</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure><p><strong>4，切换至logstash窗口， 可以观察到一下输出，证明filebeat已经可以成功输出到logstash</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[osboxes@osboxes bin]$ sudo ./logstash -f /etc/logstash/conf.d/logstash.conf </span><br><span class="line">Settings: Default pipeline workers: 1</span><br><span class="line">Pipeline main started</span><br><span class="line">2016-07-12T05:57:46.877Z osboxes 2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Grok-Filter-Plugin解析日志-（spring-boot-的默认日志格式）"><a href="#使用Grok-Filter-Plugin解析日志-（spring-boot-的默认日志格式）" class="headerlink" title="使用Grok Filter Plugin解析日志 （spring boot 的默认日志格式）"></a>使用Grok Filter Plugin解析日志 （spring boot 的默认日志格式）</h3><p><strong>1， 修改logstash.conf 添加filter，重启logstash</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  #If log line contains tab character followed by &apos;at&apos; then we will tag that entry as stacktrace</span><br><span class="line">  if [message] =~ &quot;\tat&quot; &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; [&quot;message&quot;, &quot;^(\tat)&quot;]</span><br><span class="line">      add_tag =&gt; [&quot;stacktrace&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #Grokking Spring Boot&apos;s default log format</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; [ &quot;message&quot;,</span><br><span class="line">               &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \[(?&lt;thread&gt;[A-Za-z0-9-]+)\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\s*:\s+(?&lt;logmessage&gt;.*)&quot;,</span><br><span class="line">               &quot;message&quot;,</span><br><span class="line">               &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- .+? :\s+(?&lt;logmessage&gt;.*)&quot;</span><br><span class="line">             ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #Parsing out timestamps which are in timestamp field thanks to previous grok section</span><br><span class="line">  date &#123;</span><br><span class="line">    match =&gt; [ &quot;timestamp&quot; , &quot;yyyy-MM-dd HH:mm:ss.SSS&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout&#123;</span><br><span class="line">   codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>2，写入log到文件app.log</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure><p><strong>3， 切换logstash查看输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       &quot;message&quot; =&gt; &quot;2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; &quot;2016-06-29T16:14:09.477Z&quot;,</span><br><span class="line">         &quot;count&quot; =&gt; 1,</span><br><span class="line">        &quot;fields&quot; =&gt; nil,</span><br><span class="line">        &quot;source&quot; =&gt; &quot;/home/osboxes/app.log&quot;,</span><br><span class="line">        &quot;offset&quot; =&gt; 987,</span><br><span class="line">          &quot;type&quot; =&gt; &quot;log&quot;,</span><br><span class="line">    &quot;input_type&quot; =&gt; &quot;log&quot;,</span><br><span class="line">          &quot;beat&quot; =&gt; &#123;</span><br><span class="line">        &quot;hostname&quot; =&gt; &quot;osboxes&quot;,</span><br><span class="line">            &quot;name&quot; =&gt; &quot;osboxes&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">          &quot;host&quot; =&gt; &quot;osboxes&quot;,</span><br><span class="line">          &quot;tags&quot; =&gt; [</span><br><span class="line">        [0] &quot;beats_input_codec_plain_applied&quot;</span><br><span class="line">    ],</span><br><span class="line">     &quot;timestamp&quot; =&gt; &quot;2016-06-29 17:14:09.477&quot;,</span><br><span class="line">         &quot;level&quot; =&gt; &quot;INFO&quot;,</span><br><span class="line">           &quot;pid&quot; =&gt; &quot;6244&quot;,</span><br><span class="line">        &quot;thread&quot; =&gt; &quot;main&quot;,</span><br><span class="line">         &quot;class&quot; =&gt; &quot;faultConfiguringBeanFactoryPostProcessor&quot;,</span><br><span class="line">    &quot;logmessage&quot; =&gt; &quot;No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，完成了初步的日志的解析，日志别解析至对应的fields中。 接下来将这些数据推送至Elasticsearch进行索引。</p><h3 id="修改logstash配置，输出到elasticsearch"><a href="#修改logstash配置，输出到elasticsearch" class="headerlink" title="修改logstash配置，输出到elasticsearch"></a>修改logstash配置，输出到elasticsearch</h3><p>修改配置文件的output。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这样的结构，Logstash使用http协议连接到Elasticsearch。上面的例子假设Logstash和Elasticsearch运行在同一个机器上。您可以使用主机配置<code>hosts =&gt; &quot;es-machine:9092</code>指定远程Elasticsearch实例。</p><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p>一次启动elasticsearch，kibana，logstash，filebeat。 （filebeat已启动的话，无需重启）</p><h3 id="安装Sense"><a href="#安装Sense" class="headerlink" title="安装Sense"></a>安装Sense</h3><p>进入/opt/kibana/ 运行：<code>$sudo ./bin/kibana plugin --install elastic/sense</code><br>You should now be able to access Sense with a web browser on <a href="http://localhost:5601/app/sense" target="_blank" rel="noopener">http://localhost:5601/app/sense</a></p><h2 id="spring-boot-日志配置"><a href="#spring-boot-日志配置" class="headerlink" title="spring boot 日志配置"></a>spring boot 日志配置</h2><p><strong>尽量采用统一的日志输出格式</strong><br>1, JPA 的sql输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#spring.jpa.show-sql = true #不推荐这种方式</span><br><span class="line">logging.level.org.hibernate.SQL=DEBUG</span><br></pre></td></tr></table></figure><h2 id="常见的部署方式"><a href="#常见的部署方式" class="headerlink" title="常见的部署方式"></a>常见的部署方式</h2><p>由于logstash比较消耗系统资源， 采用filebeat 来采集数据， 然后推送到logstash。 简单的case可以将logstash elasticsearch  kibana 放在一个虚拟机。 filebeat可以分别安装在各个对应的微服务上。 <strong>注意：</strong>当这些部署在不同的机器上的时候，需要打开对应的端口。 对应的配置也需要相对修改下。<br><strong>打开logstash的端口：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo firewall-cmd --zone=public --add-port=5044/tcp --permanent</span><br><span class="line">$ sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>filebeat的配置修改</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logstash:</span><br><span class="line">    # The Logstash hosts</span><br><span class="line">    hosts: [&quot;192.168.1.186:5044&quot;]</span><br></pre></td></tr></table></figure><p><strong>修改hostName</strong><br>如果微服务部署在不同的虚拟机中， 可以通过修改hostname，然后在ES的index中通过hostname 来区分日志的来源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hostnamectl status</span><br><span class="line"># hostnamectl set-hostname Your-New-Host-Name-Here</span><br></pre></td></tr></table></figure><h2 id="关于日志采集的策略"><a href="#关于日志采集的策略" class="headerlink" title="关于日志采集的策略"></a>关于日志采集的策略</h2><p>（网上未提及此topic）<br>配置logstash是件麻烦事情。 一下两种策略互相冲突<br><strong>1， 保证所有的log都index到ES</strong><br>这中策略方便用户查找问题， 因为所有的log都可以搜索到<br><strong>2， 严格过滤， 只提取我们需要的log信息</strong><br>这种很方便做统计， 但是其他很多log会被过滤掉， 用来找问题不方便。</p><h2 id="服务器时间设置"><a href="#服务器时间设置" class="headerlink" title="服务器时间设置"></a>服务器时间设置</h2><p>最好保证日志源的服务器时间和ELK的数据库服务器时间一直<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Kibana 5.x 加强安全 - x-pack篇</title>
      <link href="/Elastic-Technologies/Elasticsearch-Kibana-Security-xpack/"/>
      <url>/Elastic-Technologies/Elasticsearch-Kibana-Security-xpack/</url>
      
        <content type="html"><![CDATA[<p> 此文之前，假定读者已经一次完成了Kibana和elasticsearch的安装。参考官方文档，安装后默认配置已经可以连通kibana和es。 </p><ul><li>系统： centos7</li><li><p>内容： 增加authentication &amp; enable ssl</p><p>elastic 技术栈 的另外一个重要的角色是x-pack. </p></li></ul><p><img src="/assets/preimg/Elastic-Technologies/elastic-charm.png" alt="elastic-charm"></p><h3 id="ES安装xpack插件"><a href="#ES安装xpack插件" class="headerlink" title="ES安装xpack插件"></a>ES安装xpack插件</h3><p>参考<a href="https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html" target="_blank" rel="noopener">安装xpack</a><br>Run bin/elasticsearch-plugin install from ES_HOME on each node in your cluster:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch-plugin install x-pack</span><br></pre></td></tr></table></figure></p><h3 id="Kibana-安装xpack-插件"><a href="#Kibana-安装xpack-插件" class="headerlink" title="Kibana 安装xpack 插件"></a>Kibana 安装xpack 插件</h3><p>参考<a href="https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html" target="_blank" rel="noopener">安装xpack</a></p><p>Install X-Pack into Kibana by running bin/kibana-plugin in your Kibana installation directory.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kibana-plugin install x-pack</span><br></pre></td></tr></table></figure></p><h3 id="依次启动elasticsearch-和kibana"><a href="#依次启动elasticsearch-和kibana" class="headerlink" title="依次启动elasticsearch 和kibana"></a>依次启动elasticsearch 和kibana</h3><h3 id="修改用户elastic-和-kibana的密码"><a href="#修改用户elastic-和-kibana的密码" class="headerlink" title="修改用户elastic 和 kibana的密码"></a>修改用户elastic 和 kibana的密码</h3><p><a href="https://www.elastic.co/guide/en/x-pack/current/security-getting-started.html" target="_blank" rel="noopener">X-Pack 文档：修改密码</a></p><blockquote><p>X-Pack security provides a built-in elastic superuser you can use to start setting things up. The default password for the elastic user is changeme.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -u elastic &apos;localhost:9200/_xpack/security/user/elastic/_password&apos; -d &apos;&#123;</span><br><span class="line">  &quot;password&quot; : &quot;elasticpassword&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -u elastic &apos;localhost:9200/_xpack/security/user/kibana/_password&apos; -d &apos;&#123;</span><br><span class="line">  &quot;password&quot; : &quot;kibanapassword&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>CURL授权<br>在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权。 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露</p></blockquote><h3 id="Enable-Kibana-SSL"><a href="#Enable-Kibana-SSL" class="headerlink" title="Enable Kibana SSL"></a>Enable Kibana SSL</h3><p><a href="https://www.elastic.co/guide/en/kibana/current/production.html" target="_blank" rel="noopener">Using Kibana in a Production Environment</a><br>配置上证书的路径即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># SSL for outgoing requests from the Kibana Server (PEM formatted)</span><br><span class="line">server.ssl.key: /path/to/your/server.key</span><br><span class="line">server.ssl.cert: /path/to/your/server.crt</span><br></pre></td></tr></table></figure></p><p>修改了超级用户的密码，enable ssl后，就可以放心的去使用kibana的<strong>Dev Tools</strong> 或者chrome插件（sense）进行大部分API 的操作。 （在此之前需要ssh到服务器通过curl来操作以保证安全）</p><h3 id="创建用户logstash-writer"><a href="#创建用户logstash-writer" class="headerlink" title="创建用户logstash_writer"></a>创建用户logstash_writer</h3><p><a href="https://www.elastic.co/guide/en/x-pack/5.1/logstash.html" target="_blank" rel="noopener">官方参考</a><br>上面步骤完成后会发现logstash推送给es报错了。因为现在ES需要用户名和密码了。 这里我们需要创建一个用户拥有write, delete, and create_index的权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[2016-12-23T20:42:19,350][WARN ][logstash.outputs.elasticsearch] Attempted to resurrect connection to dead ES instance, but got an error. &#123;:url=&gt;#&lt;URI::HTTP:0x17b5a1bd URL:http://localhost:9200&gt;, :error_type=&gt;LogStash::Outputs::ElasticSearch::HttpClient::Pool::BadResponseCodeError, :error=&gt;&quot;Got response code &apos;401&apos; contact Elasticsearch at URL &apos;http://localhost:9200/&apos;&quot;&#125;</span><br><span class="line">[2016-12-23T20:42:20,132][WARN ][logstash.shutdownwatcher ] &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>先创建一个role：logstash_writer</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST _xpack/security/role/logstash_writer</span><br><span class="line">&#123;</span><br><span class="line">  &quot;cluster&quot;: [&quot;manage_index_templates&quot;, &quot;monitor&quot;],</span><br><span class="line">  &quot;indices&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;names&quot;: [ &quot;logstash-*&quot;,&quot;business-index-*&quot;], </span><br><span class="line">      &quot;privileges&quot;: [&quot;write&quot;,&quot;delete&quot;,&quot;create_index&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再创建一个用户：logstash_internal拥有Role：logstash_writer</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /_xpack/security/user/logstash_internal</span><br><span class="line">&#123;</span><br><span class="line">  &quot;password&quot; : &quot;changeme&quot;,</span><br><span class="line">  &quot;roles&quot; : [ &quot;logstash_writer&quot;],</span><br><span class="line">  &quot;full_name&quot; : &quot;Internal Logstash User&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的操作也可以通过Kibana的Management UI来操作</p></blockquote><ul><li>配置logstash.conf</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    ...</span><br><span class="line">    user =&gt; logstash_internal</span><br><span class="line">    password =&gt; changeme</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>logstash, elasticsearch, kibana 如果在同一网络，而暴露出去的只有kibana的话，logstash和elasticsearch 之前是无需授权的。可以参考<a href="https://www.elastic.co/guide/en/x-pack/current/anonymous-access.html" target="_blank" rel="noopener">Enabling Anonymous Access</a> 另外，logstash和elasticsearch之间如果需要授权，会不会有性能的影响？</p></blockquote><h3 id="给Kibana用户加上index的读的权限"><a href="#给Kibana用户加上index的读的权限" class="headerlink" title="给Kibana用户加上index的读的权限"></a>给Kibana用户加上index的读的权限</h3><p>Kibana安装xpack后默认就需要登录了。也可以用超级用户elastic登录<br>登录后打开DevTools进行ES API的操作。</p><p>修改后停掉kibana服务。修改kibana的配置：</p><blockquote><p>Once you change the password, you need to specify it with the elasticsearch.password property in kibana.yml:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.password: &quot;s0m3th1ngs3cr3t&quot;</span><br></pre></td></tr></table></figure><h3 id="坑-（Tricky-Part）"><a href="#坑-（Tricky-Part）" class="headerlink" title="坑 （Tricky Part）"></a>坑 （Tricky Part）</h3><ol><li>/etc/logstash/conf.d 下不要有多余的文件。比如logstash.conf.bak， 似乎logstash会读这个文件夹下的不止logstash.conf这个文件配置。logstash.conf.bak 会导致死循环一样的重启。<a href="https://discuss.elastic.co/t/logstash-endless-loop-with-starting-and-stopping/69913" target="_blank" rel="noopener">elastic community</a></li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Elasticsearch 模糊匹配</title>
      <link href="/Elastic-Technologies/elasticsearch-fuzzy-query/"/>
      <url>/Elastic-Technologies/elasticsearch-fuzzy-query/</url>
      
        <content type="html"><![CDATA[<p>这个是一个模板, 请务必将showOnHome 修改为true</p><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/fuzzy-scoring.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/fuzzy-scoring.html</a><br>以下来自<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">模糊性评分编辑</span><br><span class="line">用户喜欢模糊查询。他们认为这种查询会魔法般的找到正确拼写组合。 很遗憾，实际效果平平。</span><br><span class="line"></span><br><span class="line">假设我们有1000个文档包含 ``Schwarzenegger`` ，只是一个文档的出现拼写错误 ``Schwarzeneger`` 。 根据 term frequency/inverse document frequency 理论，这个拼写错误文档比拼写正确的相关度更高，因为错误拼写出现在更少的文档中！</span><br><span class="line"></span><br><span class="line">换句话说，如果我们对待模糊匹配 类似其他匹配方法，我们将偏爱错误的拼写超过了正确的拼写，这会让用户抓狂。</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Elastcisearch 6.2 Restful API</title>
      <link href="/Elastic-Technologies/Elasticsearch-6_2-Restful-API/"/>
      <url>/Elastic-Technologies/Elasticsearch-6_2-Restful-API/</url>
      
        <content type="html"><![CDATA[<h1 id="Elastcisearch"><a href="#Elastcisearch" class="headerlink" title="Elastcisearch"></a>Elastcisearch</h1><p>详细的API请参考官方网站： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a> 这里只列举常用的方式。</p><h2 id="索引API"><a href="#索引API" class="headerlink" title="索引API"></a>索引API</h2><p>官方链接： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html</a></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><h4 id="快速创建"><a href="#快速创建" class="headerlink" title="快速创建"></a>快速创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /news</span><br></pre></td></tr></table></figure><p>创建名为test的索引，没有创建任何对应的Type,以及Mapping<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;acknowledged&quot;: true,</span><br><span class="line">  &quot;shards_acknowledged&quot;: true,</span><br><span class="line">  &quot;index&quot;: &quot;news&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /news</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;news&quot;: &#123;</span><br><span class="line">    &quot;aliases&quot;: &#123;&#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;&#125;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;index&quot;: &#123;</span><br><span class="line">        &quot;creation_date&quot;: &quot;1535677066065&quot;,</span><br><span class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot;: &quot;-fZX17QdQjWE_AK79pO8lQ&quot;,</span><br><span class="line">        &quot;version&quot;: &#123;</span><br><span class="line">          &quot;created&quot;: &quot;6020499&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot;: &quot;news&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE &quot;http://192.168.1.99:9200/news&quot; // 删除索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;ok&quot;: true,</span><br><span class="line">   &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置类型并定义Mapping-推荐"><a href="#设置类型并定义Mapping-推荐" class="headerlink" title="设置类型并定义Mapping (推荐)"></a>设置类型并定义Mapping (推荐)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT /news/_mapping/_doc</span><br><span class="line">&#123;</span><br><span class="line">   &quot;properties&quot;:&#123;</span><br><span class="line">     &quot;title&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;text&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;content&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;text&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;postDate&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;date&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;categories&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;tags&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>title和content是用于全文检索的，同时需要分词的</li><li>categories tags无需分词，这里的categories和tags都会存放多个值的数组。关于数组类型参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/array.html" target="_blank" rel="noopener">Array DataType</a></li></ol><blockquote><p>elasticsearch 支持 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-mapping.html" target="_blank" rel="noopener">Dynamical Mapping</a>, 大多数情况下，这都不是一个推荐方式。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Elastcisearch 2.4 Restful API</title>
      <link href="/Elastic-Technologies/Elasticsearch-2_4-Restful-Api/"/>
      <url>/Elastic-Technologies/Elasticsearch-2_4-Restful-Api/</url>
      
        <content type="html"><![CDATA[<h1 id="Elastcisearch"><a href="#Elastcisearch" class="headerlink" title="Elastcisearch"></a>Elastcisearch</h1><p>详细的API请参考官方网站： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a> 这里只列举常用的方式。</p><h2 id="索引API"><a href="#索引API" class="headerlink" title="索引API"></a>索引API</h2><p>官方链接： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html</a></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &quot;http://192.168.1.99:9200/test&quot; //创建test的索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;ok&quot;: true,</span><br><span class="line">   &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE &quot;http://192.168.1.99:9200/test&quot; // 删除索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;ok&quot;: true,</span><br><span class="line">   &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以下开始使用Kibana的Sense 来简化curl的操作</strong></p><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test</span><br></pre></td></tr></table></figure><h3 id="创建索引并设置Type和Mapping"><a href="#创建索引并设置Type和Mapping" class="headerlink" title="创建索引并设置Type和Mapping"></a>创建索引并设置Type和Mapping</h3><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>Cmd-‘ 引用</li><li>Cmd-B    加粗</li><li>Cmd-E     清除Block</li><li>Cmd-H     标题Header变小</li><li>Cmd-I       斜体</li><li>Cmd-K      链接</li><li>Cmd-L     无序列表</li><li>Cmd-P     Preview</li><li>Cmd-Alt-C     代码块</li><li>Cmd-Alt-I     插入图片</li><li>Cmd-Alt-L    有序列表</li><li>Shift-Cmd-H  标题Header变大</li><li>F9     窗口拆分</li><li>F11    全屏</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>文档的title，页面及列表都会展示</title>
      <link href="/Elastic-Technologies/Elasticsearch-2.4-Restful-Api/"/>
      <url>/Elastic-Technologies/Elasticsearch-2.4-Restful-Api/</url>
      
        <content type="html"><![CDATA[<p>这个是一个模板, 请务必将showOnHome 修改为true</p><h1 id="欢迎使用"><a href="#欢迎使用" class="headerlink" title="欢迎使用"></a>欢迎使用</h1><p>本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：</p><ul><li><strong>Markdown和扩展Markdown简洁的语法</strong></li><li><strong>代码块高亮</strong></li><li><strong>图片链接和图片上传</strong></li><li><strong>丰富的快捷键</strong></li></ul><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>Cmd-‘ 引用</li><li>Cmd-B    加粗</li><li>Cmd-E     清除Block</li><li>Cmd-H     标题Header变小</li><li>Cmd-I       斜体</li><li>Cmd-K      链接</li><li>Cmd-L     无序列表</li><li>Cmd-P     Preview</li><li>Cmd-Alt-C     代码块</li><li>Cmd-Alt-I     插入图片</li><li>Cmd-Alt-L    有序列表</li><li>Shift-Cmd-H  标题Header变大</li><li>F9     窗口拆分</li><li>F11    全屏</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Elasticsearch 2.X 自定义字段的Mapping</title>
      <link href="/Elastic-Technologies/Elasticsearch-2-X-Mapping/"/>
      <url>/Elastic-Technologies/Elasticsearch-2-X-Mapping/</url>
      
        <content type="html"><![CDATA[<p>说到Mapping大家可能觉得有些不解，其实我大体上可以将Elasticsearch理解为一个RDBMS（关系型数据库，比如MySQL），那么index 就相当于数据库实例，type可以理解为表,这样mapping可以理解为表的结构和相关设置的信息（当然mapping有更大范围的意思）。</p><p>默认情况不需要显式的定义mapping， 当新的type或者field引入时，Elasticsearch会自动创建并且注册有合理的默认值的mapping(毫无性能压力)， 只有要覆盖默认值时才必须要提供mapping定义。</p><blockquote><p>引用博客：<a href="http://blog.csdn.net/top_code/article/details/50767138" target="_blank" rel="noopener">http://blog.csdn.net/top_code/article/details/50767138</a></p></blockquote><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>term - individual word （拆分后的最小单词）</p><h2 id="Mapping-简介"><a href="#Mapping-简介" class="headerlink" title="Mapping 简介"></a>Mapping 简介</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping.html" target="_blank" rel="noopener">Elasticsearch Reference [2.4] » Mapping</a><br>Mapping是用来定义文档及包含字段的保存和索引的方式。</p><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>接触mapping是因为要收集除了log之外的业务信息。 业务log和系统log不同，很多的自定义字段，并将这些信息推送到单独的index。 最终目的是用过kibana的图形化的展示来统计和分析。当我们要统计比如：用户的访问排名（字段名：user：<a href="mailto:test@gmail.com" target="_blank" rel="noopener">test@gmail.com</a>）。 当没有设置任何mapping的时候，ES会采用动态mapping（Dynamic Mapping），针对String的字段默认的index方式是：analyzed。这种方式下，<a href="mailto:test@gmail.com" target="_blank" rel="noopener">test@gmail.com</a> 会被拆分成test和gmail.com(怎么拆分取决于用什么analyzer)。这样不便于统计，这里我们必须显示地去设置mapping。<br> <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-index.html" target="_blank" rel="noopener">Mapping parameters » index</a> </p><blockquote><p>通过kibana去选择analyzed的字段去做terms aggregation可以看到对应的warning信息</p></blockquote><h2 id="自定义mapping"><a href="#自定义mapping" class="headerlink" title="自定义mapping"></a>自定义mapping</h2><p>可以通过API 去自定义mapping。 （这个最好在数据开始index之前，因为数据index的时候会动态设置mapping，再去修改会出现一些冲突）新增加的字段可以继续通过修改mapping来增加。  ES 支持一个index多个type，mapping可以针对单个type也可以针对index。<br><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT http://localhost:9200/business-index-*/_mapping/biz -d &apos;</span><br><span class="line">&#123;</span><br><span class="line"> &quot;properties&quot; : &#123;</span><br><span class="line">    &quot;uri&quot; : &#123;&quot;type&quot;: &quot;string&quot;,&quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class="line">    &quot;user&quot; : &#123;&quot;type&quot;: &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class="line">&quot;keyword&quot; : &#123;&quot;type&quot;: &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class="line">    &quot;responseStatus&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125;,</span><br><span class="line">    &quot;responseTime&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;&apos;;</span><br></pre></td></tr></table></figure><h2 id="自定义template"><a href="#自定义template" class="headerlink" title="自定义template"></a>自定义template</h2><p>对于确定的index，通过mapping的方式就可以达到我们的目的。 比如： 商品的索引，这个index不会变，里面的数据document会增删改查，但是index始终在那里。<br>但是对于类似log和数据分析的数据，这些数据会惊人的速度增加，如果放在一个index就不现实。 所以ELK就有了 “<strong><em>time-based index pattern</em></strong>“ , 通过这种方式可以每天或者每月生成一个index文件。比如logstash的日志： <code>logstash-2016.08.20</code> 针对这种场景，就需要引入更高一层的配置: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html" target="_blank" rel="noopener">Index Template</a><br>设定自己的template的示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT http://localhost:9200/_template/business -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">&quot;template&quot;: &quot;business*&quot;,</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;number_of_shards&quot;: 1</span><br><span class="line">&#125;,</span><br><span class="line">&quot;mappings&quot;: &#123;</span><br><span class="line">&quot;_default_&quot;: &#123;</span><br><span class="line">&quot;properties&quot;: &#123;</span><br><span class="line">&quot;uri&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;string&quot;,</span><br><span class="line">&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;user&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;string&quot;,</span><br><span class="line">&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;keyword&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;string&quot;,</span><br><span class="line">&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;responseStatus&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;integer&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;responseTime&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;long&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>The settings and mappings will be applied to any index name that matches the business* template</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Windows 常用命令</title>
      <link href="/Dev-Ops/Windows-Commands/"/>
      <url>/Dev-Ops/Windows-Commands/</url>
      
        <content type="html"><![CDATA[<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>doc 窗口设置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=512m</span><br></pre></td></tr></table></figure></p><h2 id="删除服务"><a href="#删除服务" class="headerlink" title="删除服务"></a>删除服务</h2><p>删除服务名为mysql的服务： <code>sc delete mysql</code></p><h2 id="端口相关"><a href="#端口相关" class="headerlink" title="端口相关"></a>端口相关</h2><h3 id="端口占用的应用的PID"><a href="#端口占用的应用的PID" class="headerlink" title="端口占用的应用的PID"></a>端口占用的应用的PID</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon|findstr &quot;8599&quot;</span><br></pre></td></tr></table></figure><p>结果如下： （PID为2948）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Documents and Settings\XPMUser&gt;netstat -aon|findstr &quot;8599&quot;</span><br><span class="line">  TCP    0.0.0.0:8599           0.0.0.0:0              LISTENING       2948</span><br></pre></td></tr></table></figure></p><h3 id="对应PID的进程"><a href="#对应PID的进程" class="headerlink" title="对应PID的进程"></a>对应PID的进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist|findstr &quot;2948&quot;</span><br></pre></td></tr></table></figure><p>结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Documents and Settings\XPMUser&gt;tasklist|findstr &quot;2948&quot;</span><br><span class="line">tomcat6.exe                 2948 RDP-Tcp#4               0     44,072 K</span><br></pre></td></tr></table></figure></p><p>或者：打开任务管理器，切换到进程选项卡，在PID一列查看2720对应的进程是谁，如果看不到PID这一列，点击查看—&gt;选择列，将PID(进程标示符)前面的勾打上，点击确定。</p><h3 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h3><p>结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im Tencentdl.exe。</p><h2 id="列出文件夹下面的文件名称"><a href="#列出文件夹下面的文件名称" class="headerlink" title="列出文件夹下面的文件名称"></a>列出文件夹下面的文件名称</h2><p>创建一个bat文件, 加入下面的内容。 将这个bat文件放入文件夹内运行即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DIR *.* /B&gt; LIST.TXT</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Shell 脚本学习笔记</title>
      <link href="/Dev-Ops/Shell-learning-notes/"/>
      <url>/Dev-Ops/Shell-learning-notes/</url>
      
        <content type="html"><![CDATA[<h2 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h2><h3 id="括号的使用说明"><a href="#括号的使用说明" class="headerlink" title="括号的使用说明"></a>括号的使用说明</h3><p>参考：<a href="http://stackoverflow.com/questions/31255699/double-parenthesis-with-and-without-dollar" target="_blank" rel="noopener">Double parenthesis with and without dollar</a></p><ul><li>$(…) means execute the command in the parens and return its stdout. </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;The current date is $(date)&quot;</span><br><span class="line">The current date is Mon Jul  6 14:27:59 PDT 2015</span><br></pre></td></tr></table></figure><ul><li>(…) means run the commands listed in the parens in a subshell. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ a=1; (a=2; echo &quot;inside: a=$a&quot;); echo &quot;outside: a=$a&quot;</span><br><span class="line">inside: a=2</span><br><span class="line">outside: a=1</span><br></pre></td></tr></table></figure><ul><li>$((…)) means perform arithmetic and return the result of the calculation. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ a=$((2+3)); echo &quot;a=$a&quot;</span><br><span class="line">a=5</span><br></pre></td></tr></table></figure><ul><li>((…)) means perform arithmetic, possibly changing the values of shell variables, but don’t return its result. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ((a=2+3)); echo &quot;a=$a&quot;</span><br><span class="line">a=5</span><br></pre></td></tr></table></figure><ul><li>${…} means return the value of the shell variable named in the braces. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo $&#123;SHELL&#125;</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><ul><li>{…} means execute the commands in the braces as a group. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ false || &#123; echo &quot;We failed&quot;; exit 1; &#125;</span><br><span class="line">We failed</span><br></pre></td></tr></table></figure><h2 id="有用脚本收集"><a href="#有用脚本收集" class="headerlink" title="有用脚本收集"></a>有用脚本收集</h2><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>读取文件目录的所有文件，按行读取每个文件，判断行文字是否包含特定字符串；如果包含，通过特殊字符来split并输出想要的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">for filename in /home/okchem/mysqlbackup/*.sql; do</span><br><span class="line">    while IFS= read line</span><br><span class="line">do</span><br><span class="line"># display $line or do somthing with $line</span><br><span class="line">if [[ $line == *&quot;/ocf/&quot;* ]]; then</span><br><span class="line">SUBSTRING=$(echo $line| cut -d&apos;`&apos; -f 2) # 用&apos;`&apos;来拆分,输出数组第二个</span><br><span class="line">echo $SUBSTRING</span><br><span class="line">fi</span><br><span class="line">done &lt;&quot;$&#123;filename&#125;.sql&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><p><a href="https://www.shellscript.sh/" target="_blank" rel="noopener">https://www.shellscript.sh/</a><br><a href="https://www.shellscript.sh/quickref.html" target="_blank" rel="noopener">https://www.shellscript.sh/quickref.html</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Nginx 问题收集</title>
      <link href="/Dev-Ops/Nginx-Technologies/"/>
      <url>/Dev-Ops/Nginx-Technologies/</url>
      
        <content type="html"><![CDATA[<p>收集在使用Nginx过程中遇见的问题。</p><h1 id="知识积累"><a href="#知识积累" class="headerlink" title="知识积累"></a>知识积累</h1><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>平均负载示例如下; 以下配置必须保证两个实例都正常运行在，因为这个配置并不会failover。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">        server 127.0.0.1:8080;</span><br><span class="line">        server 127.0.0.1:8081;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name auth.jiu-shu.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">            client_max_body_size    10m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>上例中的8080 和 8081 端口都是Spring Boot的app。由于Java 是多线程的程序，在同一个虚拟机上运行多个实例并非最佳实践；这里只是方便测试。</p></blockquote><h1 id="问题收集"><a href="#问题收集" class="headerlink" title="问题收集"></a>问题收集</h1><h3 id="反向代理后request的host和schema和浏览器请求不一致"><a href="#反向代理后request的host和schema和浏览器请求不一致" class="headerlink" title="反向代理后request的host和schema和浏览器请求不一致"></a>反向代理后request的host和schema和浏览器请求不一致</h3><p>反向代理后<br>下面如果不加proxy_set_header的两行，那么在microservice这个服务中，<code>request.getScheme() + &quot;://&quot; + request.getServerName()</code> 就会变成<a href="http://microservice.dev.com" target="_blank" rel="noopener">http://microservice.dev.com</a>, nginx rewrite 之后，就可以获取到：<a href="http://www.dev.com" target="_blank" rel="noopener">http://www.dev.com</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server_name  www.dev.com;</span><br><span class="line">location / &#123;</span><br><span class="line"> proxy_set_header Host $host;</span><br><span class="line">   proxy_set_header X-Scheme $scheme;</span><br><span class="line"> proxy_pass   http://microservice.dev.com:8091;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="bind-to-0-0-0-0-80-failed-98-Address-already-in-use"><a href="#bind-to-0-0-0-0-80-failed-98-Address-already-in-use" class="headerlink" title="bind() to 0.0.0.0:80 failed (98: Address already in use)"></a>bind() to 0.0.0.0:80 failed (98: Address already in use)</h3><p>启动碰见以上问题，有两种可能</p><ol><li>先检查80端口是否已经被其他http server占用 <code>sudo netstat -nlpt</code></li><li>remove the IPv6 bind block (something along the lines of ::1:80。 参考：<a href="http://serverfault.com/questions/520535/nginx-is-still-on-port-80-bind-to-0-0-0-080-failed-98-address-already-in" target="_blank" rel="noopener">http://serverfault.com/questions/520535/nginx-is-still-on-port-80-bind-to-0-0-0-080-failed-98-address-already-in</a></li></ol><h3 id="403-forbidden-13-Permission-denied"><a href="#403-forbidden-13-Permission-denied" class="headerlink" title="403 forbidden (13: Permission denied)"></a>403 forbidden (13: Permission denied)</h3><p>参考：<a href="https://www.hi-docs.com/article/detail-MTE1.html" target="_blank" rel="noopener">Nginx报错403 forbidden (13: Permission denied)的解决办法</a><br>解决办法一： 关闭 SELinux  （在了解了SELinux的重要性后，决定继续寻找更好的解决办法）</p><p>需要进一步了解SELinux相关，需要解决办法二：（感谢Zeal老师给出的解决方案）</p><blockquote><p>Every directory has a SeLinux context and the default ‘Document Root’ ( /var/www/html ) has an context which allows the nginx / apache user to access the directory.<br>The new ROOT ( /data/images ) will not have the same context and thus SeLinux  is blocking the access.<br>You can verify with ls -lZ /Default-Document-Root and verify the context and associate the same context to /data/images.<br>This should ideally solve the issue, can you try and verify once  :-<br><code>chcon -R -u system_u -t httpd_sys_content_t /data/</code></p></blockquote><p>相信ftp等服务，如果更改了根目录，也会有同样的问题。需要更深入的对SELinux学习。</p><h4 id="13-Permission-denied-while-connecting-to-upstream-nginx"><a href="#13-Permission-denied-while-connecting-to-upstream-nginx" class="headerlink" title="(13: Permission denied) while connecting to upstream:[nginx]"></a>(13: Permission denied) while connecting to upstream:[nginx]</h4><p><a href="https://stackoverflow.com/questions/23948527/13-permission-denied-while-connecting-to-upstreamnginx" target="_blank" rel="noopener">https://stackoverflow.com/questions/23948527/13-permission-denied-while-connecting-to-upstreamnginx</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Maven父子工程的搭建</title>
      <link href="/Dev-Ops/Maven-usage-of-parent/"/>
      <url>/Dev-Ops/Maven-usage-of-parent/</url>
      
        <content type="html"><![CDATA[<p>尝试dubbo+spring的同时，总结下通过maven创建父子工程的方法。（不考虑unit test）</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p><strong>Spring Boot：</strong> 1.4.7.RELEASE<br><strong>Maven：</strong> 3.2.5</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>eclipse</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/dubbo/dubbo-spring-boot-project" target="_blank" rel="noopener">https://github.com/dubbo/dubbo-spring-boot-project</a><br><a href="http://blog.csdn.net/yaerfeng/article/details/26448417" target="_blank" rel="noopener">http://blog.csdn.net/yaerfeng/article/details/26448417</a><br><a href="http://blog.csdn.net/isea533/article/details/73744497" target="_blank" rel="noopener">http://blog.csdn.net/isea533/article/details/73744497</a></p><h2 id="maven-国内镜像"><a href="#maven-国内镜像" class="headerlink" title="maven 国内镜像"></a>maven 国内镜像</h2><p>如果不翻墙，下载maven的依赖相当慢，可以添加阿里云的镜像， 速度相当快。<br>修改conf文件夹下的settings.xml文件，添加如下镜像配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">  &lt;/mirrors&gt;</span><br></pre></td></tr></table></figure></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="创建父maven工程"><a href="#创建父maven工程" class="headerlink" title="创建父maven工程"></a>创建父maven工程</h3><h4 id="创建普通的maven工程，参考如下截图"><a href="#创建普通的maven工程，参考如下截图" class="headerlink" title="创建普通的maven工程，参考如下截图"></a>创建普通的maven工程，参考如下截图</h4><p><img src="/assets/preimg/Dev-Ops/maven-create-parent.png" alt="maven-create-parent"></p><h4 id="填写参数"><a href="#填写参数" class="headerlink" title="填写参数"></a>填写参数</h4><p><img src="/assets/preimg/Dev-Ops/maven-create-parent-1.png" alt="maven-create-parent-1"></p><h4 id="删除无用文件夹"><a href="#删除无用文件夹" class="headerlink" title="删除无用文件夹"></a>删除无用文件夹</h4><p><img src="/assets/preimg/Dev-Ops/maven-create-parent-2.png" alt="maven-create-parent-2"></p><h4 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h4><ol><li>packaging 从jar改成pom <code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></li><li>添加spring-boot-starter-parent，添加dependency management。（maven的配置解释参考：<a href="http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html）" target="_blank" rel="noopener">http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html）</a><br>修改后配置如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.dubboot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;dubboot-example&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;dubboot-example&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.4.7.RELEASE&lt;/version&gt; &lt;!-- keep the version same with $&#123;springboot.version&#125; --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;dependencyManagement&gt; &lt;!-- 存在的价值只是为了方便管理版本 --&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.dubbo.springboot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-dubbo&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt; </span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="方式一：创建子maven子工程-（dubbo-服务接口）"><a href="#方式一：创建子maven子工程-（dubbo-服务接口）" class="headerlink" title="方式一：创建子maven子工程 （dubbo 服务接口）"></a>方式一：创建子maven子工程 （dubbo 服务接口）</h3><ul><li>选中父maven工程右键，新建maven module，输入相关参数即可。 -      </li><li>工程导入后删除测试相关：pom.xml 的junit依赖及测试相关java文件夹。</li><li>pom.xml 添加 <code>&lt;packaging&gt;jar&lt;/packaging&gt;</code><h3 id="方式二：创建子maven子工程-（Spring-Boot，-dubbo-服务实现）"><a href="#方式二：创建子maven子工程-（Spring-Boot，-dubbo-服务实现）" class="headerlink" title="方式二：创建子maven子工程 （Spring Boot， dubbo 服务实现）"></a>方式二：创建子maven子工程 （Spring Boot， dubbo 服务实现）</h3>从<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 创建, 添加依赖，JPA， Validation, Mysql 及其他依赖项（不选Spring Cloud 相关）。下载后解压至父maven工程，修改pom.xml 中的parent使其匹配父工程。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;com.dubboot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;dubboot-example&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure><p><img src="/assets/preimg/Dev-Ops/spring-io-initiator.png" alt="Spring Initiator"></p><p>在父工程中添加module：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">&lt;module&gt;dubboot-jpa&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure><p>然后可以顺利将子工程导入eclipse。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>利用Nexus搭建Maven私服</title>
      <link href="/Dev-Ops/Maven-Private-Repository-Server/"/>
      <url>/Dev-Ops/Maven-Private-Repository-Server/</url>
      
        <content type="html"><![CDATA[<p>阐述如果利用Nexus来快速搭建maven仓库的私有服务器<br>私服搭建<br>Docker Hub链接地址： <a href="https://hub.docker.com/r/sonatype/nexus/" target="_blank" rel="noopener">https://hub.docker.com/r/sonatype/nexus/</a></p><p>docker pull sonatype/nexus<br>mkdir /data/nexus-data &amp;&amp; chown -R 200 /data/nexus-data<br>docker run -d -p 8081:8081 –name nexus -v /data/nexus-data:/nexus-data sonatype/nexus3​</p><p>本地Maven配置<br>​修改Maven的全局setting.xml文件如下：</p><p>文件路径： $MAVEN_HOME/conf/setting.xml</p><p>mirrors节点加入如下内容<br>    <mirror><br>      <id>nexus</id><br>      <mirrorof>*</mirrorof><br>      <name>Nexus</name><br>      <url><a href="http://192.168.1.80:8081/repository/maven-public/" target="_blank" rel="noopener">http://192.168.1.80:8081/repository/maven-public/</a></url><br>    </mirror> </p><p>profiles节点加入如下内容<br>    <profile><br>      <id>nexus</id><br>      <!--Enable snapshots for the built in central repo to direct --><br>      <!--all requests to nexus via the mirror --><br>      <repositories><br>        <repository><br>          <id>central</id><br>          <url><a href="http://central" target="_blank" rel="noopener">http://central</a></url><br>          <releases><enabled>true</enabled></releases><br>          <snapshots><enabled>true</enabled></snapshots><br>        </repository><br>      </repositories><br>     <pluginrepositories><br>        <pluginrepository><br>          <id>central</id><br>          <url><a href="http://central" target="_blank" rel="noopener">http://central</a></url><br>          <releases><enabled>true</enabled></releases><br>          <snapshots><enabled>true</enabled></snapshots><br>        </pluginrepository><br>      </pluginrepositories><br>    </profile> </p><p>activeProfiles​节点加入</p><p><activeprofile>nexus</activeprofile>​</p><p>对于Snapshot的jar，如果想及时的更新，可以在maven参数中加上-U，就可以获得最新的jar包。<br>本地组件deploy<br>除了配置本地Maven配置外，还需要在setting.xml文件中加入如下内容：</p><p>servers节点<br>    <server><br>      <id>maven-releases</id><br>      <username>admin</username><br>      <password>admin123</password><br>    </server><br>    <server><br>      <id>maven-snapshots</id><br>      <username>admin</username><br>      <password>admin123</password><br>    </server>  </p><p>项目的pom.xml文件，加入如下配置：<br>  <distributionmanagement><br>      <repository><br>          <id>maven-releases</id><br>          <url><a href="http://192.168.1.​80:8081/repository/maven-releases/" target="_blank" rel="noopener">http://192.168.1.​80:8081/repository/maven-releases/</a></url><br>      </repository><br>      <snapshotrepository><br>          <id>maven-snapshots</id><br>          <url><a href="http://192.168.1.80:8081/repository/maven-snapshots/" target="_blank" rel="noopener">http://192.168.1.80:8081/repository/maven-snapshots/</a></url><br>      </snapshotrepository><br>  </distributionmanagement>​</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java 开发工具使用技巧收集</title>
      <link href="/Dev-Ops/Java-IDE-Useful-Skills/"/>
      <url>/Dev-Ops/Java-IDE-Useful-Skills/</url>
      
        <content type="html"><![CDATA[<h1 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h1><h2 id="Eclipse-提速"><a href="#Eclipse-提速" class="headerlink" title="Eclipse 提速"></a>Eclipse 提速</h2><p><a href="https://blog.csdn.net/leolu007/article/details/53541641" target="_blank" rel="noopener">https://blog.csdn.net/leolu007/article/details/53541641</a></p><p>Remote System Explorer Operation卡死<br>第一步：Eclipse -&gt; Preferences -&gt; General -&gt; Startup and Shutdown.不要勾选 RSE UI.<br>第二步：Eclipse -&gt; Preferences -&gt; Remote Systems. 取消勾选 Re-open Remote Systems view to previous state.</p><h2 id="在Eclispe中使用Git-命令"><a href="#在Eclispe中使用Git-命令" class="headerlink" title="在Eclispe中使用Git 命令"></a>在Eclispe中使用Git 命令</h2><p>参考： <a href="https://blog.csdn.net/wu_cai_/article/details/71637199" target="_blank" rel="noopener">https://blog.csdn.net/wu_cai_/article/details/71637199</a>  （建议选择git-bash）<br>直接在eclipse中使用并不是很方便，但是可以快速打开git-bash. 配置方式参考上面。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="断点出用于打印信息的代码收集"><a href="#断点出用于打印信息的代码收集" class="headerlink" title="断点出用于打印信息的代码收集"></a>断点出用于打印信息的代码收集</h3><h4 id="Request的Header信息"><a href="#Request的Header信息" class="headerlink" title="Request的Header信息"></a>Request的Header信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.util.Enumeration headerNames = req.getHeaderNames();</span><br><span class="line">while(headerNames.hasMoreElements()) &#123;</span><br><span class="line">  String headerName = (String)headerNames.nextElement();</span><br><span class="line">  System.out.println(&quot;Header Name - &quot; + headerName + &quot;, Value - &quot; + req.getHeader(headerName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Git 常用命令</title>
      <link href="/Dev-Ops/Git-Commands/"/>
      <url>/Dev-Ops/Git-Commands/</url>
      
        <content type="html"><![CDATA[<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git help command // eg: git commit help</span><br></pre></td></tr></table></figure><p>windows 打开默认的浏览器显示帮助内容， mac直接显示</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global setting value</span><br><span class="line">示例：git config --global user.name &quot;Your Name&quot;</span><br><span class="line">示例：git config --global user.email &quot;you@someplace.com&quot;</span><br><span class="line">git config --global --list // 列出全局配置项</span><br></pre></td></tr></table></figure><p>配置内容保存在当前<strong>用户</strong>目录下的.gitconfig文件中</p><h2 id="本地命令"><a href="#本地命令" class="headerlink" title="本地命令"></a>本地命令</h2><h3 id="设置邮箱"><a href="#设置邮箱" class="headerlink" title="设置邮箱"></a>设置邮箱</h3><h5 id="设置全局邮箱"><a href="#设置全局邮箱" class="headerlink" title="设置全局邮箱"></a>设置全局邮箱</h5><p>方式一： 运行命令： <code>git config --global user.email &quot;joe.lea@foxmail.com&quot;</code><br>方式二:   编辑文件 .gitconfig, 一般在用户目录下，上面的命令运行后也同样会修改这个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name =xiaoming</span><br><span class="line">email = xiaoming@qq.com</span><br></pre></td></tr></table></figure></p><h5 id="设置项目的提交邮箱"><a href="#设置项目的提交邮箱" class="headerlink" title="设置项目的提交邮箱"></a>设置项目的提交邮箱</h5><p>编辑文件 .git/config 即可</p><blockquote><p>github 项目只有设置了提交者的邮箱，才会在contibutors中you展示。 比如：<a href="https://github.com/choelea/markdown-cms/graphs/contributors" target="_blank" rel="noopener">https://github.com/choelea/markdown-cms/graphs/contributors</a></p></blockquote><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>方式一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd projects/</span><br><span class="line">git init git-demo  // projects下面创建文件夹 git-demo, 并初始化； 初始化其实就是在文件夹下面创建了相关内容存放在.git 隐藏文件夹下面</span><br></pre></td></tr></table></figure></p><p>方式二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd projects/</span><br><span class="line">mkdir website</span><br><span class="line">cd website/</span><br><span class="line">git init // 初始化</span><br></pre></td></tr></table></figure></p><p>方式三：<br>大多数的方式，我们从clone一个git 库开始的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &apos;url&apos;</span><br></pre></td></tr></table></figure></p><h3 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv  // 列出本地分支 * 标识当前分支</span><br><span class="line">git branch -a // 列出所有分支</span><br></pre></td></tr></table></figure><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;BranchName&gt;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 查看状态</span><br></pre></td></tr></table></figure><p>git status // Shows which files have been modified in the working directory vs Git’s staging area.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 添加新文件</span><br></pre></td></tr></table></figure></p><p>git add file-name  // Adds the new or newly modified file-name to Git’s staging area (index).<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 当很多文件修改，而且这些文件不属于同一个功能修改，想分开多个commit来提交的时候，可选择通过`git add  &lt;file&gt;` 先将指定的文件Stage，然后使用`git commit -m ` 来只提交stage的文件。</span><br><span class="line"></span><br><span class="line">### Commit 修改</span><br></pre></td></tr></table></figure></p><p>git commit -m “A really good commit message” // Commits all files currently in Git’s staging area.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 上面的命令只有所有的文件都在staging area在有效。  `git commit -am &quot;A really good commit message&quot;` 可以省掉git add这步，不过新文件必须先add下。</span><br><span class="line"></span><br><span class="line">### 回滚</span><br></pre></td></tr></table></figure></p><p>git add . // Add all new and newly modified files.<br>git reset HEAD file-name // Unstage the specified file from stage area. 修改的内容还在<br>git checkout – file-name // 回滚本次修改<br>git reset –hard HEAD^  // 回滚到远程仓库的版本，放弃本地所有包括commit的修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 检查修改内容</span><br></pre></td></tr></table></figure></p><p>git diff // 查看unstage状态下的文件的修改内容，staged的无法查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 合并到上次提交</span><br></pre></td></tr></table></figure></p><p>git add . // 将修改的文件 stage<br>git commit –amend // 将当前的staged的修改合并到上次commit，并打开编辑器修改commit<br>git commit –amend -m “New commit message” // 将当前的staged的修改合并到上次commit，并实用新的Message<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 使用Interactive Rebasing/squash也可以达到合并的效果，区别就是一个是事先（commit 前）就合并，一个是事后（commit 后）合并。</span><br><span class="line">### 放弃本地修改或新增的文件</span><br><span class="line">放弃modified的文件</span><br></pre></td></tr></table></figure></p><p>git checkout <file> // 重新checkout文件file，相当于丢掉了本地的修改<br>git checkout src/<em> // 使用通配符来checkout src文件夹下面所有的修改<br>git reset –hard // 丢掉所有的修改modified 文件<br>git clean -fd    // 移除所有untrack的文件和文件夹<br>git clean -fd src/</em> // 移除src目录下面所有的新增的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; git clean -fd 中 -f means force, -d means &apos;remove directories&apos;</span><br><span class="line">### 切换分支</span><br><span class="line">&gt; 切换分支前必须保证工作空间是干净的。（没有未提交的修改和新增）</span><br></pre></td></tr></table></figure></file></p><p>git checkout branchename // 切换到branchname分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 提交历史 log日志</span><br></pre></td></tr></table></figure></p><p>git log  // 默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。<br>git log –oneline –graph –decorate –color<br>git log – <filepath>  // 查看某个文件的日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 查看历史提交的内容差异</span><br></pre></td></tr></table></figure></filepath></p><p>git log -p -2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：</span><br><span class="line">#### 可视化查看某个文件的提交历史</span><br></pre></td></tr></table></figure></p><p>gitk [filename] // 启用可视化的方式查看提交历史<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### 移除文件</span><br><span class="line">方式一：完全通过git命令</span><br></pre></td></tr></table></figure></p><p>git rm debug.log  // remove and stage the change<br>git commit -m ‘remove file debug.log’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方式二：</span><br><span class="line">非git 命令删除文件后，运行下面的命令</span><br></pre></td></tr></table></figure></p><p>git add -u // git 2.0 以前的版本  stage删除的change<br>git add file-name // git 2.0 后也可以通过这个命令达到上面的命令的效果<br>git commit -m ‘commit message’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 移动文件</span><br></pre></td></tr></table></figure></p><p>git mv index.html web/  // 移动index.html 到web文件夹内。 命令完成后直接进入staging 状态<br>git commit -m ‘move index.html into web folder’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">### ignore 文件</span><br><span class="line">编辑 .gitignore 文件</span><br><span class="line"></span><br><span class="line">## SSH 命令</span><br><span class="line">windows cmd并没有自带ssh命令，我们可以通过git bash命令窗来运行这些命令。</span><br><span class="line">假定在当前用户的目录下：</span><br></pre></td></tr></table></figure></p><p>cd .ssh<br>ssh-keygen -t rsa -C “your email” // 生成SSH Key， 将id_rsa.pub公钥配置到github/bitbucket 等服务器上<br>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> // 验证SSH 配置成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Git Remote 相关命令</span><br><span class="line">关联一个远程的Repo。 （针对前两种初始化方式，一般情况用不上）</span><br></pre></td></tr></table></figure></p><p>git remote add remote-name remote-repository-location // 示例: git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:choelea/keycloak-demo.git<br>git push -u remote-name branch-name // 示例: git push -u origin master;  The -u parameter is needed the first time you push a branch to the remote.<br>git remote -v // list the names of all the remote repositories<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关联远程repo之前需要先在git服务器上创建对应的repo，如果采用的是github，在创建repository后，会有如下的提示：</span><br><span class="line">![Git-Push-Remote](/assets/preimg/Dev-Ops/git-push-remove.png)</span><br></pre></td></tr></table></figure></p><p>git pull origin master // 下载当前分支远程修改；每次push前都应该先pull<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Git Rebase</span><br><span class="line">关于rebase和merge的区别，建议参考：[Merging vs Rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)</span><br><span class="line">&gt; 一定要看看 &apos;The Golden Rule of Rebasing&apos;这部分.</span><br><span class="line">rebase 和 merge都是应该发生在分支之间的事情，当然在同一个分支上有时也需要。（可能不是最佳实践，git的开发流程一般建议创建单独的feature分支来完成不同的story，避免出现多人在同一个分支上直接commit）</span><br><span class="line">直接在当前分支做rebase</span><br></pre></td></tr></table></figure></p><p>git fetch // 这一步必须<br>git rebase // 将未push的commits 放至remote所有commits之上<br>// 修复冲突 如果有冲突必须进行修复，完成后，注意提示。一般需要git add 命令来stage下 ，接着git rebase –continue 至到没有任何冲突<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Squash</span><br><span class="line">通过Interactive Rebasing来完成当前分支的commits的squash</span><br></pre></td></tr></table></figure></p><p>git rebase -i // 列出所有未push的commit，注意是倒序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">根据提示编辑来达到squash的作用。</span><br><span class="line">![git-rebase](/assets/preimg/Dev-Ops/git-rebase.png)</span><br><span class="line">将第二个commit（435d22b）修改为:`pick 435d22b ...` 即将这个commit压缩至上面的commit，并放弃当前的commit message。</span><br><span class="line">&gt; 有些公司会很强调squash。 git估计本地多次提交防止丢失，所以git的commit有可能会很多；而svn的commit就意味着修改可以被其他用户拉取到， 所以svn的每一次commit都要保证系统可以运行，svn的commit会偏少。svn的代码更新时间取决于文件多少和大小；git的代码拉取时间取决于commit的多少。所以。。。是每次提交尽量合理依然很重要，squash/Ineractive Rebasing 很实用。</span><br><span class="line"></span><br><span class="line">## Changing remote URL</span><br><span class="line">repo换了名字，或者之前是https clone下来的，现在想换成ssh；这些情况都面临着修改远程的URL。</span><br></pre></td></tr></table></figure></p><p>git remote -v // 查看当前的地址<br>git remote set-url origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:choelea/tech-docs.git<br><code>`</code></p><blockquote><p>https的URL一般来说push代码是需要用户明和密码；而ssh的不需要。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Centos 常用命令</title>
      <link href="/Dev-Ops/Centos-Common-Commands/"/>
      <url>/Dev-Ops/Centos-Common-Commands/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下命令仅在centos7上验证过</p></blockquote><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h4><p>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install elasticsearch</span><br></pre></td></tr></table></figure></p><h4 id="rpm-包安装"><a href="#rpm-包安装" class="headerlink" title="rpm  包安装"></a>rpm  包安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh kibana-4.6.6-x86_64.rpm  // 安装后通过 sudo service kibana start 来启动</span><br></pre></td></tr></table></figure><h4 id="查看安装程序路径"><a href="#查看安装程序路径" class="headerlink" title="查看安装程序路径"></a>查看安装程序路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ql kibana  // 查看到安装在了/opt/kibana</span><br></pre></td></tr></table></figure><h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">$ sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="netstat-使用"><a href="#netstat-使用" class="headerlink" title="netstat 使用"></a>netstat 使用</h3><h4 id="查看某个服务是否在运行"><a href="#查看某个服务是否在运行" class="headerlink" title="查看某个服务是否在运行"></a>查看某个服务是否在运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -aple | grep nginx</span><br></pre></td></tr></table></figure><p>只查看tcp或者udp的connections需要添加-t参数: <code>sudo netstat -nplt</code> </p><blockquote><p>更多更实用的netstat命令参考：<a href="http://www.binarytides.com/linux-netstat-command-examples/" target="_blank" rel="noopener">Linux netstat 命令示例</a></p></blockquote><h3 id="查看centos-版本"><a href="#查看centos-版本" class="headerlink" title="查看centos 版本"></a>查看centos 版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/centos-release</span><br></pre></td></tr></table></figure><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export KAFKA_HOME=/home/osboxes/kafka_2.10-0.10.0.1</span><br><span class="line">echo $KAFKA_HOME</span><br></pre></td></tr></table></figure><h3 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free</span><br></pre></td></tr></table></figure><h3 id="查看目录所占空间大小"><a href="#查看目录所占空间大小" class="headerlink" title="查看目录所占空间大小"></a>查看目录所占空间大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -smh *</span><br></pre></td></tr></table></figure><h3 id="统计文件夹下面的文件数量"><a href="#统计文件夹下面的文件数量" class="headerlink" title="统计文件夹下面的文件数量"></a>统计文件夹下面的文件数量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -1 | wc -l</span><br></pre></td></tr></table></figure><h3 id="grep-搜索文件内容"><a href="#grep-搜索文件内容" class="headerlink" title="grep 搜索文件内容"></a>grep 搜索文件内容</h3><p><strong>指定的文件类型中查找</strong><br>当前子目录中查找： <code>grep -r abcd *.properties</code> 当前子目录递归查找含有<code>abcd</code> 的*.properties 文件<br>指定目录及子目录中查找：<code>grep -r 3306 /home/okchem/storage92g/srm/</code> </p><h3 id="拷贝整个文件夹"><a href="#拷贝整个文件夹" class="headerlink" title="拷贝整个文件夹"></a>拷贝整个文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -avr /home/vivek/letters /usb/backup</span><br></pre></td></tr></table></figure><h3 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h3><blockquote><p>/etc/group file that lists all users groups  可以使用cut命令列出来<code>cut -d: -f1 /etc/group</code></p></blockquote><p><strong>查看当前用户的group:    </strong> <code>$ groups</code><br><strong>查看用户的group:    </strong> <code>$ groups root</code> <code>id -Gn root</code><br><strong>添加用户到组:    </strong> <code>$ sudo usermod -a -G osboxes nginx</code> 添加用户nginx到组osboxes  <code>usermod -a -G &lt;groupname&gt; username</code> 添加完成请用<code>groups &lt;username&gt;</code> 来验证<br><strong>获取组的所有用户:    </strong> <code>getent group kibana</code></p><p>其他有用资源： <a href="https://segmentfault.com/a/1190000004141370" target="_blank" rel="noopener">CentOS7之新建用户与SSH登陆</a></p><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><h4 id="修改文件-夹-owner"><a href="#修改文件-夹-owner" class="headerlink" title="修改文件[夹]owner"></a>修改文件[夹]owner</h4><p>chown 代表change owner；<code>chown --help</code> 提供了更详细的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R okchem:root /ebs</span><br></pre></td></tr></table></figure></p><h4 id="修改文件-夹-访问权限"><a href="#修改文件-夹-访问权限" class="headerlink" title="修改文件[夹]访问权限"></a>修改文件[夹]访问权限</h4><p>chmod 代表change mode;<br>例如：<code>chmod 644 important.txt</code> owner可读可写,group可读，others可读</p><blockquote><p>First position refers to the user. Second refers to the group of the user, and the third refers to all others.4 = read 2 = write 1 = execute</p></blockquote><p>文件权限更详细的解释可以参考：<a href="https://www.pluralsight.com/blog/it-ops/linux-file-permissions" target="_blank" rel="noopener">Linux File Permissions</a></p><h3 id="PS-命令"><a href="#PS-命令" class="headerlink" title="PS 命令"></a>PS 命令</h3><h4 id="查看java进程-ps-ef-grep-java"><a href="#查看java进程-ps-ef-grep-java" class="headerlink" title="查看java进程 ps -ef|grep java"></a>查看java进程 <code>ps -ef|grep java</code></h4><h4 id="产看进程的详细信息-ps-auxwe-grep-subscribe"><a href="#产看进程的详细信息-ps-auxwe-grep-subscribe" class="headerlink" title="产看进程的详细信息 ps -auxwe | grep subscribe"></a>产看进程的详细信息 <code>ps -auxwe | grep subscribe</code></h4><h3 id="命令行快捷键"><a href="#命令行快捷键" class="headerlink" title="命令行快捷键"></a>命令行快捷键</h3><p><strong>CTRL-a</strong> 光标移至行首<br><strong>CTRL-e</strong> 光标移至行尾<br><strong>CTRL-u</strong> 删除整行<br><strong>CTRL-h</strong>    删除光标前字符</p><h3 id="gzip-gunzip"><a href="#gzip-gunzip" class="headerlink" title="gzip / gunzip"></a>gzip / gunzip</h3><p> 压缩单个文件 <code>gzip fileName</code> 压缩后的名字=原文件名字加上后缀.gz<br> 解压缩单个文件<code>gunzip filename</code> 或者 <code>gzip -d filename</code><br>gzip 不能用来压缩整个文件夹至一个.gz 文件。压缩整个文件夹请参考targ + gzip 命令 即： <code>tar -z</code>命令。</p><blockquote><p>gzip -r  dictName 命令会压缩整个文件夹dictName 里面的所有文件，每个文件被压缩成一个单独的*.gz 文件</p></blockquote><h3 id="tar-命令"><a href="#tar-命令" class="headerlink" title="tar 命令"></a>tar 命令</h3><p>gzip / bzip2 是用来压缩单个文件， tar是用来归档。 所以tar结合gzip/bzip2 可以方便的进行整个文件夹的压缩及归档。<br>压缩整个文件夹<code>tar -zcvf outputFileName folderToCompress</code><br><a href="https://www.tecmint.com/18-tar-command-examples-in-linux/" target="_blank" rel="noopener">Examples</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar -xvf videos-14-09-12.tar.bz2 // 解压</span><br></pre></td></tr></table></figure></p><blockquote><p>bzip2 </p></blockquote><h3 id="sftp-命令"><a href="#sftp-命令" class="headerlink" title="sftp 命令"></a>sftp 命令</h3><h4 id="sftp登录"><a href="#sftp登录" class="headerlink" title="sftp登录"></a>sftp登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sftp  name@123.21.331.1</span><br></pre></td></tr></table></figure><h4 id="sftp-下载文件夹"><a href="#sftp-下载文件夹" class="headerlink" title="sftp 下载文件夹"></a>sftp 下载文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get -r  folder  /home/joe/</span><br></pre></td></tr></table></figure><h4 id="sftp-上传文件"><a href="#sftp-上传文件" class="headerlink" title="sftp 上传文件"></a>sftp 上传文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put  /name1.html  /name2/</span><br></pre></td></tr></table></figure><h3 id="crontab-命令"><a href="#crontab-命令" class="headerlink" title="crontab 命令"></a>crontab 命令</h3><p>创建执行任务， 添加cron job<br>参考cronjob <code>crontab -l</code><br>编辑cronjob <code>crontab -e</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 1 * * * /data/scripts/mysql-job.sh A  // 每天1点执行</span><br><span class="line">20 1 * * 0 /data/scripts/mysql-job.sh I  // 每周日1点20 执行</span><br></pre></td></tr></table></figure><p>Cron Job的日志位置： /var/log/cron<br>参考：crontab 时间可以参考： <a href="https://www.cnblogs.com/intval/p/5763929.html" target="_blank" rel="noopener">https://www.cnblogs.com/intval/p/5763929.html</a></p><blockquote><p>注意cron的时间有可能和date命令的时间不一致。<code>tail -f /var/log/cron</code> 这个命令可以查看cron的时间。 当执行<code>crontab -e</code>的时候<code>/var/log/cron</code>会有记录。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Mysql 运维相关脚本收集</title>
      <link href="/Database-Technologies/Mysql-Administration/"/>
      <url>/Database-Technologies/Mysql-Administration/</url>
      
        <content type="html"><![CDATA[<p>mysql 版本： 5.6</p><h1 id="建库及用户"><a href="#建库及用户" class="headerlink" title="建库及用户"></a>建库及用户</h1><p>创建数据库dbname及用户dbuser/dbpassword 并授权数据库全不权限给用户dbuser<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span>  <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`dbname`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */</span></span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> dbname.* <span class="keyword">to</span> dbuser@localhost <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'dbpassword'</span>;</span><br></pre></td></tr></table></figure></p><h1 id="SQL-收集"><a href="#SQL-收集" class="headerlink" title="SQL 收集"></a>SQL 收集</h1><h2 id="找出有记录的表"><a href="#找出有记录的表" class="headerlink" title="找出有记录的表"></a>找出有记录的表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  * FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = &apos;okchem&apos; and table_rows &gt; 0;</span><br></pre></td></tr></table></figure><h2 id="快速删除树形表数据"><a href="#快速删除树形表数据" class="headerlink" title="快速删除树形表数据"></a>快速删除树形表数据</h2><p>如何快速删除树形比如：ProductCategory 这类模型的数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> okchem.ProductCategory <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">0</span>;  <span class="comment">-- id&gt;0 可以去除错误</span></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><blockquote><p>采用where条件<code>where id &gt; 0</code>可以去除如下错误：Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column To disable safe mode, toggle the option in Preferences -&gt; SQL Editor and reconnect.</p></blockquote><h2 id="快速查询表的依赖"><a href="#快速查询表的依赖" class="headerlink" title="快速查询表的依赖"></a>快速查询表的依赖</h2><p>查询表依赖那些表和查询那些表依赖此表； </p><h3 id="查询我依赖的："><a href="#查询我依赖的：" class="headerlink" title="查询我依赖的："></a>查询我依赖的：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT TABLE_NAME,</span><br><span class="line">       COLUMN_NAME,</span><br><span class="line">       CONSTRAINT_NAME,</span><br><span class="line">       REFERENCED_TABLE_NAME,</span><br><span class="line">       REFERENCED_COLUMN_NAME</span><br><span class="line">FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE</span><br><span class="line">WHERE TABLE_SCHEMA = &quot;schemaName&quot; </span><br><span class="line">      AND TABLE_NAME = &quot;TableName&quot; </span><br><span class="line">      AND REFERENCED_COLUMN_NAME IS NOT NULL;</span><br></pre></td></tr></table></figure><h3 id="查询依赖‘我的’："><a href="#查询依赖‘我的’：" class="headerlink" title="查询依赖‘我的’："></a>查询依赖‘我的’：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">      </span><br><span class="line">SELECT TABLE_NAME,</span><br><span class="line">       COLUMN_NAME,</span><br><span class="line">       CONSTRAINT_NAME,</span><br><span class="line">       REFERENCED_TABLE_NAME,</span><br><span class="line">       REFERENCED_COLUMN_NAME</span><br><span class="line">FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE</span><br><span class="line">WHERE TABLE_SCHEMA = &quot;schemaName&quot; </span><br><span class="line">      AND REFERENCED_TABLE_NAME = &quot;TableName&quot;;</span><br></pre></td></tr></table></figure><h2 id="删除重复的行"><a href="#删除重复的行" class="headerlink" title="删除重复的行"></a>删除重复的行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE t1 FROM contacts t1</span><br><span class="line">        INNER JOIN</span><br><span class="line">    contacts t2 </span><br><span class="line">WHERE</span><br><span class="line">    t1.id &lt; t2.id AND t1.email = t2.email;</span><br></pre></td></tr></table></figure><p>// 当表的记录太多，这种join很危险， 最好的方式是先查出来重复的email，再加上in的条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE t1 FROM contacts t1</span><br><span class="line">        INNER JOIN</span><br><span class="line">    contacts t2 </span><br><span class="line">WHERE</span><br><span class="line">    t1.id &lt; t2.id AND t1.email = t2.email and t2.email in (&apos;..&apos;,,,,,,,);</span><br></pre></td></tr></table></figure></p><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><h3 id="为空的时候给默认值"><a href="#为空的时候给默认值" class="headerlink" title="为空的时候给默认值"></a>为空的时候给默认值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ifnull(p.isActive,0) from product</span><br></pre></td></tr></table></figure><h3 id="转换成JSON"><a href="#转换成JSON" class="headerlink" title="转换成JSON"></a>转换成JSON</h3><h2 id="创建Function"><a href="#创建Function" class="headerlink" title="创建Function"></a>创建Function</h2><h3 id="Split-delimited-strings"><a href="#Split-delimited-strings" class="headerlink" title="Split delimited strings"></a>Split delimited strings</h3><p>参考： <a href="https://blog.fedecarg.com/2009/02/22/mysql-split-string-function/" target="_blank" rel="noopener">https://blog.fedecarg.com/2009/02/22/mysql-split-string-function/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION SPLIT_STR(</span><br><span class="line">  x VARCHAR(255),</span><br><span class="line">  delim VARCHAR(12),</span><br><span class="line">  pos INT</span><br><span class="line">)</span><br><span class="line">RETURNS VARCHAR(255)</span><br><span class="line">RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),</span><br><span class="line">       LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1),</span><br><span class="line">       delim, &apos;&apos;);</span><br></pre></td></tr></table></figure><h1 id="Mysql-分库备份脚本"><a href="#Mysql-分库备份脚本" class="headerlink" title="Mysql 分库备份脚本"></a>Mysql 分库备份脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#Backup databases into separated files excluding system schemas</span><br><span class="line">BACKUP_FOLDER=/home/okchem/mysqlbackup</span><br><span class="line">MYUSER=user</span><br><span class="line">MYPASS=password</span><br><span class="line">SOCKET=/data/mysql/mysql.sock</span><br><span class="line">MYCMD=&quot;mysql -u$MYUSER -p$MYPASS -S $SOCKET&quot;</span><br><span class="line">MYDUMP=&quot;mysqldump -u$MYUSER -p$MYPASS -S $SOCKET&quot;</span><br><span class="line"></span><br><span class="line">mkdir -p $&#123;BACKUP_FOLDER&#125;</span><br><span class="line"></span><br><span class="line">#for database in `$MYDUMP -e &quot;show databases;&quot;|sed &apos;1,2d&apos;|egrep -v &quot;mysql|schema&quot;`</span><br><span class="line">for database in `$MYCMD -e &quot;show databases;&quot; | egrep -Evi &quot;database|mysql|schema|test&quot;`</span><br><span class="line">do </span><br><span class="line">$MYDUMP $database &gt;$&#123;BACKUP_FOLDER&#125;/$&#123;database&#125;_$(date +%Y%m%d).sql</span><br><span class="line">    #If compression is needed, use this command: $MYDUMP $database |gzip &gt;/server/backup/$&#123;database&#125;_$(date +$F).sql.gz</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="Mysql-客户端导出数据"><a href="#Mysql-客户端导出数据" class="headerlink" title="Mysql 客户端导出数据"></a>Mysql 客户端导出数据</h1><p>在mysql 服务端可以很方便的导出到文件，也有灵活的选择。 如果需要导出的文件到其他服务器，不在mysql服务器上。 有两个选择：</p><ol><li>在mysql 服务器上导出文件，通过sftp上传至目标机器</li><li>在目标机器安装mysql 客户端，通过shell 脚本来导出数据 （此篇关注点）</li></ol><h2 id="验证环境"><a href="#验证环境" class="headerlink" title="验证环境"></a>验证环境</h2><p>Linux 系统：Centos 7</p><h2 id="安装Mysql-Client"><a href="#安装Mysql-Client" class="headerlink" title="安装Mysql Client"></a>安装Mysql Client</h2><p>参考：<a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation-rpm.html" target="_blank" rel="noopener">Installing MySQL on Linux Using RPM Packages from Oracle</a></p><h2 id="Shell-脚本"><a href="#Shell-脚本" class="headerlink" title="Shell 脚本"></a>Shell 脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line"><span class="meta">#</span>#############################################################################################################################################</span><br><span class="line"><span class="meta">#</span> This script is used to retrieve data from mysql and output it into txt file. Also it will generate md5 file which can be used to verify the integrity.</span><br><span class="line"><span class="meta">#</span> Script will make folder named "YYYYMMDD", also the file name will follow the pattern A/I&#123;tableName&#125;YYYYMMDD&#123;6 sequence number&#125; such as I0100320170303000001</span><br><span class="line"><span class="meta">#</span>#############################################################################################################################################</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#############Global Configuration begins ####################</span><br><span class="line"><span class="meta">#</span> Root folder where the data will be stored</span><br><span class="line">BEE_ROOT_GLOBAL=/data/b2bbuyerdata</span><br><span class="line">MYSQL_HOST=192.168.1.90</span><br><span class="line">MYSQL_PORT=3306</span><br><span class="line">MYSQL_USERNAME=username</span><br><span class="line">MYSQL_PASSWD=password</span><br><span class="line"><span class="meta">#</span>#############Global Configuration ends ####################</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> exportAndMD5Sum querySql tableName. Output the query result into tableNameYYYYMMDD000001.txt and tableNameYYYYMMDD000001.md5</span><br><span class="line"><span class="meta">#</span> .md5 file is used to verify data integrity. </span><br><span class="line">exportAndMD5Sum()</span><br><span class="line">&#123;</span><br><span class="line">if [ "$#" != 2 ];then</span><br><span class="line">echo  "Usage: exportAndMD5Sum querySql tableName";</span><br><span class="line">exit;</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span> Starting export data using mysql command</span><br><span class="line">SQL=$1;</span><br><span class="line">tableName=$2;</span><br><span class="line">TIMESTAMP=`date +%Y%m%d`</span><br><span class="line">BEE_ROOT=$&#123;BEE_ROOT_GLOBAL&#125;/$&#123;TIMESTAMP&#125;</span><br><span class="line"></span><br><span class="line">_tmpFile=$&#123;BEE_ROOT&#125;/$&#123;tableName&#125;$&#123;TIMESTAMP&#125;000001.tmp;</span><br><span class="line">destFile=$&#123;BEE_ROOT&#125;/$&#123;tableName&#125;$&#123;TIMESTAMP&#125;000001.AVL;</span><br><span class="line">destMD5File=$&#123;BEE_ROOT&#125;/$&#123;tableName&#125;$&#123;TIMESTAMP&#125;000001.CHK;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Create Folder</span><br><span class="line">[ ! -d "$BEE_ROOT" ] &amp;&amp;  mkdir "$BEE_ROOT"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Mysql command to output data into file</span><br><span class="line">`mysql -h $&#123;MYSQL_HOST&#125; -p$&#123;MYSQL_PORT&#125; -u $&#123;MYSQL_USERNAME&#125; --password=$&#123;MYSQL_PASSWD&#125; -e "$&#123;SQL&#125;" &gt; "$&#123;_tmpFile&#125;"`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> If not empty(has records) change the file name, otherwise remove it.</span><br><span class="line">if [ -f "$_tmpFile" ] &amp;&amp; [ -s "$_tmpFile" ]</span><br><span class="line">then</span><br><span class="line">mv $&#123;_tmpFile&#125; $&#123;destFile&#125;</span><br><span class="line"><span class="meta">#</span>`md5sum $&#123;destFile&#125; &gt; $&#123;destMD5File&#125;`</span><br><span class="line">md5=($(md5sum $&#123;destFile&#125;))</span><br><span class="line">echo $md5 &gt; $&#123;destMD5File&#125;</span><br><span class="line">else</span><br><span class="line">rm $&#123;_tmpFile&#125;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">if [ "$1" = "I" ]; then</span><br><span class="line">echo "Starting export all data from mysql ............."</span><br><span class="line">exportAndMD5Sum "SELECT username,country,source,city,email,first_name,last_name,province,status,CAST(is_reveive_email AS UNSIGNED) AS is_reveive_email,created_stamp,last_updated_stamp FROM b2bbuyer.user" "I01001"</span><br><span class="line">exportAndMD5Sum "select u.username,a.address,a.city,a.company_name,a.country,a.first_name,CAST(a.is_default AS UNSIGNED) AS is_default ,a.last_name,a.province,a.tel_country_code,a.tel_ext,a.tel_no,a.zip_code,a.created_stamp,a.last_updated_stamp from b2bbuyer.user u inner join b2bbuyer.user_delivery_address a where a.user_id=u.id" "I01002"</span><br><span class="line">exportAndMD5Sum "select u.username,c.email,c.address,c.city,c.company_name,c.contact,c.country,c.fax_country_code,c.fax_ext,c.fax_tel_no,c.main_products,c.province,c.register_no,c.tax_no,c.tel_country_code,c.tel_ext,c.tel_no,c.website from b2bbuyer.user u inner join b2bbuyer.user_company c where c.user_id=u.id" "I01003"</span><br><span class="line">else</span><br><span class="line">echo "Starting export yesterday's data from mysql ............."</span><br><span class="line">exportAndMD5Sum "SELECT username,country,source,city,email,first_name,last_name,province,status,CAST(is_reveive_email AS UNSIGNED) AS is_reveive_email,created_stamp,last_updated_stamp FROM b2bbuyer.user where last_updated_stamp &lt; (UNIX_TIMESTAMP(CURDATE())*1000) and last_updated_stamp &gt; ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)" "A01001"</span><br><span class="line">exportAndMD5Sum "select u.username,a.address,a.city,a.company_name,a.country,a.first_name,CAST(a.is_default AS UNSIGNED) AS is_default ,a.last_name,a.province,a.tel_country_code,a.tel_ext,a.tel_no,a.zip_code,a.created_stamp,a.last_updated_stamp from b2bbuyer.user u inner join b2bbuyer.user_delivery_address a where a.user_id=u.id and a.last_updated_stamp &lt; (UNIX_TIMESTAMP(CURDATE())*1000) and a.last_updated_stamp &gt; ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)" "A01002"</span><br><span class="line">exportAndMD5Sum "select u.username,c.email,c.address,c.city,c.company_name,c.contact,c.country,c.fax_country_code,c.fax_ext,c.fax_tel_no,c.main_products,c.province,c.register_no,c.tax_no,c.tel_country_code,c.tel_ext,c.tel_no,c.website from b2bbuyer.user u inner join b2bbuyer.user_company c where c.user_id=u.id and c.last_updated_stamp &lt; (UNIX_TIMESTAMP(CURDATE())*1000) and c.last_updated_stamp &gt; ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)" "A01003"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="添加cron-job"><a href="#添加cron-job" class="headerlink" title="添加cron job"></a>添加cron job</h2><p>参考cronjob <code>crontab -l</code><br>编辑cronjob <code>crontab -e</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 1 * * * /data/scripts/mysql-job.sh A</span><br><span class="line">20 1 * * 0 /data/scripts/mysql-job.sh I</span><br></pre></td></tr></table></figure><p>两个cron job 分别：</p><ol><li>每天1点执行</li><li>每周日1点20 执行</li></ol><p>参考：crontab 时间可以参考： <a href="https://www.cnblogs.com/intval/p/5763929.html" target="_blank" rel="noopener">https://www.cnblogs.com/intval/p/5763929.html</a></p><h1 id="Mysql-客户端导入数据"><a href="#Mysql-客户端导入数据" class="headerlink" title="Mysql 客户端导入数据"></a>Mysql 客户端导入数据</h1><h2 id="从txt文件导入"><a href="#从txt文件导入" class="headerlink" title="从txt文件导入"></a>从txt文件导入</h2><p>参考： <a href="https://blog.csdn.net/huihui520com/article/details/79080512" target="_blank" rel="noopener">https://blog.csdn.net/huihui520com/article/details/79080512</a></p><p><a href="https://segmentfault.com/a/1190000009333563" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009333563</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use test;</span><br><span class="line">load data infile &apos;D:/tmp/hotwords.txt&apos; into table hot fields terminated by &apos;,&apos; lines terminated by&apos;\r\n&apos;;</span><br><span class="line">ALTER TABLE okchem.hot ADD `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY;</span><br></pre></td></tr></table></figure><p>需要解决问题：–secure-file-priv option so it cannot execute this statement<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">windows下：修改my.ini 在[mysqld]内加入secure_file_priv =</span><br><span class="line"></span><br><span class="line">linux下：修改my.cnf 在[mysqld]内加入secure_file_priv =</span><br></pre></td></tr></table></figure></p><h1 id="mysql-数据迁移"><a href="#mysql-数据迁移" class="headerlink" title="mysql 数据迁移"></a>mysql 数据迁移</h1><h2 id="自增字段问题"><a href="#自增字段问题" class="headerlink" title="自增字段问题"></a>自增字段问题</h2><p>新增表格，需要将旧的数据迁入新表。Mysql的自增字段默认行为：</p><ol><li>取最大的(比如： 创建表后，只插入一条数据， ID直接指定为9， 那么下一条插入的数据在不指定ID值的情况下，ID是10）</li><li>删除数据后，ID的起点不会因为删除而改变。 （插入N条数据，假如这N条都是未指定ID的插入，也就是说下一个ID是N+1， 这个时候删除所有的数据，再以不指定ID的方式插入一条数据，这个时候ID是<strong>N+1</strong>）<h1 id="Mysql-系统变量配置"><a href="#Mysql-系统变量配置" class="headerlink" title="Mysql 系统变量配置"></a>Mysql 系统变量配置</h1><h2 id="windows-下安装的mysql的配置文件地址"><a href="#windows-下安装的mysql的配置文件地址" class="headerlink" title="windows 下安装的mysql的配置文件地址"></a>windows 下安装的mysql的配置文件地址</h2>从服务列表<code>services.msc</code> 中找到mysql的服务，右键查看属性中的“可执行文件路径”。参考：<br><a href="https://blog.csdn.net/postnull/article/details/72455768" target="_blank" rel="noopener">https://blog.csdn.net/postnull/article/details/72455768</a><h2 id="Win-7-设置表明区分大小写"><a href="#Win-7-设置表明区分大小写" class="headerlink" title="Win 7 设置表明区分大小写"></a>Win 7 设置表明区分大小写</h2>参考： <a href="https://blog.csdn.net/postnull/article/details/72455768" target="_blank" rel="noopener">https://blog.csdn.net/postnull/article/details/72455768</a><br>在my.ini 文件中添加 <code>lower_case_table_names=2</code> </li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Mongodb 和 Mysql 的性能测试</title>
      <link href="/Database-Technologies/Mongodb-vs-Mysql-basic/"/>
      <url>/Database-Technologies/Mongodb-vs-Mysql-basic/</url>
      
        <content type="html"><![CDATA[<p>尝试测试Mongodb 和 Mysql的性能，测试/数据导入代码：<a href="https://github.com/choelea/mongo-vs-mysql" target="_blank" rel="noopener">github: mongo-vs-mysql</a></p><blockquote><p>性能比较很复杂，不能简单就说谁的性能高，谁的低。要基于场景，基于并发请求数量来谈，同时也要知道如何调优，本文只是初探，在没有任何调优的基础上，在本地windows 7上进行测试。</p></blockquote><h1 id="版本及环境"><a href="#版本及环境" class="headerlink" title="版本及环境"></a>版本及环境</h1><ul><li>操作系统：  windows 7 </li><li>硬件环境： （只做对比，mongodb和mysql都装在同一台机器上） </li><li>mongodb：  3.2.5</li><li>mysql：    5.7</li></ul><h1 id="Data-demo"><a href="#Data-demo" class="headerlink" title="Data-demo"></a>Data-demo</h1><p>Data-demo 是一个Spring Boot的项目， 通过Spring Boot的CommandLineRunner来批量动态插入1000,020 条数据。</p><p>数据结构采用常用的产品和类目的多对多的设计。<br><img src="/assets/preimg/Database-Technologies/mysql-product-category.png" alt="mysql-product-category"></p><p><strong>Category 数据如下：</strong></p><table><thead><tr><th>id</th><th>code</th><th>name  </th></tr></thead><tbody><tr><td>‘1’</td><td>‘cate-1’</td><td>‘Category 1’</td></tr><tr><td>‘2’</td><td>‘cate-2’</td><td>‘Category 2’</td></tr><tr><td>‘3’</td><td>‘cate-3’</td><td>‘Category 3’</td></tr><tr><td>‘4’</td><td>‘cate-4’</td><td>‘Category 4’</td></tr></tbody></table><p><strong>Product 数据如下</strong></p><table><thead><tr><th>id</th><th>code</th><th>name</th><th>price</th></tr></thead><tbody><tr><td>‘1’</td><td>‘p-0’</td><td>‘product 0’</td><td>‘19’</td></tr><tr><td>‘2’</td><td>‘p-1’</td><td>‘product 1’</td><td>‘19’</td></tr><tr><td>‘3’</td><td>‘p-2’</td><td>‘product 2’</td><td>‘19’</td></tr><tr><td> …</td><td>…</td><td>…</td><td>…</td></tr><tr><td>‘1000000’</td><td>‘p-999999’</td><td>‘product 999999’</td><td>‘19’</td></tr><tr><td>‘1000001’</td><td>‘pp-0’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000002’</td><td>‘pp-1’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000003’</td><td>‘pp-2’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000004’</td><td>‘pp-3’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000005’</td><td>‘pp-4’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000006’</td><td>‘pp-5’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000007’</td><td>‘pp-6’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000008’</td><td>‘pp-7’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000009’</td><td>‘pp-8’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000010’</td><td>‘pp-9’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000011’</td><td>‘pp-10’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000012’</td><td>‘pp-11’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000013’</td><td>‘pp-12’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000014’</td><td>‘pp-13’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000015’</td><td>‘pp-14’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000016’</td><td>‘pp-15’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000017’</td><td>‘pp-16’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000018’</td><td>‘pp-17’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000019’</td><td>‘pp-18’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000020’</td><td>‘pp-19’</td><td>‘iphone’</td><td>‘19’    </td></tr></tbody></table><p>最后的二十行是用来方便查询验证的。</p><p><strong>Product_Category</strong></p><p>中间mapping的表格</p><h1 id="Mongo-数据"><a href="#Mongo-数据" class="headerlink" title="Mongo 数据"></a>Mongo 数据</h1><p>采用了 Nodejs+express+mongoose 来导入mongo的数据. 项目express-mongoose-microservice-api-boilerplate中的config/test.env来配置mongo的数据库地址。<code>npm install</code> 然后运行命令<code>npm run  produceTestData</code> 可以初始化1000,020 条产品数据到mongodb。 数据类似mysql的产品数据：</p><p>产品 Product<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;_id&quot;: &quot;59cb4952d44efa2eb45d4bf7&quot;,</span><br><span class="line">&quot;code&quot;: &quot;p-0&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Product 0&quot;,</span><br><span class="line">&quot;price&quot;: 19,</span><br><span class="line">&quot;__v&quot;: 0,</span><br><span class="line">&quot;categories&quot;: [</span><br><span class="line">&quot;cate-1&quot;,</span><br><span class="line">&quot;cate-2&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有20条产品数据的categories中有cate-4</p><h1 id="通过查询脚本直接测试："><a href="#通过查询脚本直接测试：" class="headerlink" title="通过查询脚本直接测试："></a>通过查询脚本直接测试：</h1><p>通过Robomongo 连接Mongodb来测试，通过mysql的workbench来完成mysql的脚本查询。</p><h2 id="场景一：查询单个类目下的产品"><a href="#场景一：查询单个类目下的产品" class="headerlink" title="场景一：查询单个类目下的产品"></a>场景一：查询单个类目下的产品</h2><h4 id="mongo-查询所有的cate-4-的产品"><a href="#mongo-查询所有的cate-4-的产品" class="headerlink" title="mongo 查询所有的cate-4 的产品"></a>mongo 查询所有的cate-4 的产品</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;products&apos;).find(&#123;categories:&apos;cate-4&apos;&#125;) // 初次查询1.321 秒 紧接着的两次查询大概0.791 秒</span><br></pre></td></tr></table></figure><h4 id="mysql-查询所有的cate-4-的产品"><a href="#mysql-查询所有的cate-4-的产品" class="headerlink" title="mysql 查询所有的cate-4 的产品"></a>mysql 查询所有的cate-4 的产品</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  product p <span class="keyword">inner</span> <span class="keyword">join</span> product_category pc <span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">category</span> c <span class="keyword">on</span> p.id=pc.product_id <span class="keyword">and</span> pc.category_id=c.id <span class="keyword">where</span> c.code =<span class="string">'cate-4'</span>; <span class="comment">-- 毫秒级，时间可以忽略不计, 产品和类目的code都是unique的索引，所以查询速度很快</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  product p <span class="keyword">inner</span> <span class="keyword">join</span> product_category pc <span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">category</span> c <span class="keyword">on</span> p.id=pc.product_id <span class="keyword">and</span> pc.category_id=c.id <span class="keyword">where</span> c.name =<span class="string">'Category 4'</span>; <span class="comment">-- 6.2秒，name不是索引，所以慢。（索引的用处毫无疑问，无需赘述）</span></span><br></pre></td></tr></table></figure><h2 id="场景二：查询多个类目下的产品"><a href="#场景二：查询多个类目下的产品" class="headerlink" title="场景二：查询多个类目下的产品"></a>场景二：查询多个类目下的产品</h2><p>查询所有cate-4 加上 cate-5 的产品。（实际上cate-5并不存在，不过不影响测试）</p><h4 id="mongod"><a href="#mongod" class="headerlink" title="mongod"></a>mongod</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;products&apos;).find(&#123;categories:&#123;$in:[&apos;cate-4&apos;,&apos;cate-5&apos;]&#125;&#125;) // 0.89 秒； 和查询cate-4的产品相差不多，都是全表扫描</span><br></pre></td></tr></table></figure><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM  product p inner join product_category pc inner join category c on p.id = pc.product_id and pc.category_id = c.id where c.code = &apos;cate-5&apos; or c.code=&apos;cate-4&apos;; -- 6.177 秒，</span><br><span class="line">SELECT * FROM  product p inner join product_category pc inner join category c on p.id = pc.product_id and pc.category_id = c.id where c.code in(&apos;cate-5&apos;,&apos;cate-4&apos;); -- 6.24 秒</span><br></pre></td></tr></table></figure><p>通过上面的测试可以看出，mysql数据库在数据体量大的时候，用or或者in都有很严重的性能问题，可以考虑使用union来代替。一般电商平台的处理方式：如果是后台维护功能应该从业务上来避免这种场景，如果是前端面向用户的功能，需要引入搜索引擎 比如： elasticsearch</p><h2 id="场景三：单表无索引"><a href="#场景三：单表无索引" class="headerlink" title="场景三：单表无索引"></a>场景三：单表无索引</h2><p>查询名称是iphone的产品</p><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from product where name=&apos;iphone&apos;; -- 0.546 秒，全表扫描</span><br></pre></td></tr></table></figure><h4 id="mongo"><a href="#mongo" class="headerlink" title="mongo"></a>mongo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;products&apos;).find(&#123;name:&apos;iphone&apos;&#125;) // 0.428 秒</span><br></pre></td></tr></table></figure><p>全表扫描两者并无太大的差距。</p><h2 id="场景四：单表索引"><a href="#场景四：单表索引" class="headerlink" title="场景四：单表索引"></a>场景四：单表索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;products&apos;).find(&#123;code:&apos;pp-1&apos;&#125;)  </span><br><span class="line">select * from product where code=&apos;pp-1&apos;;</span><br></pre></td></tr></table></figure><p>一百万条数据，单表索引速度都是毫秒级，时间可以忽略不计。</p><h2 id="场景五：单表索引字段使用In来查询"><a href="#场景五：单表索引字段使用In来查询" class="headerlink" title="场景五：单表索引字段使用In来查询"></a>场景五：单表索引字段使用In来查询</h2><p>场景二我们提到了Mysql中关联表时使用in查询的效率问题。下面测试下单表的In查询效率, 通过测试我们可以发现单表针对索引的in的查询都是毫秒级的。<br><strong>mongodb</strong> 历时0.004 sec. 索引被用上了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 非ID的索引字段</span><br><span class="line">db.getCollection(&apos;products&apos;).find(&#123;</span><br><span class="line">    &quot;code&quot;: &#123;</span><br><span class="line">        &quot;$in&quot;: [</span><br><span class="line">            &quot;pp-0&quot;,</span><br><span class="line">            &quot;pp-1&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// _id 主键的$in 查询</span><br><span class="line">db.getCollection(&apos;products&apos;).find(&#123;</span><br><span class="line">    &quot;_id&quot;: &#123;</span><br><span class="line">        &quot;$in&quot;: [</span><br><span class="line">            ObjectId(&quot;59cb4952d44efa2eb45d4bf7&quot;),</span><br><span class="line">            ObjectId(&quot;59cb4952d44efa2eb45d4bf8&quot;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>Mysql </strong> 也是毫秒级，时间忽略不计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> code <span class="keyword">in</span> (<span class="string">'pp-0'</span>,<span class="string">'pp-4'</span>); // 0.0000 sec</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>MongoDB 命令 常用语句</title>
      <link href="/Database-Technologies/mongodb-command/"/>
      <url>/Database-Technologies/mongodb-command/</url>
      
        <content type="html"><![CDATA[<p>mongodb 常用命令收集</p><h2 id="导出JSON数据"><a href="#导出JSON数据" class="headerlink" title="导出JSON数据"></a>导出JSON数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoexport -h localhost:27017 -d guide-chem -c product --limit 10000 --skip 10000 --jsonArray -u okchem -p okchem -o /home/okchem/products.json</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li>-h 指定host 和端口</li><li>-d 指定db</li><li>-c 指定collection</li><li>–limit 导出多少条</li><li>–skip 跳过多少条</li><li>–jsonArray 保存为json数组</li><li>-u 指定用户</li><li>-p 指定密码</li><li>-o  指定导出文件路径output</li></ul><h2 id="修改字段名称"><a href="#修改字段名称" class="headerlink" title="修改字段名称"></a>修改字段名称</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.update(&#123;&#125;, &#123;$rename:&#123;&quot;旧键名称&quot;:&quot;新键名称&quot;&#125;&#125;, false, true)</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li>第一个false表示：可选，这个参数的意思是，如果不存在update的记录，true为插入新的记录，默认是false，不插入。 </li><li>第二个true表示：可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>个人PPT汇总</title>
      <link href="/Work-Related/%E4%B8%AA%E4%BA%BAPPT%E6%B1%87%E6%80%BB/"/>
      <url>/Work-Related/%E4%B8%AA%E4%BA%BAPPT%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="OKCHEM2-0-平台系列"><a href="#OKCHEM2-0-平台系列" class="headerlink" title="OKCHEM2.0 平台系列"></a>OKCHEM2.0 平台系列</h1><p><strong>OKCHEM 平台技术简介</strong>     <a href="/assets/preimg/Work-Related/OKCHEM-Platform-Technical-Overview.pptx">OKCHEM-Platform-Technical-Overview.pptx</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>理想的基于Rest API的微服务架构：<a href="/assets/preimg/Work-Related/okchem-micro-services.pptx">okchem-micro-services.pptx</a></p><p>配合AWS S3的图片服务设计：<a href="/assets/preimg/Work-Related/图片服务设计.pptx">图片服务设计.pptx</a></p><h1 id="Keynote-作品"><a href="#Keynote-作品" class="headerlink" title="Keynote 作品"></a>Keynote 作品</h1><p><strong>逍逍家的家规：</strong></p><ul><li>Keynote 文件： <a href="/assets/preimg/Work-Related/jiu-shu-family-rules.key">jiu-shu-family-rules.key</a> </li><li>PDF在线阅读： <a href="/assets/preimg/Work-Related/jiu-shu-family-rules.pdf">jiu-shu-family-rules.pdf</a>     </li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>工具资源收集</title>
      <link href="/Work-Related/resources-tools/"/>
      <url>/Work-Related/resources-tools/</url>
      
        <content type="html"><![CDATA[<h2 id="视频及直播"><a href="#视频及直播" class="headerlink" title="视频及直播"></a>视频及直播</h2><p><strong>微吼:</strong> <a href="http://www.vhall.com/saas" target="_blank" rel="noopener">http://www.vhall.com/saas</a></p><h2 id="字体资源"><a href="#字体资源" class="headerlink" title="字体资源"></a>字体资源</h2><ul><li>阿里 <a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></li><li>Font Awesome <a href="https://fontawesome.com/icons?d=gallery" target="_blank" rel="noopener">https://fontawesome.com/icons?d=gallery</a></li></ul><h2 id="文件检索"><a href="#文件检索" class="headerlink" title="文件检索"></a>文件检索</h2><ul><li>火萤 <a href="http://www.huoying666.com/" target="_blank" rel="noopener">http://www.huoying666.com/</a> 可用于PPT</li><li>文件检索 <a href="https://github.com/Wox-launcher/Wox" target="_blank" rel="noopener">https://github.com/Wox-launcher/Wox</a> </li></ul><h2 id="设计网站"><a href="#设计网站" class="headerlink" title="设计网站"></a>设计网站</h2><p>MAKA <a href="http://maka.im" target="_blank" rel="noopener">http://maka.im</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>PPT 初学笔记</title>
      <link href="/Work-Related/primary-learning-notes/"/>
      <url>/Work-Related/primary-learning-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="字体选择"><a href="#字体选择" class="headerlink" title="字体选择"></a>字体选择</h1><h2 id="商务字体"><a href="#商务字体" class="headerlink" title="商务字体"></a>商务字体</h2><ul><li>微软雅黑</li><li>思源黑体</li><li>方正超粗黑体</li><li>方正超粗黑体</li><li>方正兰亭黑</li><li>黑体</li><li>等线</li></ul><h1 id="如何做好表格"><a href="#如何做好表格" class="headerlink" title="如何做好表格"></a>如何做好表格</h1><p><strong>三步：</strong> 建立主色调； 建立边框线；规律性底纹</p><h1 id="排版原则"><a href="#排版原则" class="headerlink" title="排版原则"></a>排版原则</h1><ol><li>对齐</li><li>对比 （颜色， 大小，形状，距离）</li><li>亲密性 （相关内容靠近在一起）</li><li>重复性/一致性 ( logo； 图片；字体；色彩；一切为了风格一致）</li></ol><h1 id="排版风格"><a href="#排版风格" class="headerlink" title="排版风格"></a>排版风格</h1><ol><li>分割</li><li>分裂</li><li>对称</li><li>杂志</li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>使用Hexo 来建立个人网站</title>
      <link href="/Work-Related/hexo-usage/"/>
      <url>/Work-Related/hexo-usage/</url>
      
        <content type="html"><![CDATA[<p>使用说明参考: <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><h2 id="themes-收集"><a href="#themes-收集" class="headerlink" title="themes 收集"></a>themes 收集</h2><p><strong>艺术类：</strong></p><ul><li><a href="https://github.com/sharvaridesai/hexo-theme-edinburgh" target="_blank" rel="noopener">https://github.com/sharvaridesai/hexo-theme-edinburgh</a></li></ul><p><strong>带有搜索和评论的</strong></p><ul><li><a href="https://github.com/wzpan/hexo-theme-freemind" target="_blank" rel="noopener">https://github.com/wzpan/hexo-theme-freemind</a></li><li><a href="https://github.com/iTimeTraveler/hexo-theme-hipaper" target="_blank" rel="noopener">https://github.com/iTimeTraveler/hexo-theme-hipaper</a> 古老新闻风格 带有markdown 目录</li><li><a href="https://github.com/iTimeTraveler/hexo-theme-hiero" target="_blank" rel="noopener">https://github.com/iTimeTraveler/hexo-theme-hiero</a> 和上面类似</li><li><a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">https://github.com/ppoffice/hexo-theme-hueman</a> 漂亮的一个</li><li><a href="https://github.com/xaoxuu/hexo-theme-material-x" target="_blank" rel="noopener">https://github.com/xaoxuu/hexo-theme-material-x</a>  还不错</li></ul><p><strong>其他</strong>：</p><ul><li><a href="https://github.com/wuchong/jacman" target="_blank" rel="noopener">https://github.com/wuchong/jacman</a></li><li><a href="https://github.com/RandomAdversary/Gradient" target="_blank" rel="noopener">https://github.com/RandomAdversary/Gradient</a></li><li><a href="https://github.com/huan555/lemon-lime" target="_blank" rel="noopener">https://github.com/huan555/lemon-lime</a></li></ul><ul><li><a href="https://github.com/zalando-incubator/hexo-theme-doc" target="_blank" rel="noopener">https://github.com/zalando-incubator/hexo-theme-doc</a> 适合做项目文档</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>网站SEO优化最佳实践</title>
      <link href="/Web-Applications-Technologies/%E7%BD%91%E7%AB%99SEO%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
      <url>/Web-Applications-Technologies/%E7%BD%91%E7%AB%99SEO%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="网站-SEO-实践及注意事项"><a href="#网站-SEO-实践及注意事项" class="headerlink" title="网站 SEO 实践及注意事项"></a>网站 SEO 实践及注意事项</h1><p>SEO着重于提高页面的收录率及网站在搜索引擎中的排名。</p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ol><li>确保网页文件返回的文件头正确。 如：如果是404页面就一定是返回404文件头，如果返回错误，就会出问题的。也不要返回多个文件头。</li><li>代码中，除了&lt;!DOCTYPE声明外，请一律用小写；代码中不要有多余的换行和空格，这样凭空增加了页面的大小。</li><li>页面要尽量符合W3C标准。 如果不能做到的情况下，html标签一定要关闭，否则搜索引擎会直接略过它不能确定的内容；属性值必须带上英文双引号。</li><li>禁止使用隐藏链接。会被搜索引擎认为隐藏链接的做法，就是 <a>标签之间是空的，没有图片或者文字。比如：<a href="****"></a></a></li><li>请尽量把页面中的CSS代码和 javascript代码外调。不能外调的，请尽量把代码往下挪。</li><li>一个网页中所有的链接都要尽量用绝对路径，除非影响性能或者一定需要用相对路径不可。</li><li>页面代码中，写在javascript中的链接，搜索引擎是可以读的，所以有什么不想搜索引擎收录的链接，万一要写在JS代码中的话，请把JS外调。</li><li>DIV的嵌套是不可避免的，但是在有嵌套的时候，请选择嵌套层级最少的那个方法。</li></ol><h2 id="URL-规范"><a href="#URL-规范" class="headerlink" title="URL 规范"></a>URL 规范</h2><ol><li>URL 全部小写；</li><li>URL中最好有关键词的存在，并且关键词之间用中划线连接；</li><li>URL 尽可能静态化，参数最多不能超过3个(比如： products?category=shoes 可以静态化为/shoes/product, 对应的pattern为：/{category}/products)</li><li>使用 rel=”canonical” 链接元素指明首选网址。</li></ol><h2 id="页面H标签的使用"><a href="#页面H标签的使用" class="headerlink" title="页面H标签的使用"></a>页面H标签的使用</h2><p>H标签在页面代码当中起着引导性作用，对于搜索引擎来说，标签的存在意义是为了让搜索引擎定位并识别到这一部分的文字或是重点主题的内容。对网页的重要内容而言，它起着“强调作用”。 </p><p> 在实际的运用当中，由于H1-H6标签文字是由大至小，其重要与权重的高低程度是按排号依次递减的，因此我们都会对这些标签的使用进行分配：H1（内容主题）、H2（段落标题）、H3（小段落标题）以此类推至H6标签。 </p><p>参考：链接：<a href="https://www.chinaz.com/web/2015/0730/428499.shtml" target="_blank" rel="noopener">https://www.chinaz.com/web/2015/0730/428499.shtml</a> </p><h2 id="SiteMap"><a href="#SiteMap" class="headerlink" title="SiteMap"></a>SiteMap</h2><ol><li>网站必须有sitemap</li><li>根据语言的二级域名要分别创建各自的sitemap</li><li>sitemap中的<urlset> <url> <loc> 必填</loc></url></urlset></li></ol><h2 id="多语言"><a href="#多语言" class="headerlink" title="多语言"></a>多语言</h2><ol><li><html lang="en"> 标记当前页面语言</html></li><li>使用标签表明当前页面内容的语言 <meta http-equiv="content-language" content="pt"></li><li>使用 hreflang 设置语言和区域网址， 例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;alternate&quot; hreflang=&quot;en&quot; href=&quot;https://www.okchem.com/&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;alternate&quot; hreflang=&quot;es&quot; href=&quot;https://es.okchem.com/&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;alternate&quot; hreflang=&quot;pt&quot; href=&quot;https://pt.okchem.com/&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h2><ol><li>对于网页中图片的高或宽大于200像素的图片，一定要在代码中看到图片地址而且写上这张图片的高宽大小，以及alt文本和 title文本。 <code>&lt;img height=&quot;290&quot; src=&quot; &quot; width=&quot;295&quot; alt=&quot; &quot; title=&quot; &quot; /&gt;</code> alt和title可以一样，但是不能堆砌关键词。</li><li>当链接对象是图片的时候，图片要有alt和title属性 <code>&lt;a href=&quot;****&quot; title=&quot; &quot;&gt; &lt;img src=&quot; &quot; alt=&quot; &quot; /&gt; &lt;/a&gt;</code></li></ol><h2 id="网站响应时间"><a href="#网站响应时间" class="headerlink" title="网站响应时间"></a>网站响应时间</h2><p>网站相应时间无论从用户体验或者SEO的角度来讲都很重要。影响响应时间有很多因素： 1. 利用浏览器缓存;</p><ol start="2"><li>图片大小；一般情况所有图片必须经过压缩处理；一般来讲banner不能超过100k，缩略图不能超过15K。 优化图片可以通过压缩大图，合并小图减少网络请求 3. JS和CSS； 过多和过大的JS和CSS资源也同样会影响网页速度。合并压缩JS和CSS；适当异步加载JS都可以提高相应速度。（异步加载的JS不参与页面的渲染） 4. CDN 缓存静态资源； 5. 独立静态资源的服务，提高浏览器并发</li></ol><p>Etag  和 Cache Controller 都需要<br>etag 是在服务器端做对比<br>Cache Controller 可以让图片请求直接不去请求服务器</p><h2 id="网站管理事项"><a href="#网站管理事项" class="headerlink" title="网站管理事项"></a>网站管理事项</h2><ol><li>网页上已存在的链接，如果需要撤消或更改，需要让SEO人员知道并确认；最好的情况是不要随便删除。变更URL的时候使用301重定向跳转，不要使用302。</li><li>链接的文本要和被链接的页面内容保持一致。</li><li>可用性及响应速度； 不能宕机或者经常出现404页面</li><li>擅用Robots.txt 文件。网站后台不需要展现给搜索引擎的目录，请用Robots.txt文件屏蔽。 应该形成习惯，把不需要让搜索引擎知道的目录，在网站的根目录下的robots.txt文件中屏蔽它。</li><li>要用任何阻止大量爬虫访问的系统。 比如防采集系统不要用。虽然爬虫确实占了很大一部分的带宽，但是是有价值的。</li></ol><h2 id="网站是否存在死链"><a href="#网站是否存在死链" class="headerlink" title="网站是否存在死链"></a>网站是否存在死链</h2><p>使用xenu 这个工具可以扫面网站是否存在死链接</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>慎用代码copy。 网站上的某些代码，对于网站功能方面是不会有影响的。但是可能是对搜索引擎爬虫有影响的。所以以下的代码copy是要注意的：比如：<code>&lt;title&gt;&lt;/title&gt; &lt;meta&gt; &lt;a href= rel=”nofollow”&gt;</code></li></ol><h2 id="TDK"><a href="#TDK" class="headerlink" title="TDK"></a>TDK</h2><p>TDK 规则（待补充）</p><blockquote><p>不同的页面要避免重复的tdk，如果重复会导致google不认你设置的tdk。 <a href="https://moz.com/blog/why-wont-google-use-my-meta-description" target="_blank" rel="noopener">Why Won’t Google Use My META Description</a></p></blockquote><h2 id="Google-SEO-相关链接"><a href="#Google-SEO-相关链接" class="headerlink" title="Google SEO 相关链接"></a>Google SEO 相关链接</h2><ul><li>Google SEO的帮助文档</li><li>google可以识别的元标记 <a href="https://support.google.com/webmasters/answer/79812" target="_blank" rel="noopener">https://support.google.com/webmasters/answer/79812</a>, （google 并不认可keyword的meta信息 <a href="https://webmasters.googleblog.com/2016/11/saying-goodbye-to-content-keywords.html?hl=zh-Hans&amp;visit_id=1-636691380412463003-1651263000&amp;rd=1）" target="_blank" rel="noopener">https://webmasters.googleblog.com/2016/11/saying-goodbye-to-content-keywords.html?hl=zh-Hans&amp;visit_id=1-636691380412463003-1651263000&amp;rd=1）</a></li></ul><h1 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h1><h2 id="移动前端不得不了解的HTML5-head-头标签"><a href="#移动前端不得不了解的HTML5-head-头标签" class="headerlink" title="移动前端不得不了解的HTML5 head 头标签"></a>移动前端不得不了解的HTML5 head 头标签</h2><p><a href="https://www.cnblogs.com/happiness-mumu/p/6054852.html" target="_blank" rel="noopener">https://www.cnblogs.com/happiness-mumu/p/6054852.html</a></p><h1 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h1><p><a href="https://gtmetrix.com/reports/www.okchem.com/3HaT9qRN" target="_blank" rel="noopener">https://gtmetrix.com/reports/www.okchem.com/3HaT9qRN</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>社交分享在网站中的实现</title>
      <link href="/Web-Applications-Technologies/Website-Social-Share/"/>
      <url>/Web-Applications-Technologies/Website-Social-Share/</url>
      
        <content type="html"><![CDATA[<p>公司的web项目中，经常会有社交分享，这里简单说明下，方便后面开发人员理解。</p><h2 id="分享的原理"><a href="#分享的原理" class="headerlink" title="分享的原理"></a>分享的原理</h2><p>社交分享(linkedin, facebook, twitter)的本质就是请求其一个公开的页面。通过参数告诉社交网站你需要分享的网页的网址，然后社交网站的爬虫会去爬取这个网址。显然，你分享的网页必须是可以<strong>匿名</strong>从<strong>公网</strong>访问的；爬虫爬取和谷歌，百度的爬虫是一个道理，只是各自算法不一样。<br>常用的社交网站的分享链接如下：</p><ul><li>Linkedin <a href="http://www.linkedin.com/shareArticle?url=https://www.okchem.com/instant-quote" target="_blank" rel="noopener">http://www.linkedin.com/shareArticle?url=https://www.okchem.com/instant-quote</a></li><li>Facebook <a href="http://www.facebook.com/sharer.php?u=" target="_blank" rel="noopener">http://www.facebook.com/sharer.php?u=</a> <a href="https://www.okchem.com/instant-quote" target="_blank" rel="noopener">https://www.okchem.com/instant-quote</a></li><li>Twitter <a href="http://twitter.com/share?url=https://www.okchem.com/instant-quote" target="_blank" rel="noopener">http://twitter.com/share?url=https://www.okchem.com/instant-quote</a><br>更多参数可以参考相关文档，但是基本上这个参数就行了</li></ul><h2 id="分享内容定制"><a href="#分享内容定制" class="headerlink" title="分享内容定制"></a>分享内容定制</h2><p>一般情况下，类似谷歌和百度的爬虫，会爬取title description （和SEO中的一样）还有图片等作为缩略展示。 因为各自算法的原因，并不是100%能保证你的title和description就会被展示出来；也不能保证你想要出现的图片就以一定会出现在缩略中。<br>如果想<strong>告知</strong>爬虫你的网页的title description和图片等，可以通过Open Graph Meta Tags 来<strong>指引</strong>爬虫。 具体可以参考<a href="http://ogp.me" target="_blank" rel="noopener">http://ogp.me/</a>， 详情请去百度和google。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta property=&quot;og:title&quot; content=&quot;[Hot Item] Ce Approved Superfine Synthetic Graphite Spheroidization Grinding Mill&quot;/&gt;</span><br><span class="line">&lt;meta property=&quot;og:type&quot; content=&quot;product&quot;/&gt;</span><br><span class="line">&lt;meta property=&quot;og:url&quot; content=&quot;http://leap-tech.en.made-in-china.com/product/gBvQXLzMCKcJ/China-Ce-Approved-Superfine-Synthetic-Graphite-Spheroidization-Grinding-Mill.html&quot;/&gt;</span><br><span class="line">&lt;meta property=&quot;og:image&quot; content=&quot;http://image.made-in-china.com/2f0j00sJdQPUDMngkI/Ce-Approved-Superfine-Synthetic-Graphite-Spheroidization-Grinding-Mill.jpg&quot;/&gt;</span><br><span class="line">&lt;meta property=&quot;og:site_name&quot; content=&quot;Made-in-China.com&quot;/&gt;</span><br><span class="line">&lt;meta property=&quot;og:description&quot; content=&quot;This site would be your best choice when sourcing from China. Their buyer service is professional and it offers third party transaction service to protect your money&quot;/&gt;</span><br></pre></td></tr></table></figure><p>摘自网站<a href="http://leap-tech.en.made-in-china.com/product/gBvQXLzMCKcJ/China-Ce-Approved-Superfine-Synthetic-Graphite-Spheroidization-Grinding-Mill.html" target="_blank" rel="noopener">http://leap-tech.en.made-in-china.com/product/gBvQXLzMCKcJ/China-Ce-Approved-Superfine-Synthetic-Graphite-Spheroidization-Grinding-Mill.html</a> 通过og标签分别告知爬虫这个页面的title, url, image, description。 当页面有很多图片，可以通过og:image来告知社交网站采用哪张图片做缩略显示。</p><blockquote><p>前面的描述中，都用了告知，引导。 就像谷歌爬虫一样，社交网站的爬虫也只是<strong>尊重</strong>你的页面的设置，但是他们更依赖自己的算法。所以并不会100% follow。</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在测试的时候很容易碰见，分享的时候没有看见缩略图，内容没更新等等问题。很可能和各自的缓存有关，也可能是你的页面的内容不对。<br>Facebook有调试工具：<a href="https://developers.facebook.com/tools/debug/sharing" target="_blank" rel="noopener">https://developers.facebook.com/tools/debug/sharing</a><br><a href="https://developers.facebook.com/docs/sharing/best-practices" target="_blank" rel="noopener">https://developers.facebook.com/docs/sharing/best-practices</a></p><blockquote><p>分享facebook的时候有可能预览的图片不能及显示，方案可以参考: <a href="https://developers.facebook.com/docs/sharing/best-practices#precaching" target="_blank" rel="noopener">https://developers.facebook.com/docs/sharing/best-practices#precaching</a></p></blockquote><p>Linked in 的分享说明参考：<a href="https://developer.linkedin.com/docs/share-on-linkedin#" target="_blank" rel="noopener">https://developer.linkedin.com/docs/share-on-linkedin#</a> 注意最后提到的缓存。<br><img src="/assets/preimg/Web-Applications-Technologies/linkedin-share-cache.png" alt="Linkedin Share"></p><p>Twitter的工具参考：<a href="https://cards-dev.twitter.com/validator" target="_blank" rel="noopener">https://cards-dev.twitter.com/validator</a></p><p><strong>要想分享在Twitter上正常显示，下面的标签必须全部都加上。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta property=&quot;og:type&quot; content=&quot;website&quot;&gt;</span><br><span class="line">&lt;meta property=&quot;og:image&quot; content=&quot;your page image url&quot;/&gt;</span><br><span class="line">&lt;meta property=&quot;og:title&quot; content=&quot;Title of the page&quot;/&gt;</span><br><span class="line">&lt;meta property=&quot;og:description&quot; content=&quot;Description of your page&quot;/&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>同源策略下为什么还需要防御CSRF</title>
      <link href="/Web-Applications-Technologies/web-security-csrf/"/>
      <url>/Web-Applications-Technologies/web-security-csrf/</url>
      
        <content type="html"><![CDATA[<p>前面的章节<a href="/assets/preimg/Web-Applications-Technologies/cors-solution">搞定跨域资源共享 (CORS)</a>中我们提到了浏览器的同源的安全策略，就算允许跨域，也可以限制被允许的域；比如只限制同一个父域下面的子域名来访问资源。 为什么在这样的策略下面，我们依然需要应对CSRF（Cross Site Request Forgery，跨站请求伪造）？</p><p><strong>通过下面的两张图来快速理解CSRF的存在。</strong></p><p> <img src="/assets/preimg/Web-Applications-Technologies/csrf-form.jpg" alt="csrf-form.jpg"></p><blockquote><p>CSRF攻击的一个很好的例子可能是受害者最近在他们的银行登录帐户并且有效会话启动并运行的攻击。在登录时，会向用户发送一封假冒电子邮件作为他的银行。单击该电子邮件会将他发送到攻击者的站点，该站点的外观可能看起来像银行站点。实际上，该网站对真实银行的运营终端执行POST，以便汇款，将资金从受害者帐户转移到攻击者手中。由于用户的会话仍然有效，因此接受操作并且攻击成功。</p></blockquote><p> <img src="/assets/preimg/Web-Applications-Technologies/csrf.png" alt="csrf.png"></p><h2 id="演示CSRF的存在"><a href="#演示CSRF的存在" class="headerlink" title="演示CSRF的存在"></a>演示CSRF的存在</h2><p> 我们采用第二章图的方式来演示在同源策略下CSRF的示例。</p><p> 首先注册并登录： <a href="https://www.okchem.com/group-buying" target="_blank" rel="noopener">https://www.okchem.com/group-buying</a></p><p> 然后打开页面: <a href="http://corsweb.jiu-shu.com/csrf-chembnb-logout.html" target="_blank" rel="noopener">http://corsweb.jiu-shu.com/csrf-chembnb-logout.html</a> ，此页面会通过以下方式将用户的会话注销。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img style=&quot;display:none&quot; src=&quot;https://www.okchem.com/group-buying/logout&quot;&gt;</span><br></pre></td></tr></table></figure></p><p> 再次回到<a href="https://www.okchem.com/group-buying" target="_blank" rel="noopener">https://www.okchem.com/group-buying</a> 刷新页面，可以发现会话已经注销。</p><blockquote><p> 这里只是个简单的验证，消除疑虑，证明Web网站CRSF防御的存在的必要性。</p></blockquote><h2 id="阻止CSRF策略"><a href="#阻止CSRF策略" class="headerlink" title="阻止CSRF策略"></a>阻止CSRF策略</h2><p><strong>CSRF 的两个重要特点</strong></p><ul><li>伪造请求的网站必须利用用户在被攻击的网站的会话</li><li>伪造请求的网站并没有访问被攻击网站的页面 </li></ul><p><strong>策略一</strong> 从上可以看出，可以在form表单中添加csrf token，服务器端验证比对来防止csrf。</p><p><strong>另外两点和浏览器本身及同源策略有关的是</strong></p><ul><li>你在domain a 的页面发送一个请求向domain b的时候可以自动带上domain b的cookie。( 这点给了CSRF的机会)</li><li>你在domain a的页面无法读取domain b的cookie (这里引出了另一个策略)</li></ul><p><strong>策略二</strong> domain b的交易比对请求头中的csrf token和cookie中的token；b网站只需要在请求的时候从cookie中读取csrf token 放入请求头中个， 在服务器端进行比对即可。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Nodejs oauth2 结合 Spring Boot Oauth2 自建 Oauth2 Provider</title>
      <link href="/Web-Applications-Technologies/Spring-Boot-Oauth2-Provider-Nodejs-Client/"/>
      <url>/Web-Applications-Technologies/Spring-Boot-Oauth2-Provider-Nodejs-Client/</url>
      
        <content type="html"><![CDATA[<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>Spring Boot 官方文档 <a href="http://projects.spring.io/spring-security-oauth/docs/oauth2.html#resource-server-configuration" target="_blank" rel="noopener">Spring Security Oauth</a></p><p>org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerSecurityConfiguration.class  line 89<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">            .antMatchers(tokenEndpointPath).fullyAuthenticated()  // 写死了。。。。</span><br><span class="line">            .antMatchers(tokenKeyPath).access(configurer.getTokenKeyAccess())</span><br><span class="line">            .antMatchers(checkTokenPath).access(configurer.getCheckTokenAccess())</span><br></pre></td></tr></table></figure></p><h1 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h1><h2 id="配置Hosts"><a href="#配置Hosts" class="headerlink" title="配置Hosts"></a>配置Hosts</h2><p>为了更方便的区分，需要配置如下hosts：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1  auth.server.com  client.node.com  client.springboot.com</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/Web-Applications-Technologies/SEO-Public-Website-Practices/"/>
      <url>/Web-Applications-Technologies/SEO-Public-Website-Practices/</url>
      
        <content type="html"><![CDATA[<h1 id="网站-SEO-实践及注意事项"><a href="#网站-SEO-实践及注意事项" class="headerlink" title="网站 SEO 实践及注意事项"></a>网站 SEO 实践及注意事项</h1><p>提高页面的收录率及网站的排名。</p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ol><li>确保网页文件返回的文件头正确。 如：如果是404页面就一定是返回404文件头，如果返回错误，就会出问题的。也不要返回多个文件头。</li><li>代码中，除了&lt;!DOCTYPE声明外，请一律用小写；代码中不要有多余的换行和空格，这样凭空增加了页面的大小。</li><li>页面要尽量符合W3C标准。 如果不能做到的情况下，html标签一定要关闭，否则搜索引擎会直接略过它不能确定的内容；属性值必须带上英文双引号。</li><li>禁止使用隐藏链接。会被搜索引擎认为隐藏链接的做法，就是 <a>标签之间是空的，没有图片或者文字。比如：<a href="****"></a> </a></li><li>请尽量把页面中的CSS代码和 javascript代码外调。不能外调的，请尽量把代码往下挪。</li><li>一个网页中所有的链接都要尽量用绝对路径，除非影响性能或者一定需要用相对路径不可。</li><li>页面代码中，写在javascript中的链接，搜索引擎是可以读的，所以有什么不想搜索引擎收录的链接，万一要写在JS代码中的话，请把JS外调。</li><li>DIV的嵌套是不可避免的，但是在有嵌套的时候，请选择嵌套层级最少的那个方法。</li></ol><h2 id="URL-规范"><a href="#URL-规范" class="headerlink" title="URL 规范"></a>URL 规范</h2><ol><li>URL 全部小写；</li><li>URL中最好有关键词的存在，并且关键词之间用中划线连接；</li><li>URL 尽可能静态化，参数最多不能超过3个</li><li>使用 rel=”canonical”  链接元素指明首选网址。</li><li>网页的URL需要根据网页的结构，有一定的分类。 比如买家个人中心所有页面统一前缀 /buyer , 后台管理统一前缀 /admin 这样方便SEO的robots.txt 的配置</li></ol><h2 id="SiteMap"><a href="#SiteMap" class="headerlink" title="SiteMap"></a>SiteMap</h2><ol><li>网站必须有sitemap</li><li>根据语言的二级域名要分别创建各自的sitemap</li><li>sitemap中的<urlset> <url> <loc> 必填</loc></url></urlset></li></ol><h2 id="多语言"><a href="#多语言" class="headerlink" title="多语言"></a>多语言</h2><ol><li><html lang="en"> 标记当前页面语言</html></li><li>使用标签表明当前页面内容的语言 <meta http-equiv="content-language" content="pt"></li><li>使用 hreflang 设置语言和区域网址， 例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!HTML</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;alternate&quot; hreflang=&quot;en&quot; href=&quot;https://www.okchem.com/&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;alternate&quot; hreflang=&quot;es&quot; href=&quot;https://es.okchem.com/&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;alternate&quot; hreflang=&quot;pt&quot; href=&quot;https://pt.okchem.com/&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h2><ol><li>对于网页中图片的高或宽大于200像素的图片，一定要在代码中看到图片地址而且写上这张图片的高宽大小，以及alt文本和 title文本。 <img height="290" src=" " width="295" alt=" " title=" "> alt和title可以一样，但是不能堆砌关键词。</li><li>当链接对象是图片的时候，图片要有alt和title属性 <a href="****" title=" "> <img src=" " alt=" "> </a> <blockquote><p>在优化网站响应时间的各种方式中，压缩图片是性价比最高的手段，简单易行，见效高。 同时如果不考虑图片的大小，负面影响也很大。 如果自己没有好的压缩方式，可以通过google 的  <a href="https://developers.google.com/speed/pagespeed/insights" target="_blank" rel="noopener">Page Insights</a> 分析网页，同时帮助你压缩。另外图片的名称也不应该随意起名字，图片的链接也是SEO的一部分。</p></blockquote></li></ol><h2 id="网站响应时间"><a href="#网站响应时间" class="headerlink" title="网站响应时间"></a>网站响应时间</h2><p>网站相应时间无论从用户体验或者SEO的角度来讲都很重要。影响响应时间有很多因素：</p><ol><li>利用浏览器缓存;  </li><li>图片大小；一般情况所有图片必须经过压缩处理；一般来讲banner不能超过100k，缩略图不能超过15K。 优化图片可以通过压缩大图，合并小图减少网络请求</li><li>JS和CSS； 过多和过大的JS和CSS资源也同样会影响网页速度。合并压缩JS和CSS；适当异步加载JS都可以提高相应速度。（异步加载的JS不参与页面的渲染）</li><li>CDN 缓存静态资源；</li><li>独立静态资源的服务，提高浏览器并发</li></ol><h2 id="网站管理事项"><a href="#网站管理事项" class="headerlink" title="网站管理事项"></a>网站管理事项</h2><ol><li>网页上已存在的链接，如果需要撤消或更改，需要让SEO人员知道并确认；最好的情况是不要随便删除。变更URL的时候使用<strong>301</strong>重定向跳转，不要使用302。</li><li>链接的文本要和被链接的页面内容保持一致。</li><li><strong>可用性及响应速度；</strong> 不能宕机或者经常出现404页面</li><li><strong>擅用Robots.txt 文件。</strong>网站后台不需要展现给搜索引擎的目录，请用Robots.txt文件屏蔽。 应该形成习惯，把不需要让搜索引擎知道的目录，在网站的根目录下的robots.txt文件中屏蔽它。</li><li><strong>要用任何阻止大量爬虫访问的系统。</strong> 比如防采集系统不要用。虽然爬虫确实占了很大一部分的带宽，但是是有价值的。</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>慎用代码copy。  网站上的某些代码，对于网站功能方面是不会有影响的。但是可能是对搜索引擎爬虫有影响的。所以以下的代码copy是要注意的：比如：<title></title>       <meta>     <a href="rel=”nofollow”"></a></li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>对公网站研发的实践经验</title>
      <link href="/Web-Applications-Technologies/Public-Website-Practices/"/>
      <url>/Web-Applications-Technologies/Public-Website-Practices/</url>
      
        <content type="html"><![CDATA[<p>有过很多的面向员工系统经验的工程师，在开发一个面向客户的web网站的时候会面临和需要考虑的问题更多，也更复杂。下面列举在开发对公网站时候需要考虑的一些问题和实践。</p><h3 id="是否有SEO-需求"><a href="#是否有SEO-需求" class="headerlink" title="是否有SEO 需求"></a>是否有SEO 需求</h3><p>当有SEO需求的时候，在选择前端框架的时候，需要注意对SEO的支持。 各种流行的框架： React和Angularjs 等SPA的页面框架大部分在SEO方面都多少有些问题<br>SEO 优化：</p><ol><li>URL 静态化，可读性 (比如： products?category=shoes 可以静态化为/shoes/product, 对应的pattern为：/{category}/products)</li><li>页面布局，图片的URL，图片的alt信息 等都需要考虑</li><li>网站内的内链</li><li>异步使用的恰当，简单的链接更有助于网站收录<blockquote><p>SEO 的详细介绍请参考：<a href="/assets/preimg/Web-Applications-Technologies/%E7%BD%91%E7%AB%99SEO%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93">网站SEO优化最佳实践</a></p></blockquote></li></ol><h3 id="网页速度"><a href="#网页速度" class="headerlink" title="网页速度"></a>网页速度</h3><p>网页相应速度涉及用户体验，同时也会影响到SEO的排名， 可以通过<a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">Google Page Insights</a> 来检查网页速度相关问题。 一般优化网页速度的包括：</p><ol><li>优化图片。 优化图片一般都是性价比高的提速方案。 优化图片分为：<ul><li>优化格式，压缩大小。 （之前的做了一次产品的旧图片的压缩，但是还有其他图片需要进一步排查压缩，比如banner）</li><li>合并小图片，减少网络请求。将一个个小图片合并成一个大图片，用css 控制显示范围。</li><li>懒加载, 针对页面上图片比较多的情况， 比如转灯（bootstrap的carousel），默认情况是所有的图片请求都一直并发；当图片过多的时候对页面的相应影响很大，这个时候要考虑图片的懒加载机制。懒加载参考：<a href="/Web-Applications-Technologies/image-lazy-loading">页面懒加载机制</a></li></ul></li><li>合并压缩JS 和 CSS 。 （减小文件大小，减少网络请求）</li><li>CDN 的引入。 暂时不考虑付费的CND，但是针对jquery及bootstrap等知名的第三方资源，可以使用免费的CDN. (具体依赖预生产的测试来做最终决定)</li><li>代码优化。 代码优化比较难在短时间完成。但是可以逐步挑选重要的页面来优化：<br>a)    按需加载， js 引入位置，延迟/异步加载阻塞的js文件。<br>b)    优化cookie，减少cookie的体积<br>c)    Js css规范化</li><li>Nginx优化。 在查看webpagetest的结果的时候，发现https的握手时间也占了不少比例，针对nginx的ssl的优化也是必须的。（大数据新闻的图片慢有可能和这个有关，具体需要通过测试来验证） （made-in-china 网站仍旧采用的是http，在速度上有很大优势）</li><li>将静态资源的请求放入另外的domain来提高浏览器请求的并发 （效仿made-in-china 的做法）</li><li>页面静态化处理。 前面讲到的都和服务端代码无关，页面静态化处理主要是在服务端提前将页面生成静态的html文件，提高并发。 目前服务器相应时间并不是主要拖慢网页的因素，因此这个优先级不高。</li></ol><p><strong>综合来讲，主要思想是： 减少请求次数，减少文件大小，延迟请求，异步加载，CDN缓存，最小化https的开销。 最后在完成这些之后，更深一步去规范页面内容，JS CSS 最佳实践。</strong></p><h3 id="防止攻击"><a href="#防止攻击" class="headerlink" title="防止攻击"></a>防止攻击</h3><h4 id="Bot-Attack"><a href="#Bot-Attack" class="headerlink" title="Bot Attack"></a>Bot Attack</h4><p>如果网站里面有开放的POST接口，通过过一段时间就会遭遇Bot 攻击。<br>通常，添加验证码会是办法之一。 参考讨论<a href="https://stackoverflow.com/questions/15319942/preventing-bot-form-submission" target="_blank" rel="noopener">Preventing bot form submission</a> 采用google的<a href="https://www.google.com/recaptcha/intro/" target="_blank" rel="noopener">recaptcha</a> 也会是一个不错的方案。<br><a href="https://developers.google.com/recaptcha/intro" target="_blank" rel="noopener">开发者文档</a></p><h3 id="下载相关"><a href="#下载相关" class="headerlink" title="下载相关"></a>下载相关</h3><p>文件下载最好不要放在网站内， 可以放在云服务器上， 比如aws的s3， 或者其他云对象服务器上。<br>注意download的response 相关的header设置等。<br>比如： apk的下载， 有些浏览器无法智能的根据文件名后缀.apk来判断是安卓的安装程序。需要显示的设置： content-type： application/vnd.android.package-archive</p><h3 id="需要更多的手段来验证网站的可用性"><a href="#需要更多的手段来验证网站的可用性" class="headerlink" title="需要更多的手段来验证网站的可用性"></a>需要更多的手段来验证网站的可用性</h3><p>面向员工的系统，如果系统不可用，或者有任何问题发生，员工都会立马反应。（很可能他现在要提交个工单，提交不了，着急啊。。。） 然后面向光大客户的就不是了。 比如说， 淘宝现在用不了了，系统报错，你会想淘宝反应吗？ 我想你会去京东买了算了。。。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>利用Spring Boot Oauth2 来熟悉oauth2 之 - Authorization Code Grant</title>
      <link href="/Web-Applications-Technologies/Oauth2-Spring-Boot/"/>
      <url>/Web-Applications-Technologies/Oauth2-Spring-Boot/</url>
      
        <content type="html"><![CDATA[<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>rfc 文档： <a href="https://tools.ietf.org/html/rfc6749#section-4.1" target="_blank" rel="noopener">RFC 6749 - The OAuth 2.0 Authorization Framework</a></li><li>Spring boot oauth2 示例 <a href="https://spring.io/guides/tutorials/spring-boot-oauth2/" target="_blank" rel="noopener">Tutorial · Spring Boot and OAuth2</a></li></ul><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><p><a href="https://github.com/spring-guides/tut-spring-boot-oauth2" target="_blank" rel="noopener">https://github.com/spring-guides/tut-spring-boot-oauth2</a></p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>从RFC文档复制过来的流程图， 来辅助我们理解oauth2 的Authorization Code Grant<br><img src="/assets/preimg/Web-Applications-Technologies/oauth2-flow.jpg" alt="Authorization Code Grant"></p><h3 id="探究竟"><a href="#探究竟" class="headerlink" title="探究竟"></a>探究竟</h3><p>clone代码，将maven的工程（tut-spring-boot-oauth2\simple）导入eclipse跑起来。 </p><blockquote><p>You can also run all the apps on the command line using <code>mvn spring-boot:run</code> or by building the jar file and running it with mvn package and <code>java -jar target/*.jar</code> </p></blockquote><p>代码就一个文件，简单如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableOAuth2Sso</span><br><span class="line">public class SocialApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SocialApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接力于Spring Boot的Auto Configuration 的功能，我们不需要做任何的配置。</p></blockquote><p>由于引入了<code>spring-boot-starter-security</code> 默认情况下，所有的请求都需求登录。<br>Chrome打开<a href="http://localhost:8080，" target="_blank" rel="noopener">http://localhost:8080，</a> 并打开开发者工具，选中’Preserve log’; 浏览器将自动重定向到/login; 由于oauth2 client的引入，请求又再次被重定向至facebook进行授权；开始了授权的流程。</p><blockquote><p>在chrome的开发者工具中Network 标签， 按住CTRL/CMD 选中Doc和Other可以过滤掉大部分静态资源请求，方便我们来分析整个流程<br><img src="/assets/preimg/Web-Applications-Technologies/oauth2-requests.png" alt="oauth2-requests"></p></blockquote><h3 id="角色解释"><a href="#角色解释" class="headerlink" title="角色解释"></a>角色解释</h3><p>官方解释请参考：<a href="https://tools.ietf.org/html/rfc6749#page-6" target="_blank" rel="noopener">Oauth2 Roles</a><br><strong>在我们这个示例中：</strong></p><ul><li>Resource Owner： 人，也就是这个facebook 账号的所有人</li><li>User Agent： 这里就是Chrome 浏览器</li><li>Client：代表Owner去请求被保户的资源的应用（这里就是Spring Boot的Web App）</li><li>Resource Server： Facebook 授权能访问的资源服务（这里拿到access token后获取了用户的信息，没有访问其他的Resource Server）</li><li>Authorization Server： 集中授权服务器，负责验证access token</li></ul><h3 id="流程分解"><a href="#流程分解" class="headerlink" title="流程分解"></a>流程分解</h3><h4 id="1-请求资源服务首页"><a href="#1-请求资源服务首页" class="headerlink" title="1. 请求资源服务首页"></a>1. 请求资源服务首页</h4><p>请求资源首页：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>    Response 302 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Location:http://localhost:8080/login</span><br><span class="line">...</span><br><span class="line">Set-Cookie:JSESSIONID=8C24D287C93ECDE88C3D4BD7410668FB;path=/;HttpOnly</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="2-跳转至登录页面"><a href="#2-跳转至登录页面" class="headerlink" title="2.  跳转至登录页面"></a>2.  跳转至登录页面</h4><p>跳转至登录：<a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a>　　<br> <strong>Request Headers:</strong> <code>SESSIONID=8C24D287C93ECDE88C3D4BD7410668FB</code> <strong>Reponse Headers:</strong> <code>Location:https://www.facebook.com/dialog/oauth?client_id=233668646673605&amp;redirect_uri=http://localhost:8080/login&amp;response_type=code&amp;state=undAFm</code></p><h4 id="3-页面将跳转至facebook-开始Authorization-Code-Grant的流程-对应流程图中的步骤-A"><a href="#3-页面将跳转至facebook-开始Authorization-Code-Grant的流程-对应流程图中的步骤-A" class="headerlink" title="3. 页面将跳转至facebook,开始Authorization Code Grant的流程, 对应流程图中的步骤(A)"></a>3. 页面将跳转至facebook,开始Authorization Code Grant的流程, 对应流程图中的步骤(A)</h4><p> <strong><a href="https://www.facebook.com/dialog/oauth?client_id=233668646673605&amp;redirect_uri=http://localhost:8080/login&amp;response_type=code&amp;state=undAFm" target="_blank" rel="noopener">https://www.facebook.com/dialog/oauth?client_id=233668646673605&amp;redirect_uri=http://localhost:8080/login&amp;response_type=code&amp;state=undAFm</a></strong><br>请求的URL参数包括了用户的标识，本地生成的state以及授权成功后返回到资源服务的地址。response_type=code 标识了授权的类型是“Authorization Code Grant”</p><blockquote><p>The client includes  its client identifier, requested scope, local state, and a        redirection URI to which the authorization server will send the user-agent back once access is granted (or denied).  </p></blockquote><p><strong>Facebook未检测到任何用户登录信息，重定向至facebook的登录页面。</strong></p><h4 id="4-请求登录页面"><a href="#4-请求登录页面" class="headerlink" title="4. 请求登录页面"></a>4. 请求登录页面</h4><h4 id="5-输入账号信息后，点击登录后的post-请求"><a href="#5-输入账号信息后，点击登录后的post-请求" class="headerlink" title="5. 输入账号信息后，点击登录后的post 请求"></a>5. 输入账号信息后，点击登录后的post 请求</h4><p>登录成功后，重定向至facebook的oauth页面进行流程的（B）步骤</p><h4 id="6-登录成功后，进入oauth页面进入流程的-B"><a href="#6-登录成功后，进入oauth页面进入流程的-B" class="headerlink" title="6. 登录成功后，进入oauth页面进入流程的(B)"></a>6. 登录成功后，进入oauth页面进入流程的(B)</h4><p>截图是第二次尝试，由于第一次的时候用户针对当前client已经授权访问基本信息后。 在第二次登录后，授权的页面就不会出现， 而是直接重定向到被授权client的redirect_uri。流程中的(C) 也就同B一起在没有和用户交互的情况下完成了。</p><blockquote><p>C步骤中，服务器回应客户端的URI，包含以下参数：<br>code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。<br>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。</p></blockquote><h4 id="7-拿着facebook授权的code进行资源服务的login请求"><a href="#7-拿着facebook授权的code进行资源服务的login请求" class="headerlink" title="7. 拿着facebook授权的code进行资源服务的login请求"></a>7. 拿着facebook授权的code进行资源服务的login请求</h4><p>/login?code=<strong>**</strong>  Spring Boot Oauth2 拿到对应的code后，1)去facebook请求获取access token; 2)获取到对应的token信息后既可以通过token进一步获取用户相关信息（这两步的api 请求是在服务器端进行），进而完成<code>Spring Boot的Authentication</code>, 成功后重定向到请求1（第一步）；同时创建了新的session。</p><blockquote><p>从上面的步骤及截图的status code可以看出来整个oauth2的流程基本是在重定向中完成。3,4,5,6 分别与资源服务无关 （即：Spring Boot Web 应用无关）。 </p></blockquote><p>Spring是如何将authentication 导向/代理给 oauth2 client的？这些都在引入的依赖帮我们自动实现了。</p><h3 id="其他网络资源"><a href="#其他网络资源" class="headerlink" title="其他网络资源"></a>其他网络资源</h3><p><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">理解OAuth 2.0 - 阮一峰的网络日志</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>页面图片懒加载机制</title>
      <link href="/Web-Applications-Technologies/image-lazy-loading/"/>
      <url>/Web-Applications-Technologies/image-lazy-loading/</url>
      
        <content type="html"><![CDATA[<p>页面图片请求太多，影响整个页面的相应速度，采用懒加载机制可以提速。本文采用bootstrap的转灯carousel做为示例</p><h2 id="非懒加载"><a href="#非懒加载" class="headerlink" title="非懒加载"></a>非懒加载</h2><p>如果一个页面比较复杂, 转灯有几十上百个图片，无疑会很影响页面的性能。下面这个是笔者实际经历的，转灯有几十个slides, 图片就更多了，一次性的图片并发相当大，严重影响页面的响应速度。<br><img src="/assets/preimg/Web-Applications-Technologies/carousel-lazy-loading.jpg" alt="转灯延时加载"></p><p>下面的代码是bootstrap的转灯carousel的示例，通过chrome的开发者工具可以看到，会有三个image的request 发出。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Carousel Example<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myCarousel"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Indicators --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Wrapper for slides --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/portfolio-img1.jpg"</span> <span class="attr">alt</span>=<span class="string">"Los Angeles"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/portfolio-img2.jpg"</span> <span class="attr">alt</span>=<span class="string">"Chicago"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/portfolio-img3.jpg"</span> <span class="attr">alt</span>=<span class="string">"New york"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Left and right controls --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#myCarousel'</span>).on(<span class="string">'slide.bs.carousel'</span>,  <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> lazy;</span></span><br><span class="line"><span class="javascript">            lazy = $(ev.relatedTarget).find(<span class="string">"img[data-src]"</span>);</span></span><br><span class="line"><span class="javascript">            lazy.attr(<span class="string">"src"</span>, lazy.data(<span class="string">'src'</span>));</span></span><br><span class="line"><span class="javascript">            lazy.removeAttr(<span class="string">"data-src"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>通过chrome的开发者工具可以看到进入页面后初始只有第一个图片的请求产生。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Carousel Example<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myCarousel"</span> <span class="attr">class</span>=<span class="string">"carousel slide lazy"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Indicators --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Wrapper for slides --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/portfolio-img1.jpg"</span> <span class="attr">alt</span>=<span class="string">"Los Angeles"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"images/portfolio-img2.jpg"</span> <span class="attr">alt</span>=<span class="string">"Chicago"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"images/portfolio-img3.jpg"</span> <span class="attr">alt</span>=<span class="string">"New york"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Left and right controls --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#myCarousel'</span>).on(<span class="string">'slide.bs.carousel'</span>,  <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> lazy;</span></span><br><span class="line"><span class="javascript">            lazy = $(ev.relatedTarget).find(<span class="string">"img[data-src]"</span>);</span></span><br><span class="line"><span class="javascript">            lazy.attr(<span class="string">"src"</span>, lazy.data(<span class="string">'src'</span>));</span></span><br><span class="line"><span class="javascript">            lazy.removeAttr(<span class="string">"data-src"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Http Cookie 探索</title>
      <link href="/Web-Applications-Technologies/Http-Cookie-Technologies/"/>
      <url>/Web-Applications-Technologies/Http-Cookie-Technologies/</url>
      
        <content type="html"><![CDATA[<p>Meta 信息不见了</p><p>参考：<br><a href="http://blog.csdn.net/lijing198997/article/details/9378047" target="_blank" rel="noopener">http://blog.csdn.net/lijing198997/article/details/9378047</a><br><a href="http://stackoverflow.com/questions/1062963/how-do-browser-cookie-domains-work" target="_blank" rel="noopener">http://stackoverflow.com/questions/1062963/how-do-browser-cookie-domains-work</a><br><strong>Domain and Path</strong><br>作用：定义Cookie的生效作用域，只有当域名和路径同时满足的时候，浏览器才会将Cookie发送给Server。如果没有设置Domain和Path的话，他们会被默认为当前请求页面对应值。 </p><blockquote><p>Cookie with Domain=.example.com will be available for <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a><br>Cookie with Domain=.example.com will be available for example.com<br>Cookie with Domain=example.com will be converted to .example.com and thus will also be available for <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a><br>Cookie with Domain=example.com will not be available for anotherexample.com<br>跨域的请求是无法设置cookie的。 （）</p></blockquote><p><strong>Example：</strong></p><h3 id="Tomcat-Java-Web-App通过服务端来设置浏览器cookie"><a href="#Tomcat-Java-Web-App通过服务端来设置浏览器cookie" class="headerlink" title="Tomcat Java Web App通过服务端来设置浏览器cookie"></a>Tomcat Java Web App通过服务端来设置浏览器cookie</h3><p>服务端在请求的返回中向客户端的浏览器添加cookie。 </p><blockquote><p>示例的服务的context path 为/bee</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/cookietest&quot;, headers = &quot;Accept=image/**&quot;, method = RequestMethod.GET)</span><br><span class="line">public ResponseEntity&lt;?&gt; cookieTest(final HttpServletRequest request,HttpServletResponse response) &#123;</span><br><span class="line">Cookie cookie1 = new Cookie(&quot;cookie-1&quot;,UUID.randomUUID().toString());</span><br><span class="line">cookie1.setDomain(&quot;diaoyouyun.com&quot;);</span><br><span class="line">cookie1.setPath(&quot;/&quot;);</span><br><span class="line">response.addCookie(cookie1);</span><br><span class="line"></span><br><span class="line">Cookie cookie2 = new Cookie(&quot;cookie2&quot;,&quot;Cookie2&quot;);</span><br><span class="line">cookie2.setDomain(&quot;www.diaoyouyun.com&quot;);</span><br><span class="line">cookie2.setPath(&quot;/bee/collect&quot;);</span><br><span class="line">response.addCookie(cookie2);</span><br><span class="line"></span><br><span class="line">Cookie cookie3 = new Cookie(&quot;cookie3&quot;,&quot;cookie3&quot;);</span><br><span class="line">cookie3.setDomain(&quot;www.example.com&quot;);</span><br><span class="line">response.addCookie(cookie3);</span><br><span class="line"></span><br><span class="line">Cookie cookie4 = new Cookie(&quot;cookie4&quot;,&quot;cookie4&quot;);</span><br><span class="line">response.addCookie(cookie4);</span><br><span class="line">   return ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h3><p>请求 <a href="http://diaoyouyun.com/bee/cookietest" target="_blank" rel="noopener">http://diaoyouyun.com/bee/cookietest</a> 如下：<br><img src="/assets/preimg/Web-Applications-Technologies/cookie-1.png" alt="cookietest"></p><p>那些cookie会被接受呢？访问<a href="http://diaoyouyun.com/bee" target="_blank" rel="noopener">http://diaoyouyun.com/bee</a> 从下图可以看出<br><img src="/assets/preimg/Web-Applications-Technologies/cookie-2.png" alt="Cookies_http://diaoyouyun.com"></p><p>访问<a href="http://www.diaoyouyun.com/bee/来查看有哪些cookie" target="_blank" rel="noopener">http://www.diaoyouyun.com/bee/来查看有哪些cookie</a><br><img src="/assets/preimg/Web-Applications-Technologies/cookie-3.png" alt="cookies"></p><p><strong>关于Java Tomcat 服务端Set-Cookie: 可以得出以下结论：</strong></p><ol><li>不显示地设置domain，浏览器接受去当年请求的domain，但是前面不加点（.）。即：如果当前请求domain是example.com,那么这个cookie就不能被<a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 或者其他***.example.com访问到.</li><li>显示设置domain，只有设置正确的情况，cookie才会被浏览器接受</li></ol><h3 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h3><blockquote><p>测试前清空相关站点的cookie</p></blockquote><p>通过请求：<a href="http://www.diaoyouyun.com/bee/cookietest" target="_blank" rel="noopener">http://www.diaoyouyun.com/bee/cookietest</a> 来设置cookie<br><img src="/assets/preimg/Web-Applications-Technologies/cookie-4.png" alt="Request"><br>访问<a href="http://www.diaoyouyun.com/bee/" target="_blank" rel="noopener">http://www.diaoyouyun.com/bee/</a><br><img src="/assets/preimg/Web-Applications-Technologies/cookie-5.png" alt="cookies"><br>发现还是只有cookie-1和cookie4， 但是其实<strong>cookie2 也被浏览器接受了，只是cookie2 设置的path是/bee/collect 所以基于当前访问路径（<a href="http://www.diaoyouyun.com/bee/）chrome的开放工具中无法查看到cookie2。通过查看浏览器上所有站点cookie内容，可以在www.diaoyouyun.com" target="_blank" rel="noopener">http://www.diaoyouyun.com/bee/）chrome的开放工具中无法查看到cookie2。通过查看浏览器上所有站点cookie内容，可以在www.diaoyouyun.com</a> 中找到cookie2。 （</strong>反思：**测试一的 cookie2 是否真的未被接受？）</p><p>访问<a href="http://diaoyouyun.com/bee/" target="_blank" rel="noopener">http://diaoyouyun.com/bee/</a> 查看cookie发现只有cookie-1。（cookie4是子域名下的） </p><h3 id="测试三-cookie2-在测试一是否真的未设置成功"><a href="#测试三-cookie2-在测试一是否真的未设置成功" class="headerlink" title="测试三  cookie2 在测试一是否真的未设置成功"></a>测试三  cookie2 在测试一是否真的未设置成功</h3><p>cookie2 是path导致的无法查看到? 将path修改后再次走一遍测试一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie2.setPath(&quot;/&quot;);</span><br></pre></td></tr></table></figure></p><p><img src="/assets/preimg/Web-Applications-Technologies/cookie-6.png" alt="cookie-path"><br>经过验证，cookies2未设置成功</p><h3 id="测试四-跨域请求无法设置cookie"><a href="#测试四-跨域请求无法设置cookie" class="headerlink" title="测试四 跨域请求无法设置cookie"></a>测试四 跨域请求无法设置cookie</h3><p>以下请求是无法设置cookie的</p><p><img src="/assets/preimg/Web-Applications-Technologies/cookie-7.png" alt="cookie-cross-domain"><br>上面的请求cookie1 2 3 4 都无法设置成功。<br>如果在浏览器直接访问<a href="http://api/diaoyouyun.com/bee/cookietest" target="_blank" rel="noopener">http://api/diaoyouyun.com/bee/cookietest</a> cookie1 和cookie4 可以添加成功</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>子域名请求可以设置父域名下cookie。即：<a href="http://www.diaoyouyun.com的请求可以设置cookie" target="_blank" rel="noopener">www.diaoyouyun.com的请求可以设置cookie</a> （domain=diaoyouyun.com，所有diaoyouyun.com及其子域名下site都能查看）</li><li>父级域名的请求<strong>不能设置</strong>子域名的cookie。 即：<a href="http://diaoyouyun.com/*" target="_blank" rel="noopener">http://diaoyouyun.com/*</a>* 的请求无法设置cookie(domain=<a href="http://www.diaoyouyun.com)。" target="_blank" rel="noopener">www.diaoyouyun.com)。</a> 简化记忆可以理解为，有子肯定存在父，反过来就不成立了。</li><li>跨域的请求是无法成功设置cookie的。</li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Google Analytics 知识点汇总</title>
      <link href="/Web-Applications-Technologies/google-analytics-notes/"/>
      <url>/Web-Applications-Technologies/google-analytics-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="使用GA来分析网站的数据"><a href="#使用GA来分析网站的数据" class="headerlink" title="使用GA来分析网站的数据"></a>使用GA来分析网站的数据</h1><h2 id="推广链接的参数"><a href="#推广链接的参数" class="headerlink" title="推广链接的参数"></a>推广链接的参数</h2><p>参考 <a href="https://support.google.com/analytics/answer/1033863?hl=zh-Hans" target="_blank" rel="noopener">自定义广告系列 - Google Analytics（分析）帮助</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>资源收集</title>
      <link href="/Web-Applications-Technologies/development-resources/"/>
      <url>/Web-Applications-Technologies/development-resources/</url>
      
        <content type="html"><![CDATA[<h3 id="网站收集"><a href="#网站收集" class="headerlink" title="网站收集"></a>网站收集</h3><ol><li>国家旗帜图标：<a href="https://countryflags.io/" target="_blank" rel="noopener">https://countryflags.io/</a></li></ol><h3 id="JS-库"><a href="#JS-库" class="headerlink" title="JS 库"></a>JS 库</h3><h4 id="Bootstrap-TagsInput"><a href="#Bootstrap-TagsInput" class="headerlink" title="Bootstrap TagsInput"></a>Bootstrap TagsInput</h4><p><a href="http://bootstrap-tagsinput.github.io/bootstrap-tagsinput/examples/" target="_blank" rel="noopener">http://bootstrap-tagsinput.github.io/bootstrap-tagsinput/examples/</a></p><h4 id="url-js"><a href="#url-js" class="headerlink" title="url.js"></a>url.js</h4><p><a href="https://github.com/jillix/url.js" target="_blank" rel="noopener">https://github.com/jillix/url.js</a></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="Eclise-插件"><a href="#Eclise-插件" class="headerlink" title="Eclise  插件"></a>Eclise  插件</h4><ol><li>资源文件（.properties 去重，多个语言并列编辑）  插件  ResourceBundle Editor</li></ol><h4 id="爬虫工具"><a href="#爬虫工具" class="headerlink" title="爬虫工具"></a>爬虫工具</h4><p>火车头</p><h4 id="大文件拆分"><a href="#大文件拆分" class="headerlink" title="大文件拆分"></a>大文件拆分</h4><p>用notepad++ 64 位版</p><h3 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h3><h4 id="Json-to-Excel"><a href="#Json-to-Excel" class="headerlink" title="Json to Excel"></a>Json to Excel</h4><p><a href="https://json-csv.com/" target="_blank" rel="noopener">https://json-csv.com/</a></p><h4 id="Excel-To-Json"><a href="#Excel-To-Json" class="headerlink" title="Excel To Json"></a>Excel To Json</h4><p><a href="https://codebeautify.org/excel-to-json" target="_blank" rel="noopener">https://codebeautify.org/excel-to-json</a></p><h4 id="Json-Validation"><a href="#Json-Validation" class="headerlink" title="Json Validation"></a>Json Validation</h4><p><a href="https://jsonlint.com/" target="_blank" rel="noopener">https://jsonlint.com/</a></p><h4 id="Excel-转-Markdown-Table"><a href="#Excel-转-Markdown-Table" class="headerlink" title="Excel 转 Markdown Table"></a>Excel 转 Markdown Table</h4><p><a href="http://www.tablesgenerator.com/markdown_tables" target="_blank" rel="noopener">http://www.tablesgenerator.com/markdown_tables</a></p><h3 id="在线CMS"><a href="#在线CMS" class="headerlink" title="在线CMS"></a>在线CMS</h3><p><a href="https://www.odoo.com/zh_CN/" target="_blank" rel="noopener">https://www.odoo.com/zh_CN/</a></p><h3 id="Chrome-插件"><a href="#Chrome-插件" class="headerlink" title="Chrome 插件"></a>Chrome 插件</h3><h4 id="Run-Javascript"><a href="#Run-Javascript" class="headerlink" title="Run Javascript"></a>Run Javascript</h4><p>可以在登录后获取到会话，通过Run Javascript来爬取需要登录的API</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>搞定跨域资源共享 (CORS)</title>
      <link href="/Web-Applications-Technologies/cors-solution/"/>
      <url>/Web-Applications-Technologies/cors-solution/</url>
      
        <content type="html"><![CDATA[<p>通过多个Nodejs Web App一步步来深入了解CORS每个细节，每步都通过实际的验证；最终给出Nodejs Express Web和Java Spring Web的代码示例。</p><p>测试CORS代码库： <a href="git@github.com:choelea/cors-tester.git">git@github.com:choelea/cors-tester.git</a></p><p><img src="/assets/preimg/Web-Applications-Technologies/cors-font-request.png" alt="cors"></p><h2 id="什么是CORS"><a href="#什么是CORS" class="headerlink" title="什么是CORS"></a>什么是CORS</h2><p>解释这个概念之前先要认识下什么是 域(Origin)。</p><h3 id="什么是Origin"><a href="#什么是Origin" class="headerlink" title="什么是Origin"></a>什么是Origin</h3><p>域是 协议(http/https)+域名+端口的组合。 <code>An origin is defined as a combination of URI scheme, host name, and port number.</code>摘自：<a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Same-origin_policy</a></p><blockquote><p>这个是一个标准，但不是所有浏览器的所有版本都严格执行了，特别是关于端口这点。</p></blockquote><p>通过下面的表可以更直观的认识到什么才是’<strong>同一个域(同源)</strong>‘。(图标截自维基百科)<br><img src="/assets/preimg/Web-Applications-Technologies/same-origin-table.png" alt="Same Origin Metric"></p><h3 id="CORS-定义"><a href="#CORS-定义" class="headerlink" title="CORS 定义"></a>CORS 定义</h3><p>Cross-origin resource sharing (CORS)； 跨域资源共享（CORS）是一种机制，这种机制在允许在网页中请求另一个域<strong>受限制</strong>的资源。<br>摘自维基百科: <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Cross-origin_resource_sharing</a></p><blockquote><p>这里的受限制并不是说这些资源需要登录厚着授权等</p></blockquote><h2 id="哪些资源是默认可以跨域的"><a href="#哪些资源是默认可以跨域的" class="headerlink" title="哪些资源是默认可以跨域的"></a>哪些资源是默认可以跨域的</h2><p>上面定义提到了”受限制”, 也就是说不是所有的跨域资源需要CORS机制。在不做任何设置的的时候，默认图片, css, js 等请求都是可以跨域的。</p><blockquote><p>如果你的css有针对字体的请求，你会发现字体请求<strong>默认</strong>也是受到<strong>同源机制</strong>的限制；包括js 和css对应的map文件的请求都无法跨域访问。</p></blockquote><h4 id="AJAX请求可以吗"><a href="#AJAX请求可以吗" class="headerlink" title="AJAX请求可以吗"></a>AJAX请求可以吗</h4><p>浏览器打开<code>http://corsdisableapi.jiu-shu.com/users</code>可以获取到json结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;Joe&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;Mark&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>但是我们打开页面<code>http://corsweb.jiu-shu.com/public-resources.html</code> (或者任何其他域),在console里面做出如下请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&apos;GET&apos;, &apos;http://corsdisableapi.jiu-shu.com/users&apos;); </span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></p><p>你会发现console报出了如下的错误; 很明显请求是收到<strong>同源机制</strong>的限制。<br><img src="/assets/preimg/Web-Applications-Technologies/cors-policy-error.png" alt="cors policy error"></p><p>打开页面<a href="http://corsweb.jiu-shu.com/public-resources.html" target="_blank" rel="noopener">http://corsweb.jiu-shu.com/public-resources.html</a> 通过源代码和开发者工具理解这一节知识。</p><h2 id="开启CORS"><a href="#开启CORS" class="headerlink" title="开启CORS"></a>开启CORS</h2><p>很明显很多时候我们必须有个策略来<strong>突破/放宽</strong>同源政策的限制； 比如Web页面<a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 需要请求api.example.com的资源；比如：PC站<a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 和M站m.example.com 需要共同获取/修改api.example.com的资源。</p><blockquote><p>CORS 只是<strong>突破/放宽同源政策</strong>中的一个种, 其他具体可以参考： <a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Same-origin_policy</a></p></blockquote><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS的标准，就可以跨源通信。</p><h3 id="服务端开启CORS"><a href="#服务端开启CORS" class="headerlink" title="服务端开启CORS"></a>服务端开启CORS</h3><p>这里示例代码均采用nodejs express 的web应用，使用<a href="https://www.npmjs.com/package/cors" target="_blank" rel="noopener">cors</a>组件即可轻松实现服务端开启CORS。<br>将之前的corsdisableapi.jiu-shu.com服务复制一份增加CORS的支持，以corsenable.jiu-shu.com这个域来提供；然后访问页面<a href="http://corsweb.jiu-shu.com/request-cors-resources.html" target="_blank" rel="noopener">http://corsweb.jiu-shu.com/request-cors-resources.html</a> 对比前面一个页面 <a href="http://corsweb.jiu-shu.com/public-resources.html" target="_blank" rel="noopener">http://corsweb.jiu-shu.com/public-resources.html</a> 可以发现之前浏览器console抛出的cors相关的错误全部消失了。</p><h2 id="浏览器的两种CORS请求"><a href="#浏览器的两种CORS请求" class="headerlink" title="浏览器的两种CORS请求"></a>浏览器的两种CORS请求</h2><p>大部分有些了解CORS都听过OPTION请求; 也叫”预检”请求（preflight）。但是前面的页面<a href="http://corsweb.jiu-shu.com/request-cors-resources.html" target="_blank" rel="noopener">http://corsweb.jiu-shu.com/request-cors-resources.html</a> 中的跨域的请求，通过开发者工具查看，在network这个标签中无法找到OPTION的请求。这是因为CORS有两种请求：简单请求和非简单请求；简单请求是不需要<strong>预检</strong>请求的。 但是无论是什么CORS请求，浏览器都会自动加上Origin这个header。</p><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>一般来说满足下面的有可能是简单请求。</p><ul><li>请求方法是 HEAD/GET/POST</li><li>HTTP的头信息中没有自定义的Header；Content-Type不能是application/json</li></ul><p>简单请求，浏览器只需要发出一个请求就可以拿到想要的结果。</p><blockquote><p>暂时没有完全找到简单请求的完整定于及所有场景，但是一般情况我们不需要考虑，因为你一定需要支持非简单请求的情况。</p></blockquote><h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><p>非简单请求就需要”预检”请求(preflight); 浏览器根据preflight的结果来决定下一个正式请求<strong>是否可以发</strong>以及<strong>怎么发</strong>。</p><p>访问页面<a href="http://corsweb.jiu-shu.com/request-cors-resources.html" target="_blank" rel="noopener">http://corsweb.jiu-shu.com/request-cors-resources.html</a> 打开console输入下面请求，观察网络请求，可以发现两个请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&apos;GET&apos;, &apos;http://corsenableapi.jiu-shu.com/users&apos;); </span><br><span class="line">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/json&apos;);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></p><h2 id="CORS相关字段"><a href="#CORS相关字段" class="headerlink" title="CORS相关字段"></a>CORS相关字段</h2><p>理解上面之后我们需要开始了解头信息中和CORS相关的字段，这些字段都是Access-Control-开头。</p><h3 id="预检请求的相关字段"><a href="#预检请求的相关字段" class="headerlink" title="预检请求的相关字段"></a>预检请求的相关字段</h3><p><strong>Access-Control-Request-Method</strong><br>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法。</p><p><strong>Access-Control-Request-Headers</strong><br>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段。</p><h3 id="响应的相关字段"><a href="#响应的相关字段" class="headerlink" title="响应的相关字段"></a>响应的相关字段</h3><p><strong>Access-Control-Allow-Origin</strong><br>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p><p><strong>Access-Control-Allow-Methods</strong><br>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了配合Access-Control-Max-Age来避免多次”预检”请求。</p><p><strong>Access-Control-Allow-Headers</strong><br>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p><p><strong>Access-Control-Allow-Credentials</strong><br>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p><blockquote><p>这个设置是容易被忽视的，同时也需要前端配合的。一个很容易想到的场景就是Session会话，Session会话往往是以secure的cookie的形式存在，当你的网站有多个子域名，而这些子域名都共享一个会话的时候，你的AJAX的CORS请求就需要带上Cookie。如果前端用的是Jquery，可以参考：<a href="https://www.html5rocks.com/en/tutorials/cors/#toc-cors-from-jquery" target="_blank" rel="noopener">https://www.html5rocks.com/en/tutorials/cors/#toc-cors-from-jquery</a></p></blockquote><blockquote><p>当开启Credentials的时候，为了安全考虑，浏览器要求Access-Control-Allow-Origin 必须制定值不能用<code>*</code>，否则会得到如下的错误</p></blockquote><p><img src="/assets/preimg/Web-Applications-Technologies/credentials-restrict-specific-origin.png" alt="credentials restrict specific origin"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&apos;GET&apos;, &apos;http://corssession.jiu-shu.com/viewhistories&apos;); </span><br><span class="line">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/json&apos;);</span><br><span class="line">xhr.withCredentials = true;</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p><strong>Access-Control-Max-Age</strong><br>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p><p><strong>Access-Control-Expose-Headers</strong><br>该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。</p><h2 id="解决CORS问题的两个步骤"><a href="#解决CORS问题的两个步骤" class="headerlink" title="解决CORS问题的两个步骤"></a>解决CORS问题的两个步骤</h2><ul><li>确定服务端响应字段是否正确</li><li>如果服务端响应字段正确，确定客户端是否正确发送了请求，需要的header是否都带上了，需要的cookie是否带上了</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>介绍了这么多，是时候来点干货 了。。。</p><h3 id="好的CORS需求如下"><a href="#好的CORS需求如下" class="headerlink" title="好的CORS需求如下"></a>好的CORS需求如下</h3><ul><li>只允许制定的域访问 (CORS请求中的Origin如果通过，就原样设置回Access-Control-Allow-Origin)</li><li>CORS请求需要带上Cookie</li><li>减少不必要的预检请求 (Access-Control-Max-Age  需要用)</li></ul><h3 id="Nodejs-Express-Web的代码"><a href="#Nodejs-Express-Web的代码" class="headerlink" title="Nodejs Express Web的代码"></a>Nodejs Express Web的代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const cors = require(&apos;cors&apos;);</span><br><span class="line">...</span><br><span class="line">const corsOptioin = &#123;</span><br><span class="line">  &quot;origin&quot;: /\.jiu-shu\.com$/, // jiu-shu.com 的所有子域名</span><br><span class="line">  &quot;methods&quot;: &quot;GET,HEAD,PUT,PATCH,POST,DELETE&quot;,</span><br><span class="line">  &quot;optionsSuccessStatus&quot;: 204,</span><br><span class="line">&quot;allowedHeaders&quot;:&quot;X-Csrf-Token, X-Requested-With&quot;, // 给出你允许的所有的Header</span><br><span class="line">  &quot;credentials&quot;:true, // 服务端可以让你带上Cookie，如果没带上就去检查你的前端代码</span><br><span class="line">  &quot;maxAge&quot;:3600  // 一个小时内预检一次就OK啦</span><br><span class="line">&#125;;</span><br><span class="line">app.use(cors(corsOptioin));</span><br></pre></td></tr></table></figure><h3 id="Java-Spring-Web的代码"><a href="#Java-Spring-Web的代码" class="headerlink" title="Java Spring Web的代码"></a>Java Spring Web的代码</h3><p> 非Spring 的也同这个相似。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;cors.origins.pattern&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String originPattern;  <span class="comment">// (.+\\.)*lichao\\.com</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123; </span><br><span class="line">        Pattern hostAllowedPattern = Pattern.compile(originPattern, Pattern.CASE_INSENSITIVE);</span><br><span class="line">    String origin = request.getHeader(<span class="string">"Origin"</span>);</span><br><span class="line">    <span class="keyword">if</span>(origin!=<span class="keyword">null</span>) &#123;    </span><br><span class="line">    <span class="keyword">if</span> (hostAllowedPattern.matcher(origin).matches()) &#123;</span><br><span class="line">    response.addHeader(<span class="string">"Access-Control-Allow-Origin"</span>, origin);<span class="comment">// (CORS请求中的Origin如果通过，就原样设置回Access-Control-Allow-Origin)</span></span><br><span class="line">    response.addHeader(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"GET, OPTIONS, HEAD, PUT, POST, DELETE"</span>); </span><br><span class="line">    response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">    response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">    <span class="keyword">if</span> (request.getMethod().equals(<span class="string">"OPTIONS"</span>)) &#123;</span><br><span class="line">    <span class="comment">// response.addHeader("Access-Control-Allow-Headers", request.getHeader("Access-Control-Request-Headers"));</span></span><br><span class="line">response.addHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"locale, X-Csrf-Token, X-Requested-With"</span>); <span class="comment">// List All</span></span><br><span class="line">    response.setStatus(HttpServletResponse.SC_ACCEPTED);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Throw 403 status OR send default allow</span></span><br><span class="line">    response.addHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"https://www.jiu-shu.com"</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">    &#125; </span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章: </p><p><a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Same-origin_policy</a></p><p><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Cross-origin_resource_sharing</a></p><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a></p><p><a href="https://blog.csdn.net/guodengh/article/details/73187908?locationNum=7&amp;fps=1" target="_blank" rel="noopener">https://blog.csdn.net/guodengh/article/details/73187908?locationNum=7&amp;fps=1</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>AWS 亚马逊云解决方案 - 动态压缩图片</title>
      <link href="/Web-Applications-Technologies/aws-resize-on-fly/"/>
      <url>/Web-Applications-Technologies/aws-resize-on-fly/</url>
      
        <content type="html"><![CDATA[<h1 id="动态根据请求的尺寸生成图片"><a href="#动态根据请求的尺寸生成图片" class="headerlink" title="动态根据请求的尺寸生成图片"></a>动态根据请求的尺寸生成图片</h1><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p><img src="/assets/preimg/Web-Applications-Technologies/aws-resize-on-fly-architech.jpg" alt="动态压缩图片"></p><p><strong>流程如下</strong></p><ol><li>用户向S3的桶（静态网站）发起resize的资源请求，桶设置了对应rule将不存在对应尺寸的资源重定向至OKCHEM-S3 (nodejs APP)</li><li>由于对应的资源不存在，重定向至OKCHEM-S3</li><li>浏览器向OKCHEM-S3发起请求</li><li>OKCHEM-S3 根据请求将图片进行resize， 然后上传至对应的桶</li><li>OKCHEM-S3 在完成上传后，永久重定向（301）到S3的URL。 （这个时候S3已经有了对应的资源）</li><li>下次再次访问同样的资源，S3直接返回</li></ol><p>参考： <a href="https://aws.amazon.com/cn/blogs/compute/resize-images-on-the-fly-with-amazon-s3-aws-lambda-and-amazon-api-gateway/" target="_blank" rel="noopener">https://aws.amazon.com/cn/blogs/compute/resize-images-on-the-fly-with-amazon-s3-aws-lambda-and-amazon-api-gateway/</a>   文章中缺失了关于API Gateway 部分的详细步骤。</p><h2 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h2><p><a href="http://YOUR_BUCKET_WEBSITE_HOSTNAME_HERE/300×300/blue_marble.jpg" target="_blank" rel="noopener">http://YOUR_BUCKET_WEBSITE_HOSTNAME_HERE/300×300/blue_marble.jpg</a></p><blockquote><p>注意，S3 host static website的时候只支持http不支持https。 <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteEndpoints.html，" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteEndpoints.html，</a> 因此如果网站是https的，那么就需要采取CDN策略。</p></blockquote><h2 id="关键代码："><a href="#关键代码：" class="headerlink" title="关键代码："></a>关键代码：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">'aws-sdk'</span>);</span><br><span class="line">AWS.config.update(config.aws)</span><br><span class="line"><span class="keyword">const</span> S3 = <span class="keyword">new</span> AWS.S3(&#123;</span><br><span class="line">  signatureVersion: <span class="string">'v4'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> Sharp = <span class="built_in">require</span>(<span class="string">'sharp'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Resize And upload to S3 */</span></span><br><span class="line">router.get(<span class="string">'/:BUCKET/resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> BUCKET = req.params.BUCKET;</span><br><span class="line">  <span class="keyword">const</span> URL = config.s3Hosts[BUCKET];</span><br><span class="line">  <span class="keyword">const</span> key = req.query.key;</span><br><span class="line">  <span class="keyword">const</span> match = key.match(<span class="regexp">/((\d+)x(\d+))\/(.*)/</span>);</span><br><span class="line">  <span class="keyword">const</span> dimensions = match[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> width = <span class="built_in">parseInt</span>(match[<span class="number">2</span>], <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> height = <span class="built_in">parseInt</span>(match[<span class="number">3</span>], <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> originalKey = match[<span class="number">4</span>];</span><br><span class="line">  S3.getObject(&#123;<span class="attr">Bucket</span>: BUCKET, <span class="attr">Key</span>: originalKey&#125;).promise()</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> Sharp(data.Body)</span><br><span class="line">      .resize(width, height)</span><br><span class="line">      .toFormat(<span class="string">'png'</span>)</span><br><span class="line">      .toBuffer()</span><br><span class="line">    )</span><br><span class="line">    .then(<span class="function"><span class="params">buffer</span> =&gt;</span> S3.putObject(&#123;</span><br><span class="line">        Body: buffer,</span><br><span class="line">        Bucket: BUCKET,</span><br><span class="line">        ContentType: <span class="string">'image/png'</span>,</span><br><span class="line">        Key: key,</span><br><span class="line">      &#125;).promise()</span><br><span class="line">    )</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      res.redirect(<span class="number">301</span>, <span class="string">`<span class="subst">$&#123;URL&#125;</span>/<span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> callback(err))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><h1 id="AWS-Congito-User-Identity-and-Access-Management"><a href="#AWS-Congito-User-Identity-and-Access-Management" class="headerlink" title="AWS Congito - User Identity and Access Management"></a>AWS Congito - User Identity and Access Management</h1><p>应用程序的域将为 https://&lt;domain_prefix&gt;.auth.<region>.amazoncognito.com。<br>您的应用程序的完整 URL 类似于此示例：<a href="https://example.auth.us-east-1.amazoncognito.com/login?redirect_uri=https://www.google.com&amp;response_type=code&amp;client_id=" target="_blank" rel="noopener">https://example.auth.us-east-1.amazoncognito.com/login?redirect_uri=https://www.google.com&amp;response_type=code&amp;client_id=</a>&lt;client_id_value&gt;</region></p><p>参考：<a href="https://docs.aws.amazon.com/zh_cn/cognito/latest/developerguide/cognito-user-pools-assign-domain.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/zh_cn/cognito/latest/developerguide/cognito-user-pools-assign-domain.html</a></p><p>这里如果要修改域名, 比如把<a href="https://example.auth.us-east-1.amazoncognito.com" target="_blank" rel="noopener">https://example.auth.us-east-1.amazoncognito.com</a> 改成 <a href="https://auth.example.com" target="_blank" rel="noopener">https://auth.example.com</a>, 就必须使用 类似  <a href="https://en.wikipedia.org/wiki/Domain_masking" target="_blank" rel="noopener">Domain masking</a> 这种手段， 好在Godaddy 这个域名提供商有个更简洁的方案：参考视频: <a href="https://www.youtube.com/watch?v=Cfk_clv1_nY" target="_blank" rel="noopener">Godaddy Forwarding and Masking A Domain Name Tutorial</a></p><h1 id="AWS-资源文档集合"><a href="#AWS-资源文档集合" class="headerlink" title="AWS 资源文档集合"></a>AWS 资源文档集合</h1><p><a href="/assets/preimg/Web-Applications-Technologies/aws-serverless-authentication.pdf">AWS Serverless Authentication</a></p><p><a href="https://aws.amazon.com/cn/documentation/cognito/" target="_blank" rel="noopener">AWS Cognito Developer Document</a></p><p><a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-dg.pdf" target="_blank" rel="noopener">AWS Cognito Developer Guide</a></p><p><a href="https://faragta.com/aws-s3/set-cache-control-for-entire-s3-bucket.html" target="_blank" rel="noopener">Set Cache Control for Entire S3 Bucket</a></p><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteEndpoints.html" target="_blank" rel="noopener">Website Endpoints</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Tricky Part Of Spring Controller</title>
      <link href="/Spring-Boot-And-Spring-Cloud/spring-tricky-controller/"/>
      <url>/Spring-Boot-And-Spring-Cloud/spring-tricky-controller/</url>
      
        <content type="html"><![CDATA[<p>记录Spring应用中Controller容易出问题的地方</p><h2 id="RequestMapping-位置"><a href="#RequestMapping-位置" class="headerlink" title="RequestMapping 位置"></a>RequestMapping 位置</h2><p><img src="/assets/preimg/Spring-Boot-And-Spring-Cloud/spring-controller-requestmapping-correct.jpg" alt="spring-controller-requestmapping-correct.jpg"></p><p>非简单的path，比如： robots.txt， test.html 注解在class层，无法正常工作。</p><p><img src="/assets/preimg/Spring-Boot-And-Spring-Cloud/spring-controller-requestmapping-incorrect.jpg" alt="spring-controller-requestmapping-incorrect.jpg"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring 路径匹配规则</title>
      <link href="/Spring-Boot-And-Spring-Cloud/spring-mappng-rules/"/>
      <url>/Spring-Boot-And-Spring-Cloud/spring-mappng-rules/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.tianmaying.com/tutorial/spring-mvc-request-mapping" target="_blank" rel="noopener">https://www.tianmaying.com/tutorial/spring-mvc-request-mapping</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring JPA Data Auditing</title>
      <link href="/Spring-Boot-And-Spring-Cloud/Spring-JPA-Auditing/"/>
      <url>/Spring-Boot-And-Spring-Cloud/Spring-JPA-Auditing/</url>
      
        <content type="html"><![CDATA[<p>阐述如何使用Spring的JpaAuditing来方便的给auditing相关的字段赋值<br><a href="http://docs.spring.io/spring-data/jpa/docs/1.10.4.RELEASE/reference/html/#auditing" target="_blank" rel="noopener">官方文档</a><br><a href="http://www.baeldung.com/database-auditing-jpa" target="_blank" rel="noopener">baeldung 示例</a></p><p><strong>注意：</strong><br>来自官方文档：</p><blockquote><p>If you have multiple implementations registered in the ApplicationContext, you can select the one to be used by explicitly setting the auditorAwareRef attribute of @EnableJpaAuditing.</p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@EnableJpaAuditing(auditorAwareRef=&quot;auditorProvider&quot;)</span><br><span class="line">public class PersistenceConfig &#123;</span><br><span class="line">     </span><br><span class="line">    ...</span><br><span class="line">     </span><br><span class="line">    @Bean</span><br><span class="line">    AuditorAware&lt;String&gt; auditorProvider() &#123;</span><br><span class="line">        return new AuditorAwareImpl();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    ...</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Boot 1.4 对Unit Test有更好的支持</title>
      <link href="/Spring-Boot-And-Spring-Cloud/Spring-Boot-Unit-Test/"/>
      <url>/Spring-Boot-And-Spring-Cloud/Spring-Boot-Unit-Test/</url>
      
        <content type="html"><![CDATA[<p><strong>Spring Boot 1.4 对Unit Test有更好的支持。</strong><br>以下代码主要覆盖：</p><ol><li>mock authentication 来测试带权限的接口</li><li>使用jsonPath来做unit test 的 expectation</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import static org.hamcrest.Matchers.*;</span><br><span class="line">import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;</span><br><span class="line">import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;</span><br><span class="line">import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;</span><br><span class="line">import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</span><br><span class="line">import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.test.context.ActiveProfiles;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line">import org.springframework.test.web.servlet.MockMvc;</span><br><span class="line">import org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line">import org.springframework.web.context.WebApplicationContext;</span><br><span class="line"></span><br><span class="line">import com.hanover.security.entity.Group;</span><br><span class="line">import com.hanover.security.entity.Permission;</span><br><span class="line">import com.hanover.security.entity.Role;</span><br><span class="line">import com.hanover.security.form.InListPojo;</span><br><span class="line">import com.hanover.security.service.PermissionService;</span><br><span class="line">import com.hanover.security.service.RoleService;</span><br><span class="line">import com.hanover.utils.JsonUtils;</span><br><span class="line">/**</span><br><span class="line"> * add group test</span><br><span class="line"> * @author Joe</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">@ActiveProfiles(&quot;test&quot;) </span><br><span class="line">public class GroupRolesIntegrationTest extends AbstractTest&#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private WebApplicationContext context;</span><br><span class="line"></span><br><span class="line">private MockMvc mvc;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private RoleService roleService;</span><br><span class="line"></span><br><span class="line">private Role productOperatorRole;</span><br><span class="line">private Role productAdminRole;</span><br><span class="line"></span><br><span class="line">@Before</span><br><span class="line">public void setup() &#123;</span><br><span class="line">mvc = MockMvcBuilders</span><br><span class="line">.webAppContextSetup(context)</span><br><span class="line">.apply(springSecurity()) </span><br><span class="line">.build();</span><br><span class="line">prepareBaseData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Step1: createGroup</span><br><span class="line"> * Step2: select roles for group</span><br><span class="line"> * Step3: update group roles</span><br><span class="line"> * @throws Exception </span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">@Transactional</span><br><span class="line">public void integrationTestCase() throws Exception&#123;</span><br><span class="line">Group group = createGroup(&quot;productsuper&quot;,&quot;Product Super group&quot;,&quot;Group for Product Super manager.&quot;);</span><br><span class="line">InListPojo&lt;String&gt; rolesList  = prepareInPojoForUpdate();</span><br><span class="line">updateGroupRoles(group.getId(), rolesList);</span><br><span class="line">getGroupRoles(group.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Prepare a list of role codes.</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private InListPojo&lt;String&gt; prepareInPojoForUpdate()&#123;</span><br><span class="line">List&lt;String&gt; roles = new ArrayList&lt;String&gt;();</span><br><span class="line">roles.add(productOperatorRole.getCode());</span><br><span class="line">roles.add(productAdminRole.getCode());</span><br><span class="line"></span><br><span class="line">InListPojo&lt;String&gt; rolesList = new InListPojo&lt;&gt;();</span><br><span class="line">rolesList.setList(roles);</span><br><span class="line">return rolesList;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * Prepare accessObject, operation, permission roles. </span><br><span class="line"> * Create 4 roles</span><br><span class="line"> */</span><br><span class="line">private void prepareBaseData()&#123;</span><br><span class="line">Permission productR = permissionService.createPermission(&quot;PRODUCT&quot;, &quot;Product&quot;, &quot;R&quot;, &quot;Read&quot;,&quot;Product Read&quot;);</span><br><span class="line">Permission productU = permissionService.createPermission(&quot;PRODUCT&quot;, &quot;Product&quot;, &quot;U&quot;, &quot;Update&quot;,&quot;Product Update&quot;);</span><br><span class="line">Permission productApprove = permissionService.createPermission(&quot;PRODUCT&quot;, &quot;Product&quot;, &quot;P&quot;, &quot;Approve&quot;,&quot;Product Update&quot;);</span><br><span class="line"></span><br><span class="line">Permission srmR = permissionService.createPermission(&quot;supplier&quot;, &quot;supplier&quot;, &quot;R&quot;, &quot;Read&quot;,&quot;Supplier Read&quot;);</span><br><span class="line">Permission srmU = permissionService.createPermission(&quot;supplier&quot;, &quot;supplier&quot;, &quot;U&quot;, &quot;Update&quot;,&quot;Supplier Update&quot;);</span><br><span class="line">Permission srmApprove = permissionService.createPermission(&quot;supplier&quot;, &quot;supplier&quot;, &quot;P&quot;, &quot;Approve&quot;,&quot;Supplier Update&quot;);</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; permissionsProductOperator = new HashSet&lt;String&gt;();</span><br><span class="line">permissionsProductOperator.add(productU.getCode());</span><br><span class="line">permissionsProductOperator.add(productR.getCode());</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; permissionsProductAdmin = new HashSet&lt;String&gt;();</span><br><span class="line">permissionsProductAdmin.addAll(permissionsProductOperator);</span><br><span class="line">permissionsProductAdmin.add(productApprove.getCode());</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; permissionSupplierOperator = new HashSet&lt;String&gt;();</span><br><span class="line">permissionSupplierOperator.add(srmR.getCode());</span><br><span class="line">permissionSupplierOperator.add(srmU.getCode());</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; permissionSupplierApprover = new HashSet&lt;String&gt;();</span><br><span class="line">permissionSupplierApprover.add(srmApprove.getCode());</span><br><span class="line">permissionSupplierApprover.addAll(permissionSupplierApprover);</span><br><span class="line"></span><br><span class="line">productOperatorRole = roleService.addOrUpdateRole(&quot;plm_operator&quot;, &quot;PLM Operator&quot;, permissionsProductOperator);</span><br><span class="line">productAdminRole = roleService.addOrUpdateRole(&quot;plm_approver&quot;, &quot;PLM Approver&quot;, permissionsProductAdmin);</span><br><span class="line"></span><br><span class="line">roleService.addOrUpdateRole(&quot;srm_operator&quot;, &quot;SRM Operator&quot;, permissionSupplierOperator);</span><br><span class="line">roleService.addOrUpdateRole(&quot;srm_approver&quot;, &quot;SRM Approver&quot;, permissionSupplierApprover);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Update groupRoles</span><br><span class="line"> * @param groupId</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">    private void updateGroupRoles(Long groupId,InListPojo&lt;String&gt; rolesList) throws Exception&#123;</span><br><span class="line">this.mvc.perform(put(&quot;/groups/&quot;+groupId+&quot;/roles&quot;)</span><br><span class="line">.content(JsonUtils.convertModelToJson(rolesList))</span><br><span class="line">.contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">.with(csrf()).with(user(createUserDetail(&quot;joe&quot;, &quot;asdff&quot;, &quot;joe.lea@gmail.com&quot;, &quot;11111112222333&quot;, &quot;PLM,SRM&quot;))).accept(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">.andExpect(content().json(&quot;&#123;\&quot;success\&quot;:true&#125;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get groupRoles</span><br><span class="line">     * @param groupId</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">private void getGroupRoles(Long groupId) throws Exception&#123;</span><br><span class="line">this.mvc.perform(get(&quot;/groups/&quot;+groupId+&quot;/roles&quot;)</span><br><span class="line">.contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">.with(csrf()).with(user(createUserDetail(&quot;joe&quot;, &quot;asdff&quot;, &quot;joe.lea@gmail.com&quot;, &quot;11111112222333&quot;, &quot;PLM,SRM&quot;))).accept(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">.andExpect(jsonPath(&quot;$.success&quot;,is(true)))</span><br><span class="line">.andExpect(jsonPath(&quot;$.data.groupRoles&quot;,arrayContaining(&quot;plm_operator&quot;)))</span><br><span class="line">.andExpect(jsonPath(&quot;$.data.groupRoles.length()&quot;,is(2)))</span><br><span class="line">.andExpect(jsonPath(&quot;$.data.allRoles.length()&quot;,is(4) ));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Security  从单体到微服务的演进 - 单体web</title>
      <link href="/Spring-Boot-And-Spring-Cloud/Spring-Boot-Tutorial-Security/"/>
      <url>/Spring-Boot-And-Spring-Cloud/Spring-Boot-Tutorial-Security/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://spring.io/guides/tutorials/spring-security-and-angular-js/" target="_blank" rel="noopener">Spring Security and Angular JS</a><br>代码：<a href="https://github.com/choelea/spring-security-trail.git" target="_blank" rel="noopener">codes on github</a></p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p><strong>CSRF</strong> - Cross-Site Request Forgery (跨站请求伪造)<br><strong>CORS</strong> - Cross Origin Resource Sharing (跨域资源共享）</p><h2 id="单体web-app"><a href="#单体web-app" class="headerlink" title="单体web app"></a>单体web app</h2><p>创建spring web工程。 采用Spring CLI，（其他多种方式请自便）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring init --dependencies web,security ui</span><br></pre></td></tr></table></figure></p><h3 id="OOTB-security"><a href="#OOTB-security" class="headerlink" title="OOTB security"></a>OOTB security</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.example;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.http.ResponseEntity;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@RestController</span><br><span class="line">public class UIApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(UIApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/&quot;)</span><br><span class="line">public ResponseEntity&lt;?&gt; home() &#123;</span><br><span class="line">return ResponseEntity.ok(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OOTB的情况，pom引入了spring security的依赖，不做任何配置。所有的请求都需要登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;curl &quot;http://localhost:8080&quot;</span><br><span class="line">&#123;&quot;timestamp&quot;:1478501120211,&quot;status&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Full authentication is required to access this resource&quot;,&quot;path&quot;:&quot;/&quot;&#125;</span><br></pre></td></tr></table></figure><p>从浏览器打开会提示输入用户名和密码，用户名是user，密码可以从console中看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using default security password: 60fdacf5-347d-4f6f-ac7c-bc0a9725bc55</span><br></pre></td></tr></table></figure><blockquote><p><strong>Look under the hood:</strong> 没有任何个性化的配置的时候AuthenticationManagerConfiguration 会采用默认的配置。默认的security配置参考:SecurityProperties类。prefix = “security”。 可通过一下配置修改OOTB的用户名和密码。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">security.user.name=joe</span><br><span class="line">security.user.password=123456</span><br></pre></td></tr></table></figure><h3 id="自定义security"><a href="#自定义security" class="headerlink" title="自定义security"></a>自定义security</h3><p>参考注解： @EnableWebSecurity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joe</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtWebSecurityConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> web.ignoring()</span><br><span class="line"> <span class="comment">// Spring Security should completely ignore URLs starting with /resources/</span></span><br><span class="line"> .antMatchers(<span class="string">"/resources/**"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> http.authorizeRequests()</span><br><span class="line"> .antMatchers(<span class="string">"/public/**"</span>).permitAll()</span><br><span class="line"> .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"ADMIN"</span>)</span><br><span class="line"> .and()</span><br><span class="line"> <span class="comment">// Possibly more configuration ...</span></span><br><span class="line"> .formLogin() <span class="comment">// enable form based log in</span></span><br><span class="line"> <span class="comment">// set permitAll for all URLs associated with Form Login</span></span><br><span class="line"> .permitAll();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">// enable in memory based authentication with a user named "user" and "admin"</span></span><br><span class="line"> auth.inMemoryAuthentication().withUser(<span class="string">"user"</span>).password(<span class="string">"password"</span>).roles(<span class="string">"USER"</span>)</span><br><span class="line"> .and().withUser(<span class="string">"admin"</span>).password(<span class="string">"password"</span>).roles(<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Possibly more overridden methods ...</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加对应URL的接口</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.example;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.http.ResponseEntity;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@RestController</span><br><span class="line">public class UIApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(UIApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/public/hello&quot;)</span><br><span class="line">public ResponseEntity&lt;?&gt; home() &#123;</span><br><span class="line">return ResponseEntity.ok(&quot;Hello Every one!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/admin/hello&quot;)</span><br><span class="line">public ResponseEntity&lt;?&gt; admin() &#123;</span><br><span class="line">return ResponseEntity.ok(&quot;Hello Admin!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/public/hello 可以随意访问，/admin/hello 需要登录用户有admin的role。用user登录会抛出403的错误。</p><blockquote><p>配置中加了<code>.formLogin().permitAll()</code> 未登录用户会直接重定向至OOTB的登录页面。去掉<code>.formLogin().permitAll()</code> 后直接访问/admin/hello会直接抛出403， 而非401 （<em>这点笔者暂时未能理解，未登录应该抛出401 才对，如果系统中加了授权需要区分这两个状态</em>）(什么场景不需要formLogin？用户如何登陆？满足这个场景的web app往往不是单体，可能是某个微服务，提供restful services)。<br>这里要明白一点：<strong>一旦定制，OOTB的行为就会受影响，尽管看似你没有改</strong>.<br>比如：不加<code>.formLogin().permitAll()</code> 就会导致没有登录提示框出现，访问需要授权的服务会直接抛出403</p></blockquote><p>关于如何配置login的page等参考：<a href="http://docs.spring.io/spring-security/site/docs/4.1.3.RELEASE/reference/htmlsingle/#authorize-requests" target="_blank" rel="noopener">Java Configuration and Form Login</a></p><h3 id="Spring-Boot-CORS-解决Trick："><a href="#Spring-Boot-CORS-解决Trick：" class="headerlink" title="Spring Boot CORS 解决Trick："></a>Spring Boot CORS 解决Trick：</h3><p><a href="https://spring.io/guides/gs/rest-service-cors/" target="_blank" rel="noopener">官方示例</a><br>官方示例中只提到了 WebMvcConfigurerAdapter， 然而大部分程序都有WebSecurityConfigurerAdapter 相关的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class HrWebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">http.csrf().disable();</span><br><span class="line">http.cors().and().authorizeRequests().antMatchers(&quot;/hr/**&quot;).authenticated();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面代码的：http.cors() 非常重要, 这里java doc拷贝出来</strong></p><blockquote><p>Adds a CorsFilter to be used. If a bean by the name of corsFilter is provided, that CorsFilter is used. Else if corsConfigurationSource is defined, then that CorsConfiguration is used. Otherwise, if Spring MVC is on the classpath a HandlerMappingIntrospector is used.</p></blockquote><p>从注解上可以看出来，我们需要一个corsFilter：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public CorsFilter corsFilter() &#123;</span><br><span class="line">    final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();</span><br><span class="line">    final CorsConfiguration config = new CorsConfiguration();</span><br><span class="line">    config.setAllowCredentials(true);</span><br><span class="line">    config.addAllowedOrigin(&quot;*&quot;);</span><br><span class="line">    config.addAllowedHeader(&quot;*&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;OPTIONS&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;HEAD&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;GET&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;PUT&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;POST&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;DELETE&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;PATCH&quot;);</span><br><span class="line">    source.registerCorsConfiguration(&quot;/**&quot;, config);</span><br><span class="line">    return new CorsFilter(source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用到了zuul， 上面的配置也不能生效。<br><a href="http://stackoverflow.com/questions/36042862/zuul-proxy-cors-header-contains-multiple-values-headers-repeated-twice-java-s" target="_blank" rel="noopener">stackoverflow 这个issue</a><br>(zuul 用在apigateway的时候，其他微服务不需要有CORS)<br><a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/997" target="_blank" rel="noopener">Ticket on GitHub</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Boot 开发web 应用 - 04 静态资源</title>
      <link href="/Spring-Boot-And-Spring-Cloud/Spring-Boot-Tutorial-4-Static/"/>
      <url>/Spring-Boot-And-Spring-Cloud/Spring-Boot-Tutorial-4-Static/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot 对静态资源文件的的处理方式。<br>在<a href="http://blog.csdn.net/choelea/article/details/73136194" target="_blank" rel="noopener">Spring Boot: 开发web 应用 - 01 创建项目</a> 中引入的H5 的模板，对应的资源文件（css,js,images 等）放入/src/main/resources/static 下面即可直接引用到<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/animate.min.css&quot;&gt;</code>。接下来看看Spring Boot 是怎么服务静态资源的。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><a href="http://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/common-application-properties.html" target="_blank" rel="noopener">Common application properties</a></li><li><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/html/boot-features-developing-web-applications.html" target="_blank" rel="noopener">Developing Web Application</a></li><li><a href="http://www.mscharhag.com/spring/resource-versioning-with-spring-mvc" target="_blank" rel="noopener">Resourcing Versioning With Spring MVC</a></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://github.com/choelea/spring-boot-trail-static-content/releases/tag/version-agnostic-URLs" target="_blank" rel="noopener">https://github.com/choelea/spring-boot-trail-static-content/releases/tag/version-agnostic-URLs</a></p><h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><ul><li>spring boot 1.5.9</li></ul><h2 id="默认行为"><a href="#默认行为" class="headerlink" title="默认行为"></a>默认行为</h2><p>OOTB 的情况下，不用任何代码Spring Boot 的Web 程序已经满足了常规静态资源的需求。<br><img src="/assets/preimg/Spring-Boot-And-Spring-Cloud/static-resources.jpg" alt="静态资源的请求头"><br>默认情况下，静态资源的response header中并没有cache 相关的设置。（expires / cache-control header.） 这种情况下，各个浏览器的默认行为有可能不一样。 （简单测试：chrome貌似会无限期缓存，firefox缓存了一个小时)</p><h2 id="设定缓存时间"><a href="#设定缓存时间" class="headerlink" title="设定缓存时间"></a>设定缓存时间</h2><p>在<code>application.properties</code> 中添加如下配置：（单位：秒, 3600<em>24</em>365 ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.resources.cache-period=31536000</span><br></pre></td></tr></table></figure><blockquote><p>application.properties/application.yml 常见的配置项可以参考：<br><a href="http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="noopener">Common application properties</a></p></blockquote><p>打开Chrome强制刷新页面，打开开发者工具，查看静态资源的response header可以看到如下的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control:max-age=31536000</span><br></pre></td></tr></table></figure><p>打开firefox的firebug也可以检查到过期时间为一年后。</p><h2 id="设置访问路径（static-resource-path-pattern）"><a href="#设置访问路径（static-resource-path-pattern）" class="headerlink" title="设置访问路径（static resource path pattern）"></a>设置访问路径（static resource path pattern）</h2><p>默认情况pattern是/** 即：根路径。请求类似<a href="http://localhost:8080/test/bootstrap.min.css" target="_blank" rel="noopener">http://localhost:8080/test/bootstrap.min.css</a> 和 <a href="http://localhost:8080/css/bootstrap.min.css" target="_blank" rel="noopener">http://localhost:8080/css/bootstrap.min.css</a> 只要classpath 下面对应的资源文件(/static，/public, /resources, /META-INF)下面有对应目录及文件既可以访问。</p><blockquote><p>By default Spring Boot will serve static content from a directory called /static (or /public or /resources or /META-INF/resources) in the classpath or from the root of the ServletContext.<br>可以通过spring.resources.static-locations来改变资源文件的实体文件路径; 但是实际中基本用不上，就不赘述了。</p></blockquote><p>可以通过以下的配置来设定pattern，达到给所有静态资源一个公共的路径前缀。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.static-path-pattern=/static/**</span><br></pre></td></tr></table></figure><p>那么不管是js css还是图片的引入路径，都需要以/static开头。<code>http://localhost:8080/static/css/bootstrap.min.css</code> (注意：这里的项目我们没有设置server.context-path，所有端口后就直接跟URI)</p><h2 id="设置版本"><a href="#设置版本" class="headerlink" title="设置版本"></a>设置版本</h2><p>为了提高页面的性能及用户体验，静态资源的缓存时间需要尽可能大；但是同时面临着迭代和频繁的发布。 如何让用户能得到最新的修改的内容呢？ 发布后URL 必须变，怎么变方便又效率高？</p><h3 id="不可知版本号"><a href="#不可知版本号" class="headerlink" title="不可知版本号"></a>不可知版本号</h3><p>每次内容重启后，计算文件内容生成md5值，作为新的版本号后缀。(具体的strategy类：<code>org.springframework.web.servlet.resource.ContentVersionStrategy</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.resources.chain.strategy.content.enabled=true</span><br><span class="line">spring.resources.chain.strategy.content.paths=/**</span><br></pre></td></tr></table></figure><p>参考Spring Boot的官方指导文档 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html" target="_blank" rel="noopener">Static Content</a><br>仅仅是上面的配置还不够，如何让这些静态资源加上版本的后缀？必须通过ResourceUrlProvider 来生成提供修改对应的URL；另外需要ResourceUrlEncodingFilter来解析请求。不同的view engine支持程度不一样，做法也不一样。针对freemarker来说, 添加全局的bean到model中。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class ResourceUrlAdvice &#123;</span><br><span class="line"> </span><br><span class="line">  @Inject</span><br><span class="line">  ResourceUrlProvider resourceUrlProvider;</span><br><span class="line"> </span><br><span class="line">  @ModelAttribute(&quot;urls&quot;)</span><br><span class="line">  public ResourceUrlProvider urls() &#123;</span><br><span class="line">    return this.resourceUrlProvider;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在模板中引入：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;${urls.getForLookupPath(&#39;/static/css/animate.min.css&#39;)}&quot;&gt;</code> 生成的HTML内容变成： <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/animate.min-e8c93399a158706b3ae3a9396a9c684e.css&quot;&gt;</code> 在文件内容未修改的情况下，即使服务器重启URL也不会变。</p><p>可以参考文章： <a href="http://www.mscharhag.com/spring/resource-versioning-with-spring-mvc" target="_blank" rel="noopener">Resourcing Versioning With Spring MVC</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Boot 开发web 应用 - 04 静态资源 深入探索</title>
      <link href="/Spring-Boot-And-Spring-Cloud/Spring-Boot-Tutorial-4-Static-Look-Under-The-Hood/"/>
      <url>/Spring-Boot-And-Spring-Cloud/Spring-Boot-Tutorial-4-Static-Look-Under-The-Hood/</url>
      
        <content type="html"><![CDATA[<p>解读原代码进一步了解Spring Boot对静态资源文件的处理。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html" target="_blank" rel="noopener">Developing Web Application</a><br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-auto-configuration.html" target="_blank" rel="noopener">Using Spring Boot Auto-configuration</a></p><h3 id="Spring-Boot-自动配置"><a href="#Spring-Boot-自动配置" class="headerlink" title="Spring Boot 自动配置"></a>Spring Boot 自动配置</h3><p>Spring Boot自动配置尝试根据您添加的jar依赖关系自动配置您的Spring应用程序。大部分情况下，Spring Boot的 AutoConfiguration类会利用@ConditionalOnClass 或者其他的@ConditionalOn** 注解来有选择地配置你的应用。 </p><blockquote><p>比如：　在目前我们都还未加入security相关的依赖；SpringBootWebSecurityConfiguration 类实际已经引入， 但是<code>@ConditionalOnClass({ EnableWebSecurity.class, AuthenticationEntryPoint.class })</code> 决定了security的依赖被引入之前SpringBootWebSecurityConfiguration 不会有任何作用。</p></blockquote><h4 id="WebMvcAutoConfiguration-类"><a href="#WebMvcAutoConfiguration-类" class="headerlink" title="WebMvcAutoConfiguration 类"></a>WebMvcAutoConfiguration 类</h4><p> 此类作为webmvc的配置的集合点，下面的部分子类分别实现/扩展了spring-webmvc模块的类帮助SB（Spring Boot）Web 应用快速配置。<br><img src="/assets/preimg/Spring-Boot-And-Spring-Cloud/spring-boot-auto-configuratioin.jpg" alt="WebMvcAutoConfiguration"></p><ol><li>WebMvcConfigurerAdapter  集合了大部分webmvc的配置；后面涉及到的时候我们会尝试定制。</li><li>EnableWebMvcConfiguration @EnableWebMvc注解的替代</li></ol><h4 id="上一节的配置如何生效的"><a href="#上一节的配置如何生效的" class="headerlink" title="上一节的配置如何生效的"></a>上一节的配置如何生效的</h4><p><strong>相关properties类：</strong> WebMvcProperties    ResourceProperties</p><h5 id="spring-mvc-static-path-pattern-static-及spring-resources-cache-period-31536000-参考如下"><a href="#spring-mvc-static-path-pattern-static-及spring-resources-cache-period-31536000-参考如下" class="headerlink" title="spring.mvc.static-path-pattern=/static/**  及spring.resources.cache-period=31536000 参考如下:"></a>spring.mvc.static-path-pattern=/static/**  及spring.resources.cache-period=31536000 参考如下:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.addResourceHandlers(ResourceHandlerRegistry registry)</span><br></pre></td></tr></table></figure><h5 id="spring-resources-chain-的配置参考如下"><a href="#spring-resources-chain-的配置参考如下" class="headerlink" title="spring.resources.chain.* 的配置参考如下:"></a>spring.resources.chain.* 的配置参考如下:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration.ResourceChainResourceHandlerRegistrationCustomizer.configureResourceChain(Chain properties, ResourceChainRegistration chain)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Boot 开发web 应用 - 03 Spring Framework 回顾</title>
      <link href="/Spring-Boot-And-Spring-Cloud/Spring-Boot-Tutorial-3-Spring-Framework/"/>
      <url>/Spring-Boot-And-Spring-Cloud/Spring-Boot-Tutorial-3-Spring-Framework/</url>
      
        <content type="html"><![CDATA[<h2 id="回顾Spring-Framework"><a href="#回顾Spring-Framework" class="headerlink" title="回顾Spring Framework"></a>回顾Spring Framework</h2><p><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/overview.html" target="_blank" rel="noopener">Overview of Spring Framework</a></p><p>手绘了完整版的依赖关系。（发现问题还望大家指出）<br><img src="/assets/preimg/Spring-Boot-And-Spring-Cloud/spring-dependency.jpg" alt="完整版依赖"></p><p>简化版的依赖关系。</p><p><img src="/assets/preimg/Spring-Boot-And-Spring-Cloud/spring-dependency-complete.jpg" alt="简化版依赖关系"></p><p>结合<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/overview.html" target="_blank" rel="noopener">Overview of Spring Framework</a> 来更好的理解 Spring Framework。</p><h3 id="关于依赖的理解"><a href="#关于依赖的理解" class="headerlink" title="关于依赖的理解"></a>关于依赖的理解</h3><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>module A 中有类引用了Module B 中的class。 A依赖B吗（A -&gt; B） ?<br>大部分的情况是这个样子的。。。<br>打开两节的项目，我们可以看到spring-boot-starter-web 帮助我们引入了如下的module： </p><p><em>spring-boot-starter-web</em> -&gt; <em>spring-boot-starter</em> -&gt; <em>spring-boot-autoconfigure</em> -&gt; <em>spring-boot</em></p><p>可以看出spring-boot-autoconfigure只依赖于spring-boot 模块。（spring-boot 仅依赖于spring-core和spring-context）<br>打开spring-boot-autoconfigure-1.5.4.RELEASE-sources.jar 文件查看其中的代码： 比如：<code>WebMvcAutoConfiguration</code> 可以发现这个类引入了很多的spring-web 及其他module的class。 （从上面的推理来看spring-boot-autoconfigure并不依赖于spring-web）</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>新建一个Spring Boot的项目， 只选择JPA 一个Dependency， 通过pom.xml  的视图查看Resolved Dependencies 可以看到spring-boot-autoconfigure被引入，而spring-web没有被引入。</p><h4 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h4><p>类<code>WebMvcAutoConfiguration</code> 中的如下注解决定了只有web application，这个类才会被load进来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@ConditionalOnWebApplication</span><br><span class="line">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class,</span><br><span class="line">WebMvcConfigurerAdapter.class &#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>Conditional 相关注解不在这一篇幅深入探究。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Boot 开发web 应用 - 02 探究竟</title>
      <link href="/Spring-Boot-And-Spring-Cloud/Spring-Boot-Tutorial-2-Look-Under-The-Hood/"/>
      <url>/Spring-Boot-And-Spring-Cloud/Spring-Boot-Tutorial-2-Look-Under-The-Hood/</url>
      
        <content type="html"><![CDATA[<p>进一步去了解Spring Boot的实现原理</p><h1 id="Look-Under-The-Hood"><a href="#Look-Under-The-Hood" class="headerlink" title="Look Under The Hood"></a>Look Under The Hood</h1><h3 id="引入了哪些jar-文件"><a href="#引入了哪些jar-文件" class="headerlink" title="引入了哪些jar 文件"></a>引入了哪些jar 文件</h3><p>通过pom.xml 可以看到：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>暂时我们可以忽略掉spring-boot-starter-freemarker，这个只是引入了对freemarker的支持。</p></blockquote><p>打开Dependency Hierarchy可以看看spring-boot-starter-web帮我们引入了哪些jar。<br><img src="/assets/preimg/Spring-Boot-And-Spring-Cloud/Dependency-Hierarchy.jpg" alt="Dependency Hierarchy"></p><p>可以从上面看到引入了嵌入式的tomcat；在IDE里面去查询对应的jar文件，spring-boot-starter-* 的jar文件并没有任何的java代码，只是将相关依赖集合起来提供一站式服务。</p><blockquote><p>Starter POMs are a set of convenient dependency descriptors that you can include in your application. You get a one-stop-shop for all the Spring and related technology that you need, without having to hunt through sample code and copy paste loads of dependency descriptors. For example, if you want to get started using Spring and JPA for database access, just include the spring-boot-starter-data-jpa dependency in your project, and you are good to go. <a href="http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#using-boot-starter-poms" target="_blank" rel="noopener">Spring Boot Starter POM.</a></p></blockquote><h3 id="spring-boot-autoconfigure"><a href="#spring-boot-autoconfigure" class="headerlink" title="spring-boot-autoconfigure"></a>spring-boot-autoconfigure</h3><p>Spring-Boot的很多便利之处就在于，你只需要引入相应的依赖， 无需过多的配置，就可以按照约定研发业务功能。 比如， 你无需配置页面文件存放位置，只需要按照约定即可。 这些便利都归功于spring-boot-autoconfigure这个包。 大部分的默认配置都在这里帮忙配置好了， 此外，借助于Java 条件型的annotation 比如： @ConditionalOnClass， 可以完成动态配置，</p><h3 id="Java-代码"><a href="#Java-代码" class="headerlink" title="Java 代码"></a>Java 代码</h3><p>上一节中创建了项目之后，只有两个很简单的Java 类。</p><h4 id="SpringbootStaticContentApplication"><a href="#SpringbootStaticContentApplication" class="headerlink" title="SpringbootStaticContentApplication"></a>SpringbootStaticContentApplication</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.choelea.springboot.springbootstaticcontent;</span><br><span class="line">.............</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringbootStaticContentApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringbootStaticContentApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SpringBootApplication 只是为了方便集合了Spring Boot 常用的几个注解。（最早的Spring Boot没有这个annotation）<br>The @SpringBootApplication annotation is equivalent to using @Configuration, @EnableAutoConfiguration and @ComponentScan with their default attributes. Refer to :<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-using-springbootapplication-annotation.html" target="_blank" rel="noopener">Using the @SpringBootApplication annotation</a></p><blockquote><p>@SpringBootApplication 的入口住类最佳实践是放在最顶级的package中；这样默认所有子package中的class都会被Spring扫到。这点可以查看@ComponentScan 的javadoc “<em>If specific packages are not defined, scanning will occur from the package of the class that declares this annotation.</em> ” </p></blockquote><h4 id="HomePageController"><a href="#HomePageController" class="headerlink" title="HomePageController"></a>HomePageController</h4><p>此类只有放在@SpringBootApplication 所在类的下级包内才会被扫描生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.choelea.springboot.springbootstaticcontent.controller;</span><br><span class="line">.................</span><br><span class="line">@Controller</span><br><span class="line">public class HomePageController &#123;</span><br><span class="line">@RequestMapping(&quot;/&quot;)</span><br><span class="line">public String home()&#123;</span><br><span class="line">return &quot;index&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Boot开发 web 应用 - 01 创建项目</title>
      <link href="/Spring-Boot-And-Spring-Cloud/Spring-Boot-Tutorial-1-Initiate-Project/"/>
      <url>/Spring-Boot-And-Spring-Cloud/Spring-Boot-Tutorial-1-Initiate-Project/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot非常适合Web应用程序开发。使用spring-boot-starter-web模块快速启动和运行。 其中使用嵌入式Tomcat，Jetty或Undertow轻松创建自包含的HTTP服务器</p><p>Spring Boot支持多种方式来创建一个项目：</p><ol><li>使用curl命令 <a href="https://spring.io/guides/tutorials/spring-security-and-angular-js/#using-curl" target="_blank" rel="noopener">Using curl</a></li><li>使用Spring Boot CLI 命令行工具 <a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli" target="_blank" rel="noopener">Using CLI</a></li><li><a href="https://spring.io/" target="_blank" rel="noopener">https://spring.io/</a>  在线生成项目</li><li>使用Spring的集成开发工具</li></ol><h2 id="创建Spring-Boot项目："><a href="#创建Spring-Boot项目：" class="headerlink" title="创建Spring Boot项目："></a>创建Spring Boot项目：</h2><p>这里简单在线生成一个项目; 直接访问<a href="https://start.spring.io/，填写Group和Artifact，添加Web和" target="_blank" rel="noopener">https://start.spring.io/，填写Group和Artifact，添加Web和</a> Freemarker两个依赖项。</p><p><img src="/assets/preimg/Spring-Boot-And-Spring-Cloud/spring-initiator.jpg" alt="spring-initiator"></p><blockquote><p>Spring Boot 支持的可以替换JSP的，view engine包括： Thymeleaf, Groovy Markup Templates, Freemarker, Velocity. (As of Spring Framework 4.3, Velocity support has been deprecated due to six years without active maintenance of the Apache Velocity project. ) 除了Velocity 以外，其他根据个人爱好自助选择。</p></blockquote><h2 id="添加HomeController"><a href="#添加HomeController" class="headerlink" title="添加HomeController"></a>添加HomeController</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HomePageController &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/&quot;)</span><br><span class="line">public String home()&#123;</span><br><span class="line">return &quot;index&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加前端页面的模板"><a href="#添加前端页面的模板" class="headerlink" title="添加前端页面的模板"></a>添加前端页面的模板</h2><p>采用开源bootstrap的H5 模板：<a href="http://www.templatemo.com/preview/templatemo_450_awesome" target="_blank" rel="noopener">awesome template</a><br>默认页面文件需要添加至/src/main/resources/templates 下面；静态资源文件的位置在/src/main/resources/static (或者/src/main/resources/public)下面。<br>目录结构如下：<br><img src="/assets/preimg/Spring-Boot-And-Spring-Cloud/QQ截图20180418170909.jpg" alt="structure"></p><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>运行SpringBootApplication主程序；访问<a href="http://localhost:8080验证。" target="_blank" rel="noopener">http://localhost:8080验证。</a> 截止目前，没有任何定制的情况下，我们可以看到Awesome 的模板页面。</p><h3 id="Spring-Boot-App-运行方式"><a href="#Spring-Boot-App-运行方式" class="headerlink" title="Spring Boot App 运行方式"></a>Spring Boot App 运行方式</h3><p>有以下方式运行，具体请参考：<a href="http://blog.didispace.com/spring-boot-run-backend/" target="_blank" rel="noopener">Spring Boot应用的后台运行配置</a></p><ul><li>运行Spring Boot的应用主类</li><li>使用Maven的Spring Boot插件mvn spring-boot:run来运行</li><li>打成jar包后，使用java -jar运行  (可以使用<code>-Dserver.port</code> 来在运行时修改端口; 比如：<code>java -jar -Dserver.port=9999 boot.jar</code>)<h2 id="github-repo"><a href="#github-repo" class="headerlink" title="github repo"></a>github repo</h2><a href="https://github.com/choelea/spring-boot-trail-static-content.git" target="_blank" rel="noopener">spring-boot-trail-static-content</a>   tags/ootb</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>使用Spring Boot构建多个moudle的web应用</title>
      <link href="/Spring-Boot-And-Spring-Cloud/Spring-Boot-Multiple-Modules/"/>
      <url>/Spring-Boot-And-Spring-Cloud/Spring-Boot-Multiple-Modules/</url>
      
        <content type="html"><![CDATA[<p>A example to use demostrate how to create multiple project using spring boot.</p><p><img src="/assets/preimg/Spring-Boot-And-Spring-Cloud/spring-boot-multiple-modules.jpg" alt="spring-boot-multiple-project"></p><p>Go into Root Folder.<br>Run <code>mvn install</code><br><code>java -jar swwmp-app/target/swwmp-app-0.0.1-SNAPSHOT.jar</code></p><p>代码： <a href="https://github.com/choelea/swwmp" target="_blank" rel="noopener">https://github.com/choelea/swwmp</a></p><p>Found an article on spring:<a href="https://spring.io/guides/gs/multi-module/" target="_blank" rel="noopener">Create Multi Module Project Using Spring Boot</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Boot Actuator</title>
      <link href="/Spring-Boot-And-Spring-Cloud/Spring-Boot-Actuator/"/>
      <url>/Spring-Boot-And-Spring-Cloud/Spring-Boot-Actuator/</url>
      
        <content type="html"><![CDATA[<h1 id="监控和管理-Spring-Boot-Actuator"><a href="#监控和管理-Spring-Boot-Actuator" class="headerlink" title="监控和管理 - Spring Boot Actuator"></a>监控和管理 - Spring Boot Actuator</h1><p>Spring Boot Actuator是spring boot的一个子集，提供的一些监控用的API。<br><a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready" target="_blank" rel="noopener">官方文档</a><br><strong>使用</strong><br>只需要添加一下依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>提供了以下接口</strong><br>具体接口请参考官方文档。 </p><blockquote><p>Spring Boot 1.5 后，针对添加了权限控制， 如果需要放开权限，添加配置：<code>management.security.enabled=false  management.context-path=/actuator</code> 默认是true。 参考文档：<a href="http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="noopener">http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html</a>. 参考<a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready" target="_blank" rel="noopener">官方文档</a>获取最新的endpoints.</p></blockquote><h2 id="示例配置如下："><a href="#示例配置如下：" class="headerlink" title="示例配置如下："></a>示例配置如下：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Spring Boot 1.5 后，针对添加了权限控制， 如果需要放开权限，添加配置：management.security.enabled=false 默认是true。 </span><br><span class="line">management.security.enabled=false  </span><br><span class="line">management.context-path=/actuator</span><br><span class="line"># to expose everything over HTTP </span><br><span class="line">management.endpoints.web.exposure.include=*</span><br></pre></td></tr></table></figure><p>Actuator通过Endpionts来允许你和Spring Boot的app进行交互来监控和管理。 访问URI示例：/actuator/health</p><table><thead><tr><th>Mapping URI</th><th>描述</th><th>敏感</th></tr></thead><tbody><tr><td>autoconfig</td><td>显示一个auto-configuration的报告，该报告展示所有auto-configuration候选者及它们被应用或未被应用的原因</td><td>true</td></tr><tr><td>beans</td><td>显示一个应用中所有Spring Beans的完整列表</td><td>true</td></tr><tr><td>configprops</td><td>显示一个所有@ConfigurationProperties的整理列表</td><td>true</td></tr><tr><td>dump</td><td>执行一个线程转储</td><td>true</td></tr><tr><td>env</td><td>暴露来自Spring　ConfigurableEnvironment的属性</td><td>true</td></tr><tr><td>health</td><td>展示应用的健康信息（当使用一个未认证连接访问时显示一个简单的’status’，使用认证连接访问则显示全部信息详情）</td><td>false</td></tr><tr><td>info</td><td>显示任意的应用信息</td><td>false</td></tr><tr><td>metrics</td><td>展示当前应用的’指标’信息</td><td>true</td></tr><tr><td>mappings</td><td>显示一个所有@RequestMapping路径的整理列表</td><td>true</td></tr><tr><td>shutdown</td><td>允许应用以优雅的方式关闭（默认情况下不启用）</td><td>true</td></tr><tr><td>trace</td><td>显示trace信息（默认为最新的一些HTTP请求）</td><td>true</td></tr></tbody></table><p><strong>If you are using Spring MVC, the following additional endpoints can also be used:</strong><br>请参考官方文档， 不在这里赘述</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>使用Raneto结合Github来搭建简易个人的BLog</title>
      <link href="/Nodejs-Technologies/raneto-create-markdown-site/"/>
      <url>/Nodejs-Technologies/raneto-create-markdown-site/</url>
      
        <content type="html"><![CDATA[<p>使用Raneto结合Github来搭建简易个人的BLog, 将github 厂库的markdown文档展示在blog网站上。 笔者blog： <a href="http://tech.jiu-shu.com" target="_blank" rel="noopener">http://tech.jiu-shu.com</a></p><h1 id="Raneto"><a href="#Raneto" class="headerlink" title="Raneto"></a>Raneto</h1><p>Raneo 是构建在nodejs express基础之上的web系统，不需要依赖任何数据库的的‘CMS’ Web 系统。直接将创建的Markdown文件解析展示出来。</p><blockquote><p>Raneto is a free, open, simple Markdown powered Knowledgebase for Node.js. <a href="https://github.com/gilbitron/Raneto" target="_blank" rel="noopener">https://github.com/gilbitron/Raneto</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Centos 7 上利用pm2部署 nodejs 程序 - No Jenkins</title>
      <link href="/Nodejs-Technologies/PM2-Deployment/"/>
      <url>/Nodejs-Technologies/PM2-Deployment/</url>
      
        <content type="html"><![CDATA[<p>本文探索如何利用pm2 来部署nodejs的程序到centos系统上。</p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li>nodejs的安装 <a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="noopener">Installing Node.js via package manager</a></li><li>npm 权限问题 <a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions" target="_blank" rel="noopener">Fixing npm permissions</a></li><li>pm2 deploy <a href="http://pm2.keymetrics.io/docs/usage/deployment/" target="_blank" rel="noopener">PM2 deployment</a></li><li>git 安装及版本升级 <a href="https://blacksaildivision.com/git-latest-version-centos" target="_blank" rel="noopener">How to install GIT on CentOS</a></li><li><a href="https://keymetrics.io/2014/06/25/ecosystem-json-deploy-and-iterate-faster/" target="_blank" rel="noopener">Deploy and iterate faster, hello ecosystem.json</a><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2></li></ul><p><code>git version</code>     git version 2.11.1<br><code>node -v</code>             v8.0.0<br><code>pm2 -v</code>             2.5.0</p><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>参考上面的资源链接，在目标服务器上安装nodejs， 本次尝试采用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -</span><br><span class="line">yum -y install nodejs</span><br></pre></td></tr></table></figure><h2 id="安装pm2"><a href="#安装pm2" class="headerlink" title="安装pm2"></a>安装pm2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2@latest -g</span><br></pre></td></tr></table></figure><h2 id="解决SSH用户的权限问题"><a href="#解决SSH用户的权限问题" class="headerlink" title="解决SSH用户的权限问题"></a>解决SSH用户的权限问题</h2><p>用root用户显然是不推荐的，然后安装nodejs和npm其他package的安装，我们可能都是通过sudo来安装的。当我们发布程序的时候，我们使用的ssh用户，这里必须解决掉npm perssmision的问题。 参考资源给出了很好的官方的指导；本文采用了第一种方式： <code>sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}</code> 使用这边命令将owner设置为当前用户。</p><blockquote><p>网上的很多文章都忽略了这个问题，这里可以暂时跳过， 到后面的pm2 deploy的时候，问题爆发了再针对性的来解决。</p></blockquote><h2 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h2><p>在目标服务器上安装git；（如果通过ssh push的方式，目前机器也可以不安装git）。本次尝试采用在目标服务器上直接pull代码。git 安装参考上面的资源链接。 本文采用了第三方repo来简化安装。（<em>并非最佳实践，使用第三方的repo需要三思而后行</em> , 手动安装请参考:<a href="https://www.digitalocean.com/community/tutorials/how-to-install-git-on-centos-7" target="_blank" rel="noopener">Git Installing from source</a>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -U http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm </span><br><span class="line">sudo yum install -y git</span><br></pre></td></tr></table></figure><blockquote><p>git 版本过低可能引发无法pull到最新的代码的问题。 <a href="https://github.com/Unitech/pm2/issues/2436" target="_blank" rel="noopener">Ticket Reference</a>  CentOS自带的repository只有旧版本和最新版本是1.8.x版本。 </p></blockquote><h2 id="示例代码库"><a href="#示例代码库" class="headerlink" title="示例代码库"></a>示例代码库</h2><p>示例代码： <a href="https://github.com/choelea/image-utils-web.git" target="_blank" rel="noopener">https://github.com/choelea/image-utils-web.git</a>  branches/pm2-deploy-1</p><h2 id="pm2-发布"><a href="#pm2-发布" class="headerlink" title="pm2 发布"></a>pm2 发布</h2><p>参考<a href="http://pm2.keymetrics.io/docs/usage/deployment/" target="_blank" rel="noopener">官方文档</a>， 截止这篇文章的时间，官方文档和代码有些不一致；但是不影响其参考价值。 </p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>发布机器（可以是你的laptop）可以ssh到目标服务器</li><li>目标服务器可以ssh到git拉去代码<blockquote><p>github上的开源代码不需要ssh可以直接通过https的链接拉去</p></blockquote></li></ul><h4 id="配置ssh用户"><a href="#配置ssh用户" class="headerlink" title="配置ssh用户"></a>配置ssh用户</h4><p>一般的云服务器可以通过web界面的console去配置。 如果没有可以已经有用户名和密码的登录方式，可以通过下面的命令来设置ssh。(后面有示例)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">$ ssh-copy-id node@myserver.com</span><br></pre></td></tr></table></figure><p>同样方式设置目标服务器 -&gt; git 服务器的ssh访问。</p><h3 id="创建deploy的配置文件"><a href="#创建deploy的配置文件" class="headerlink" title="创建deploy的配置文件"></a>创建deploy的配置文件</h3><p>通过<code>pm2 ecosystem</code> 生成模板进行修改。 可以是json,js,yaml 文件；优选前两种。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  /**</span><br><span class="line">   * Application configuration section</span><br><span class="line">   * http://pm2.keymetrics.io/docs/usage/application-declaration/</span><br><span class="line">   */</span><br><span class="line">  apps : [</span><br><span class="line"></span><br><span class="line">    // First application</span><br><span class="line">    &#123;</span><br><span class="line">      name      : &apos;image-utils-web&apos;,</span><br><span class="line">      script    : &apos;server.js&apos;,</span><br><span class="line">      // env: &#123;  If we don&apos;t comment here, it will override below deploy config</span><br><span class="line">      //   PORT: 3011</span><br><span class="line">      // &#125;,</span><br><span class="line">      env_production : &#123;</span><br><span class="line">        NODE_ENV: &apos;production&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * Deployment section</span><br><span class="line">   * http://pm2.keymetrics.io/docs/usage/deployment/</span><br><span class="line">   */</span><br><span class="line">  deploy : &#123;</span><br><span class="line">    production : &#123;</span><br><span class="line">      user : &apos;joe&apos;,// ssh 用户名</span><br><span class="line">      host : &apos;192.168.1.188&apos;, // 目标服务器地址</span><br><span class="line">      ref  : &apos;origin/master&apos;,</span><br><span class="line">      repo : &apos;https://github.com/choelea/image-utils-web.git&apos;,</span><br><span class="line">      path : &apos;/home/joe/nodejsapp/nodejs-playaround&apos;, // 目标服务器部署地址</span><br><span class="line">      &apos;post-deploy&apos; : &apos;npm install &amp;&amp; pm2 reload ecosystem.config.js --env production&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    dev : &#123;</span><br><span class="line">      user : &apos;osboxes&apos;,</span><br><span class="line">      host : &apos;192.168.1.186&apos;,</span><br><span class="line">      ref  : &apos;origin/master&apos;,</span><br><span class="line">      repo : &apos;https://github.com/choelea/image-utils-web.git&apos;,</span><br><span class="line">      path : &apos;/home/osboxes/temp&apos;,</span><br><span class="line">      &apos;post-deploy&apos; : &apos;npm install &amp;&amp; pm2 reload ecosystem.config.js --env dev&apos;,</span><br><span class="line">      env  : &#123;</span><br><span class="line">        NODE_ENV: &apos;dev&apos;,</span><br><span class="line">PORT: 3012</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行命令<code>pm2 deploy ecosystem.config.js dev</code> 即可进行对应环境的部署。（部署前需要运行<code>pm2 deploy ecosystem.config.js dev setup</code> 来创建对应的文件夹。<em>一般会有current，shared， source 三个文件夹，current是个软连接指向了source</em>）</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><h3 id="本地虚拟机测试示例："><a href="#本地虚拟机测试示例：" class="headerlink" title="本地虚拟机测试示例："></a>本地虚拟机测试示例：</h3><p>如下是利用本地已经生成好的公私钥(id_rsa, id_rsa.pub)，将公钥上传至目标服务器192.168.1.186绑定用户osboxes。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id -i id_rsa.pub osboxes@192.168.1.186</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter                                                             out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompt                                                            ed now it is to install the new keys</span><br><span class="line">osboxes@192.168.1.186&apos;s password:</span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &apos;osboxes@192.168.1.186&apos;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Administrator@PC-20160321GFRJ MINGW64 ~/.ssh</span><br><span class="line">$ ssh osboxes@192.168.1.186</span><br><span class="line">Last login: Wed Jul  5 1</span><br></pre></td></tr></table></figure></p><blockquote><p>windows 系统默认没有ssh命令，如果安装了有git，可以通过git bash来运行ssh的命令。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>向NPM仓库发布自己的Package</title>
      <link href="/Nodejs-Technologies/NPM-Publish-Package/"/>
      <url>/Nodejs-Technologies/NPM-Publish-Package/</url>
      
        <content type="html"><![CDATA[<p>阐述如何使用npm发布自己的Package</p><h1 id="创建Nodejs-模块"><a href="#创建Nodejs-模块" class="headerlink" title="创建Nodejs 模块"></a>创建Nodejs 模块</h1><p>参考： <a href="https://docs.npmjs.com/getting-started/creating-node-modules" target="_blank" rel="noopener">https://docs.npmjs.com/getting-started/creating-node-modules</a></p><h1 id="Publish"><a href="#Publish" class="headerlink" title="Publish"></a>Publish</h1><p>参考<a href="https://docs.npmjs.com/getting-started/publishing-npm-packages" target="_blank" rel="noopener">官方指导</a></p><p>简洁总结如下步骤：</p><ol><li>创建/添加 npm 包仓库的用户到本地，如果已经有用户直接使用命令 <code>npm login</code>,  通过<code>npm whoami</code> 查看当前用户</li><li>检查package.json 内容，编写README.md， 发布 <code>npm publish</code></li></ol><blockquote><p>发布前注意npm的镜像，国内很多由于网络问题会设置淘宝的镜像，发布前记得切换到<a href="https://registry.npmjs.org，" target="_blank" rel="noopener">https://registry.npmjs.org，</a> 关于NPM的源可以参考文章：<a href="https://registry.npmjs.org" target="_blank" rel="noopener">https://registry.npmjs.org</a></p></blockquote><h1 id="问题收集"><a href="#问题收集" class="headerlink" title="问题收集"></a>问题收集</h1><h2 id="问题1-Incorrect-username-or-password"><a href="#问题1-Incorrect-username-or-password" class="headerlink" title="问题1 Incorrect username or password"></a>问题1 Incorrect username or password</h2><p><a href="https://github.com/npm/npm/issues/6545" target="_blank" rel="noopener">https://github.com/npm/npm/issues/6545</a></p><h3 id="workaround"><a href="#workaround" class="headerlink" title="workaround"></a>workaround</h3><p>删除文件.npmrc 后重试</p><blockquote><p>不同系统的文件位置不同， windows系统在当前用户的目录下，比如：<code>C:\Users\Administrator\</code></p></blockquote><h2 id="问题2-you-must-verify-your-email-before-publishing-a-new-package"><a href="#问题2-you-must-verify-your-email-before-publishing-a-new-package" class="headerlink" title="问题2 you must verify your email before publishing a new package"></a>问题2 you must verify your email before publishing a new package</h2><p>也许当时注册时候没有验证邮箱， 你需要重新验证下，去npm官网发一个验证到邮箱， 然后照着做</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>如何在Linux上安装Node.js</title>
      <link href="/Nodejs-Technologies/nodejs-nvm-install-uninstall/"/>
      <url>/Nodejs-Technologies/nodejs-nvm-install-uninstall/</url>
      
        <content type="html"><![CDATA[<p>转自： <a href="https://blog.csdn.net/wh211212/article/details/53039286" target="_blank" rel="noopener">https://blog.csdn.net/wh211212/article/details/53039286</a></p><p>装Nodejs之前推荐优先安装nvm<br>参考上面链接， 去<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a> 找到最新的版本。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Nodejs 利用passport完成本地认证 示例</title>
      <link href="/Nodejs-Technologies/Nodejs-Express-Passport/"/>
      <url>/Nodejs-Technologies/Nodejs-Express-Passport/</url>
      
        <content type="html"><![CDATA[<p>本文只涉及web相关，即浏览器作为客户端。一步一步理解认证过程，同时熟悉express-session,passport, connect-flash 各自的职责。示例并没有引入mongodb, 方便更直接的理解认证过程。（In-Memory Authentication Example）</p><h1 id="示例实现场景介绍"><a href="#示例实现场景介绍" class="headerlink" title="示例实现场景介绍"></a>示例实现场景介绍</h1><ul><li>用户访问需要登录的页面，被重定向至登录页面</li><li>登录界面输入用户名和密码，服务端验证并返回显示错误信息, 验证成功后返回至用户先前访问的页面</li><li>如果用户直接访问的登录页面，登录成功后返回指定页面（这里指定/session-demo 页面方便演示）</li></ul><h1 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h1><ul><li><a href="https://github.com/expressjs/session" target="_blank" rel="noopener">express-session</a></li><li><a href="http://passportjs.org/docs/overview" target="_blank" rel="noopener">passport</a></li><li><a href="https://www.npmjs.com/package/connect-flash" target="_blank" rel="noopener">connect-flash</a></li></ul><p><strong>代码</strong>： <a href="https://github.com/choelea/image-utils-web" target="_blank" rel="noopener">https://github.com/choelea/image-utils-web</a>  <strong>releases</strong>： passport-local-authentication</p><h1 id="逐步探索"><a href="#逐步探索" class="headerlink" title="逐步探索"></a>逐步探索</h1><p>探索express + session + passport 来完成用户的基础认证。 网络上大部分文章及示例都是将mongoose，express-session，passport, connect-flash等捆绑在一起，没有一步一步解释清晰各自的职责， 其实这些组件之间并没有多大的依赖关系。</p><h2 id="express-session-登场"><a href="#express-session-登场" class="headerlink" title="express-session 登场"></a>express-session 登场</h2><p>有过web开发经验的对session都是有所了解，简单澄清一点：</p><blockquote><p>session 中的数据存放服务器端，浏览器端的cookie会以某种形式存放session的ID，服务器端获取到这个id可以通过这个id索引到session data。</p></blockquote><p>通过<code>npm install express-sessioin --save</code> 添加依赖。代码中找到合适的位置引入依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const session = require(&apos;express-session&apos;);</span><br><span class="line">......</span><br><span class="line">app.use(session(&#123; secret: &apos;secretkey&apos;, resave: false, saveUninitialized: false &#125;)); // 参数的说明请参考文档，saveUninitialized 和 resave一般推荐设置为false</span><br></pre></td></tr></table></figure><p>搞定， 可以再次访问页面，可以通过浏览器开发者工具看到名称为’connect.sid’ 的cookie会创建。创建一下的route (/session-demo)来测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(&apos;/session-demo&apos;, require(&apos;./routes/session-demo&apos;));</span><br></pre></td></tr></table></figure><p>session-demo.js 主要代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let router = require(&apos;express&apos;).Router();</span><br><span class="line"></span><br><span class="line">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    let sess = req.session;</span><br><span class="line">    console.log(`session id is: $&#123;sess.id&#125;`)</span><br><span class="line">    res.json(sess);</span><br><span class="line">&#125;);</span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></p><p>运行demo进行测试；查看cookie中’connect.sid’ 和后端log出来的id不一致，是因为cookie中的id是被加密了的。详情可以查看文档中的option - secret。</p><blockquote><p>可以在<code>/session-demo</code> 这里添加代码往session里面添加data，刷新这个页面来测试session的效果。默认配置创建session后，在没有往session添加东西之前，session每次都会变化。</p></blockquote><h2 id="passport-入场"><a href="#passport-入场" class="headerlink" title="passport 入场"></a>passport 入场</h2><p>添加依赖<code>npm install passport --save</code>，<code>npm install passport-local --save</code><br><strong>passport功能单一，只做authenticate</strong>, 但是认证方式多种多样，具体如何认证，passport采用了策略模式把具体的实现留给了具体的strategies; 比如passport-local. </p><blockquote><p>策略模式是一种设计模式，它将算法和对象分离开来，通过加载不同的算法来实现不同的行为，适用于相关类的成员相同但行为不同的场景，比如在passport中，认证所需的字段都是用户名、邮箱、密码等，但认证方法是不同的。</p></blockquote><h4 id="配置passport及strategy"><a href="#配置passport及strategy" class="headerlink" title="配置passport及strategy"></a>配置passport及strategy</h4><p>配置passport， 方便起见，创建单独的配置文件：config/passport.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * Module dependencies.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">const LocalStrategy = require(&apos;passport-local&apos;).Strategy;</span><br><span class="line">const passport = require(&apos;passport&apos;);</span><br><span class="line">/**</span><br><span class="line"> * Expose</span><br><span class="line"> */</span><br><span class="line">passport.serializeUser(function(user, done) &#123;</span><br><span class="line">  done(null, user);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">passport.deserializeUser(function(user, done) &#123;</span><br><span class="line">  done(null, user);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// use these strategies</span><br><span class="line">passport.use(&apos;local&apos;,new LocalStrategy(</span><br><span class="line">    function (username, password, done) &#123;</span><br><span class="line">        console.log(`Trying to verify user, username:$&#123;username&#125; password:$&#123;password&#125;`)</span><br><span class="line">        if (username != &apos;joe&apos; || password != &apos;password&apos;) &#123;</span><br><span class="line">            console.log(`Failed to verify user, username:$&#123;username&#125; password:$&#123;password&#125;`)</span><br><span class="line">            return done(null, false, &#123; message: &apos;Invalid username or password&apos; &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return done(null, &#123; &quot;username&quot;: username, &quot;password&quot;: password &#125;,&#123;message:&apos;Successfully authenticated!&apos;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">));</span><br><span class="line">module.exports = passport;</span><br></pre></td></tr></table></figure><blockquote><p>引用passport官方文档：　In a Connect or Express-based application, <code>passport.initialize()</code> middleware is required to initialize Passport. If your application uses persistent login sessions, <code>passport.session()</code> middleware must also be used.</p></blockquote><p>这个示例我们不session的持久化，在内存中管理session，因此只需要在相关代码（server.js）加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const passport = require(&apos;./config/passport&apos;);</span><br><span class="line">app.use(passport.initialize());</span><br></pre></td></tr></table></figure><blockquote><p>session的持久化在生产环境和重要，这里只是方便演示。</p></blockquote><h2 id="登录登出"><a href="#登录登出" class="headerlink" title="登录登出"></a>登录登出</h2><h3 id="添加login-页面"><a href="#添加login-页面" class="headerlink" title="添加login 页面"></a>添加login 页面</h3><p>具体代码参考源代码<code>routes.js</code> 和 <code>login.hbs</code> ; form表单的post请求为<code>/login</code></p><h3 id="添加接受-login-post-请求"><a href="#添加接受-login-post-请求" class="headerlink" title="添加接受/login post 请求"></a>添加接受/login post 请求</h3><p>routes.js 中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const passport = require(&apos;passport&apos;)</span><br><span class="line">.......</span><br><span class="line">app.post(&apos;/login&apos;,</span><br><span class="line">        passport.authenticate(&apos;local&apos;, &#123;</span><br><span class="line">            successRedirect: &apos;/session-demo&apos;,</span><br><span class="line">            failureRedirect: &apos;/login&apos;,// 可以先尝试设置/session-demo 来查看对应的情况</span><br><span class="line">            failureFlash: true</span><br><span class="line">        &#125;));</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><blockquote><p>来自官方文档：　Setting the <strong>failureFlash</strong> option to true instructs Passport to flash an error message using the message given by the strategy’s verify callback, if any. </p></blockquote><p>这里的flash error message来自passport strategy的callback。比如：<code>return done(null, false, { message: &#39;Invalid username or password&#39; });</code> </p><blockquote><p>设置<code>failureRedirect: &#39;/session-demo&#39;</code> 可以看看到对应的错误信息。</p></blockquote><p><img src="/assets/preimg/Nodejs-Technologies/session-json.jpg" alt="express-session-passport-failed"></p><p>输入正确用户名和密码：（joe/password）可以在session-demo的页面看到如下：<br><img src="/assets/preimg/Nodejs-Technologies/session-json1.jpg" alt="express-session-passport-success"></p><h3 id="connect-flash的作用"><a href="#connect-flash的作用" class="headerlink" title="connect-flash的作用"></a>connect-flash的作用</h3><p>又一个从express剥离的组件; 简单读取文档既可以了解到flash 的信息会保存在session中。<br>引入此依赖，同时需要在session相关的配置代码下面添加：<code>app.use(flash());</code>。<br>如果尝试将login失败重定向至session-demo页面，然后多次尝试输入错误的用户名和密码。将会在session-demo页面看到重复的类似如下的flash的error信息：<br><img src="/assets/preimg/Nodejs-Technologies/login-error.jpg" alt="express-session-passport-duplicated-errros"></p><blockquote><p>这些信息是保存在session中，又没有被消费掉；<strong>必须被消费掉，否则会挤爆内存</strong>，如何消费？看下面说明</p></blockquote><h3 id="登录错误显示"><a href="#登录错误显示" class="headerlink" title="登录错误显示"></a>登录错误显示</h3><p><strong>错误信息存放于会话中，并且需要及时消费掉！！！ </strong> 设置login失败返回login页面，及时消费掉session中的flash信息， 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/login'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> errors = req.flash(<span class="string">'error'</span>);  <span class="comment">// 消费掉flash中的error信息</span></span><br><span class="line">        res.render(<span class="string">'login'</span>, &#123; <span class="string">'errors'</span>: errors &#125;)</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>页面使用boostrap显示错误信息，请参考源码<code>login.hbs</code>。</p><h3 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h3><p>参考passport文档添加一下logout代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/logout&apos;, function(req, res)&#123;</span><br><span class="line">  req.logout();</span><br><span class="line">  res.redirect(&apos;/session-demo&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>可以在response中看到passport信息从session中消失了。</p><h2 id="会话中用户的序列化和发序列化"><a href="#会话中用户的序列化和发序列化" class="headerlink" title="会话中用户的序列化和发序列化"></a>会话中用户的序列化和发序列化</h2><p>截止上面，虽然完成了登录，用户的信息也在session中了，但是代码中如何获取到当前用户呢？<br>前面的passport.js代码中的<code>serializeUser</code> 和 <code>deserializeUser</code> 分别是设置和从session中获取用户的时候被调用。</p><blockquote><p>serializeUser和deserializeUser一般有两种方式：1，整个用户模型都存储于会话，获取时候(deserializeUser)无需查询数据库; 2， 只存储用户的ID，获取的时候根据ID从数据库中查询用户模型。  这里的示例采用的是第一种。 </p></blockquote><p>文档中多次提到了req.user， 做如下尝试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/me&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    console.log(`current user is $&#123;req.user&#125;`)</span><br><span class="line">    res.json(&#123;&apos;user&apos;:req.user&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>登录后，访问<code>/me</code> 无效。 Why？<br><strong>解决方法：</strong> 添加 <code>app.use(passport.session());</code>；一定要在<code>express.session()</code> 之后添加。</p><blockquote><p>前面提到了session的持久化，由于我们并没有做持久化，所以没有引入<code>passport.session()</code> 这个中间件。 现在来看， 显然这个中间件并非只和会话的持久化相关。passport的文档并没有详细描述这点。</p></blockquote><h2 id="路由权限控制中间件"><a href="#路由权限控制中间件" class="headerlink" title="路由权限控制中间件"></a>路由权限控制中间件</h2><p><strong>问题：</strong>一个web网站的内容往往有公开的和私有的部分，如何配置让私有请求重定向到登录页面，甚至针对角色权限不同显示相应的错误消息？<br>添加config/auth.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exports.requiresLogin = function (req, res, next) &#123;</span><br><span class="line">  if (req.isAuthenticated()) return next();</span><br><span class="line">  if (req.method == &apos;GET&apos;) req.session.returnTo = req.originalUrl;</span><br><span class="line">  res.redirect(&apos;/login&apos;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在route里面来引用配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const auth = require(&apos;./config/auth&apos;)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">app.get(&apos;/me&apos;, auth.requiresLogin, (req, res) =&gt; &#123;</span><br><span class="line">    console.log(`current user is $&#123;req.user&#125;`)</span><br><span class="line">    res.json(&#123; &apos;user&apos;: req.user &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">...// 顺便重构下POST login 保证成功后跳转至用户之前的GET 请求页面</span><br><span class="line">app.post(&apos;/login&apos;,</span><br><span class="line">        passport.authenticate(&apos;local&apos;, &#123;</span><br><span class="line">            failureRedirect: &apos;/login&apos;,</span><br><span class="line">            failureFlash: true</span><br><span class="line">        &#125;), (req, res) =&gt; &#123;</span><br><span class="line">            const redirectTo = req.session.returnTo? req.session.returnTo: &apos;/session-demo&apos;;</span><br><span class="line">            delete req.session.returnTo;</span><br><span class="line">            res.redirect(redirectTo);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这里修改了<code>/me</code> 请求，使用<code>auth.requiresLogin</code> 来强制用户登录。同时注意修改了<code>POST /login</code> 登录请求的处理来方便登陆后重定向到之前的<code>GET 请求页面</code> 。 再次以未登录的状态访问<code>/me</code> 就会被重定向至登录界面，登录回来后直接就跳转至了<code>/me</code> 页面展示对应的用户信息。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>利用sharp来resize 图片</title>
      <link href="/Nodejs-Technologies/image-resize-sharp/"/>
      <url>/Nodejs-Technologies/image-resize-sharp/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>参考： <a href="http://sharp.pixelplumbing.com/en/stable/install/" target="_blank" rel="noopener">http://sharp.pixelplumbing.com/en/stable/install/</a></p><blockquote><p>在Mac Pro上面直接使用<code>npm install --save sharp</code> 安装会报错。根据报错可以发现sharp依赖libxmljs （<a href="https://www.npmjs.com/package/libxmljs" target="_blank" rel="noopener">https://www.npmjs.com/package/libxmljs</a>) , libxmljs 的安装需要node-gyp （<a href="https://github.com/nodejs/node-gyp#installation）。" target="_blank" rel="noopener">https://github.com/nodejs/node-gyp#installation）。</a>   总之很麻烦，解决办法就是更新node-gyp，参考： <a href="https://github.com/nodejs/node-gyp/wiki/Updating-npm&#39;s-bundled-node-gyp" target="_blank" rel="noopener">https://github.com/nodejs/node-gyp/wiki/Updating-npm&#39;s-bundled-node-gyp</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Cloud 微服务解决方案</title>
      <link href="/Micro-Services/Spring%20Cloud%20%E5%AE%9E%E7%8E%B0%E5%85%A8%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
      <url>/Micro-Services/Spring%20Cloud%20%E5%AE%9E%E7%8E%B0%E5%85%A8%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Cloud-Netflix-Nodejs"><a href="#Spring-Cloud-Netflix-Nodejs" class="headerlink" title="Spring Cloud Netflix / Nodejs"></a>Spring Cloud Netflix / Nodejs</h2><p>尝试使用Spring Cloud Netflix 加 Nodejs 技术栈混合搭建微服务。 （示例并无任何业务意义，只为做演示）</p><blockquote><p>此库为<a href="https://github.com/choelea/spring-cloud-netflix" target="_blank" rel="noopener">https://github.com/choelea/spring-cloud-netflix</a> 的演进版，在此基础上增加了全链路跟踪，服务监控及跨服务日志跟踪<br><strong>代码：</strong> <a href="https://github.com/choelea/spring-cloud-nodejs/" target="_blank" rel="noopener">https://github.com/choelea/spring-cloud-nodejs/</a><br><strong>实现如下</strong></p><ol><li>服务注册发现</li><li>服务间调用（feign)</li><li>服务路由</li><li>负载均衡 (eureka client 端)</li><li>分布式链路调用监控系统</li><li>跨服务日志跟踪</li><li>服务监控</li></ol></blockquote><h3 id="相关版本依赖"><a href="#相关版本依赖" class="headerlink" title="相关版本依赖"></a>相关版本依赖</h3><p><strong>Spring Boot：</strong> 1.5.9.RELEASE<br><strong>Spring Cloud: </strong> Edgware.RELEASE<br><strong>Nodejs：</strong>  v8.9.1  (本机是v8.9.1的，没有在其他版本上做测试)</p><h2 id="架构图-Architecture-for-microservice"><a href="#架构图-Architecture-for-microservice" class="headerlink" title="架构图 (Architecture for microservice)"></a>架构图 (Architecture for microservice)</h2><blockquote><p>此图仅仅是服务注册的，监控和全链路跟踪未添加</p></blockquote><p><img src="/assets/preimg/Micro-Services/nodejs-arch-track.jpg" alt=""></p><ul><li><strong>eureka-server：</strong> Spring Boot + Cloud 技术栈搭建eureka 服务。（服务注册中心）</li><li><strong>bookmark-service：</strong> Spring Boot 的微服务程序</li><li><strong>nodejs-bookservice</strong> nodejs开发的微服务</li><li><strong>composite-service</strong>  聚合服务</li><li><strong>spring-boot-admin-server</strong> Spring Boot 监控</li><li><strong>zipkin</strong>  分布式链路追踪服务</li><li><strong>spring-apigateway</strong> Spring Boot + Cloud Netflix技术栈搭建的网关</li><li><strong>nodejs-web</strong> nodejs开发的网关兼web应用</li></ul><blockquote><p>eureka-server-peer1 和 eureka-server-peer2 是用来验证eureka 集群的，可以选择启动这两个服务，不启动eureka-server服务。</p></blockquote><h2 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h2><p>按照上面的顺序依次运行。  Spring Boot的程序运行：<code>mvn spring-boot:run</code> ; nodejs 程序运行：<code>npm start</code> </p><blockquote><p>spring-boot-admin-server 的控制台会有异常抛出，是因为nodejs的 bookservice程序无法接入spring boot admin的监控的。 —- 尽管restful的微服务号称技术平台无关，然而一旦选择了某些技术栈，基本也就限制了使用某个语言和某个技术。</p></blockquote><h3 id="测试spring-apigateway"><a href="#测试spring-apigateway" class="headerlink" title="测试spring-apigateway"></a>测试spring-apigateway</h3><p>spring-apigateway 作为eureka的客户端结合zuul proxy的反向代理，为多个微服务提供一个单一的访问节点。<br>访问<a href="http://localhost:8080/bookmarks/jlong/bookmarks" target="_blank" rel="noopener">http://localhost:8080/bookmarks/jlong/bookmarks</a> （结果同<a href="http://localhost:9098/jlong/bookmarks" target="_blank" rel="noopener">http://localhost:9098/jlong/bookmarks</a> 完全一致）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">&quot;userId&quot;: &quot;jlong&quot;,</span><br><span class="line">&quot;id&quot;: 2,</span><br><span class="line">&quot;href&quot;: &quot;http://some-other-hostjlong.com/&quot;,</span><br><span class="line">&quot;description&quot;: &quot;A description for jlong&apos;s link&quot;,</span><br><span class="line">&quot;label&quot;: &quot;jlong&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:8080/books" target="_blank" rel="noopener">http://localhost:8080/books</a>  反向代理至nodejs-bookservice的服务：<a href="http://localhost:3001/books" target="_blank" rel="noopener">http://localhost:3001/books</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">&quot;bookname&quot;: &quot;Nodejs Web Development&quot;,</span><br><span class="line">&quot;author&quot;: &quot;David Herron&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;bookname&quot;: &quot;Mastering Web Application Development with Express &quot;,</span><br><span class="line">&quot;author&quot;: &quot;Alexandru Vlăduțu&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="测试nodejs"><a href="#测试nodejs" class="headerlink" title="测试nodejs"></a>测试nodejs</h3><p>nodejs 采用eureka-js-client 组件获取/注册微服务。这里nodejs-web只作为服务的消费方，接入eureka server，消费上游的服务并展示给客户端（浏览器）。<br>查看nodejs-web作为eureka client 获取到注册的服务信息，通过向服务直接发起request来获取数据并展示。访问：<a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 即可看如下显示：</p><p><img src="/assets/preimg/Micro-Services/nodejs-arch-track-1.jpg" alt="test"></p><h3 id="查看服务注册情况："><a href="#查看服务注册情况：" class="headerlink" title="查看服务注册情况："></a>查看服务注册情况：</h3><p>打开<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="/assets/preimg/Micro-Services/eureka.jpg" alt=""></p><p>instance信息的获取主要通过下面的链接：</p><ul><li><a href="http://localhost:8761/eureka/apps" target="_blank" rel="noopener">http://localhost:8761/eureka/apps</a>  获取整个注册进来的服务的信息</li><li><a href="http://localhost:8761/eureka/apps/{app}" target="_blank" rel="noopener">http://localhost:8761/eureka/apps/{app}</a> 获取某个服务的所有的实例信息 例如：<a href="http://localhost:8761/eureka/apps/BOOK-SERVICE" target="_blank" rel="noopener">http://localhost:8761/eureka/apps/BOOK-SERVICE</a>  </li><li><a href="http://localhost:8761/eureka/apps/{app}/{instanceId}" target="_blank" rel="noopener">http://localhost:8761/eureka/apps/{app}/{instanceId}</a>  获取具体的instance的信息<blockquote><p>nodejs 使用eureka-js-client 来配置服务的instance信息，需要配置的信息更多，也更直观的反应了instance的信息；和通过连接（<a href="http://localhost:8761/eureka/apps）查到的基本一致。" target="_blank" rel="noopener">http://localhost:8761/eureka/apps）查到的基本一致。</a></p></blockquote></li></ul><p>nodejs的微服务app，在eureka的client的配置中最好保持app，vipAddress（secureVipAddress 一般不会用上）一致。</p><blockquote><p>经测试发现，Spring Boot / Cloud Netflix 技术栈开发的apigateway，采用Zuul Reverse Proxy 反向代理的时候，必须app 和 vipAddress设置一致。 多个instance通过instanceId来区分。</p></blockquote><h3 id="监控Spring-Boot服务"><a href="#监控Spring-Boot服务" class="headerlink" title="监控Spring Boot服务"></a>监控Spring Boot服务</h3><p>通过<a href="http://localhost:8088" target="_blank" rel="noopener">http://localhost:8088</a> 可以进入Spring Boot的服务列表；选中服务点击Details可以查看详细信息。</p><h3 id="调用链路跟踪"><a href="#调用链路跟踪" class="headerlink" title="调用链路跟踪"></a>调用链路跟踪</h3><p>通过<a href="http://localhost:9411" target="_blank" rel="noopener">http://localhost:9411</a> 查询服务间调用情况</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Cloud Netflix 加 Nodejs 技术栈混合搭建微服务</title>
      <link href="/Micro-Services/Spring%20Boot%20&amp;%20Nodejs%20%E6%B7%B7%E5%90%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%A4%BA%E4%BE%8B/"/>
      <url>/Micro-Services/Spring%20Boot%20&amp;%20Nodejs%20%E6%B7%B7%E5%90%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Cloud-Netflix-Nodejs"><a href="#Spring-Cloud-Netflix-Nodejs" class="headerlink" title="Spring Cloud Netflix / Nodejs"></a>Spring Cloud Netflix / Nodejs</h2><p>尝试使用Spring Cloud Netflix 加 Nodejs 技术栈混合搭建微服务。 （示例并无任何业务意义，只为做演示）<br><strong>代码：</strong> <a href="https://github.com/choelea/spring-cloud-netflix/" target="_blank" rel="noopener">https://github.com/choelea/spring-cloud-netflix/</a>  <strong>ref：</strong> tags/micros-service-hybrid-demo</p><h3 id="相关版本依赖"><a href="#相关版本依赖" class="headerlink" title="相关版本依赖"></a>相关版本依赖</h3><p><strong>Spring Boot：</strong> 1.5.4.RELEASE<br><strong>Spring Cloud: </strong> Dalston.SR1<br><strong>Nodejs：</strong>  7.2.0  (本机是7.2.0的，没有在其他版本上做测试)</p><h2 id="架构图-Architecture-for-microservice"><a href="#架构图-Architecture-for-microservice" class="headerlink" title="架构图 (Architecture for microservice)"></a>架构图 (Architecture for microservice)</h2><p><img src="/assets/preimg/Micro-Services/spring-nodejs-architecture.jpg" alt="spring-nodejs-microservices"></p><ul><li><strong>eureka-server：</strong> Spring Boot + Cloud 技术栈搭建eureka 服务。（服务注册中心）</li><li><strong>bookmark-service：</strong> Spring Boot 的微服务程序</li><li><strong>nodejs-bookservice</strong> nodejs开发的微服务</li><li><strong>spring-apigateway</strong> Spring Boot + Cloud Netflix技术栈搭建的网关</li><li><strong>nodejs-web</strong> nodejs开发的网关兼web应用</li></ul><h2 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h2><p>按照上面的顺序依次运行。  Spring Boot的程序运行：<code>mvn spring-boot:run</code> ; nodejs 程序运行：<code>npm start</code> </p><h3 id="查看服务注册情况："><a href="#查看服务注册情况：" class="headerlink" title="查看服务注册情况："></a>查看服务注册情况：</h3><p>打开<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="/assets/preimg/Micro-Services/eureka.jpg" alt="eureka"><br>instance信息的获取主要通过下面的链接：</p><ul><li><a href="http://localhost:8761/eureka/apps" target="_blank" rel="noopener">http://localhost:8761/eureka/apps</a>  获取整个注册进来的服务的信息</li><li><a href="http://localhost:8761/eureka/apps/{app}" target="_blank" rel="noopener">http://localhost:8761/eureka/apps/{app}</a> 获取某个服务的所有的实例信息 例如：<a href="http://localhost:8761/eureka/apps/BOOK-SERVICE" target="_blank" rel="noopener">http://localhost:8761/eureka/apps/BOOK-SERVICE</a>  </li><li><a href="http://localhost:8761/eureka/apps/{app}/{instanceId}" target="_blank" rel="noopener">http://localhost:8761/eureka/apps/{app}/{instanceId}</a>  获取具体的instance的信息<blockquote><p>nodejs 使用eureka-js-client 来配置服务的instance信息，需要配置的信息更多，也更直观的反应了instance的信息；和通过连接（<a href="http://localhost:8761/eureka/apps）查到的基本一致。" target="_blank" rel="noopener">http://localhost:8761/eureka/apps）查到的基本一致。</a></p></blockquote></li></ul><p>nodejs的微服务app，在eureka的client的配置中最好保持app，vipAddress（secureVipAddress 一般不会用上）一致。</p><blockquote><p>经测试发现，Spring Boot / Cloud Netflix 技术栈开发的apigateway，采用Zuul Reverse Proxy 反向代理的时候，必须app 和 vipAddress设置一致。 多个instance通过instanceId来区分。</p></blockquote><h3 id="测试spring-apigateway"><a href="#测试spring-apigateway" class="headerlink" title="测试spring-apigateway"></a>测试spring-apigateway</h3><p>spring-apigateway 作为eureka的客户端结合zuul proxy的反向代理，为多个微服务提供一个单一的访问节点。<br>访问<a href="http://localhost:8080/bookmarks/jlong/bookmarks" target="_blank" rel="noopener">http://localhost:8080/bookmarks/jlong/bookmarks</a> （结果同<a href="http://localhost:9098/jlong/bookmarks" target="_blank" rel="noopener">http://localhost:9098/jlong/bookmarks</a> 完全一致）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">&quot;userId&quot;: &quot;jlong&quot;,</span><br><span class="line">&quot;id&quot;: 2,</span><br><span class="line">&quot;href&quot;: &quot;http://some-other-hostjlong.com/&quot;,</span><br><span class="line">&quot;description&quot;: &quot;A description for jlong&apos;s link&quot;,</span><br><span class="line">&quot;label&quot;: &quot;jlong&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:8080/books" target="_blank" rel="noopener">http://localhost:8080/books</a>  反向代理至nodejs-bookservice的服务：<a href="http://localhost:3001/books" target="_blank" rel="noopener">http://localhost:3001/books</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">&quot;bookname&quot;: &quot;Nodejs Web Development&quot;,</span><br><span class="line">&quot;author&quot;: &quot;David Herron&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;bookname&quot;: &quot;Mastering Web Application Development with Express &quot;,</span><br><span class="line">&quot;author&quot;: &quot;Alexandru Vlăduțu&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="测试nodejs"><a href="#测试nodejs" class="headerlink" title="测试nodejs"></a>测试nodejs</h3><p>nodejs 采用eureka-js-client 组件获取/注册微服务。这里nodejs-web只作为服务的消费方，接入eureka server，消费上游的服务并展示给客户端（浏览器）。<br>查看nodejs-web作为eureka client 获取到注册的服务信息，通过向服务直接发起request来获取数据并展示。访问：<a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 即可看如下显示：</p><p><img src="/assets/preimg/Micro-Services/spring-nodejs-micro-service-test.jpg" alt="spring-nodejs-microservice-test"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Dubbo + Spring Boot 实现微服务治理</title>
      <link href="/Micro-Services/Dubbo-Spring-Boot/"/>
      <url>/Micro-Services/Dubbo-Spring-Boot/</url>
      
        <content type="html"><![CDATA[<p>Dubbo 是国内阿里系的一个开源框架，提供基于RPC的微服务的治理框架。本文主要探索dubbo 和 spring boot 的结合, 采用<a href="https://github.com/dubbo/dubbo-spring-boot-project" target="_blank" rel="noopener">https://github.com/dubbo/dubbo-spring-boot-project</a> 来实现dubbo和spring boot的结合。（新的Spring Boot Start貌似还在研发中。）<br>主要探索和实现如下几项：</p><ol><li>服务注册与发现</li><li>服务提供方和消费方连通</li><li>服务管理与监控 （dubbo-admin  dubbo-monitor）</li><li>负载均衡</li><li>跨服务日志追踪 （traceId的实现）</li><li>RPC 调用的异常处理</li></ol><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p><a href="https://github.com/choelea/dubboot-example" target="_blank" rel="noopener">https://github.com/choelea/dubboot-example</a></p><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="/assets/preimg/Micro-Services/duboo.png" alt=""><br>分两个服务提供方：product和promotion，一个消费方web demo。web对外提供restful的服务，内部采用rpc协议。</p><blockquote><p>这里product服务的模型利用了<a href="/assets/preimg/Database-Technologies/Mongodb-vs-Mysql-basic">MongoDB vs Mysql 测试</a> 的模型,代码和数据库。</p></blockquote><h2 id="项目结构介绍"><a href="#项目结构介绍" class="headerlink" title="项目结构介绍"></a>项目结构介绍</h2><p><img src="/assets/preimg/Micro-Services/duboo-projects.png" alt="Dubbo-Spring-Boot-Maven"></p><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><p>注册采用推荐的zookeeper，具体安装不在这里赘述。<br>服务注册和监控这里没有详细介绍，需要根据实际情况修改以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.dubbo.registry.address=zookeeper://192.168.1.99:2181</span><br><span class="line">spring.dubbo.monitor.address=192.168.1.99:7070</span><br></pre></td></tr></table></figure><h2 id="服务管理和监控"><a href="#服务管理和监控" class="headerlink" title="服务管理和监控"></a>服务管理和监控</h2><p>checkout dubbo工程的最新的release 代码，参考开发手册<a href="http://dubbo.io/books/dubbo-dev-book/" target="_blank" rel="noopener">http://dubbo.io/books/dubbo-dev-book/</a> 构建。构建完成后，分别在dubbo-simple\dubbo-monitor-simple 和 dubbo-admin工程里找到相应的dubbo-monitor-simple-2.5.8-assembly.tar.gz和dubbo-admin-2.5.8.war。 参考<a href="http://dubbo.io/books/dubbo-admin-book/" target="_blank" rel="noopener">http://dubbo.io/books/dubbo-admin-book/</a> 进行部署。</p><h2 id="跨服务日志追踪"><a href="#跨服务日志追踪" class="headerlink" title="跨服务日志追踪"></a>跨服务日志追踪</h2><h3 id="扩展调用拦截"><a href="#扩展调用拦截" class="headerlink" title="扩展调用拦截"></a>扩展调用拦截</h3><p>通过自定义调用拦截，将traceId透传给服务提供方。</p><blockquote><p>这里只探索，所以只用了一个filter来供服务方和消费方用，实际中可能分开个filter更合适。</p></blockquote><p>参考dubbo开发手册的SPI的调用拦截扩展，自定义filter来来完成traceid的透传。（参考：<a href="http://blog.csdn.net/coolsky600/article/details/63684046）" target="_blank" rel="noopener">http://blog.csdn.net/coolsky600/article/details/63684046）</a><br>扩展需要注意一下：</p><ul><li>META-INF/dubbo/com.alibaba.dubbo.rpc.Filter中添加：<code>xxx=com.xxx.XxxFilter</code></li><li>service的申明出设置filter <code>@Service(version = &quot;1.0.0&quot;, filter=&quot;traceIdFilter&quot;)</code></li></ul><p>具体实现请参考dubboot-trace-log.</p><h3 id="增强日志功能让日志可以打印traceId"><a href="#增强日志功能让日志可以打印traceId" class="headerlink" title="增强日志功能让日志可以打印traceId"></a>增强日志功能让日志可以打印traceId</h3><p>参考文章：<a href="https://moelholm.com/2016/08/16/spring-boot-enhance-your-logging/" target="_blank" rel="noopener">https://moelholm.com/2016/08/16/spring-boot-enhance-your-logging/</a><br>traceId的发起位置是从web-demo 接受到请求开始。 具体参考：com.dubboot.webdemo.web.filter.TraceLoggingFilter。</p><h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><p>依次启动product，promotion和web-demo服务，然后访问<a href="http://localhost:8080/product/pp-0" target="_blank" rel="noopener">http://localhost:8080/product/pp-0</a> 观察后面的日志情况。（zookeeper需要提前启动好保持运行状态）</p><h3 id="负载均衡测试"><a href="#负载均衡测试" class="headerlink" title="负载均衡测试"></a>负载均衡测试</h3><p>修改端口，启动多个promotion服务，查看日志来验证随机算法的负载均衡。</p><blockquote><p>生产环境，在同一个容器中运行同一个服务的多个实例并不是最佳实践。为了充分利用系统的资源，可以选择启动多种服务的实例，不同服务的实例分布在不同的容器/机器上。 同一个服务的端口不变，IP地址或者hostname会不同。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Nodejs 使用 JWT和express-http-proxy 来实现简易APIGateway</title>
      <link href="/Micro-Services/APIGateway-Using-JWT/"/>
      <url>/Micro-Services/APIGateway-Using-JWT/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>代码：  <a href="https://github.com/choelea/tokenbased-api-gateway" target="_blank" rel="noopener">https://github.com/choelea/tokenbased-api-gateway</a></p><p>构建基于jwt的apigateway; 实现资源访问的控制。 利用express-http-proxy来自动proxy到内部资源服务。 (内部资源服务没有任何的访问限制，不能直接暴露给外部APP访问)<br>这里的用户资源也来源于内部资源服务。<br><img src="/assets/preimg/Micro-Services/JWT-API-GATEWAY.jpg" alt="JWT-API-GATEWAY"></p><h1 id="测试API"><a href="#测试API" class="headerlink" title="测试API"></a>测试API</h1><h2 id="POST-Request-for-an-token"><a href="#POST-Request-for-an-token" class="headerlink" title="POST Request for an token"></a>POST Request for an token</h2><p>URL: <a href="http://localhost:3000/auth/authenticate" target="_blank" rel="noopener">http://localhost:3000/auth/authenticate</a><br>POST-Body:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;email&quot;: &quot;joe.li@okchem.com&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;okchem&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Sample of Response:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;msg&quot;: null,</span><br><span class="line">    &quot;msgCode&quot;: null,</span><br><span class="line">    &quot;success&quot;: true,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;id&quot;: 104,</span><br><span class="line">        &quot;userEmail&quot;: &quot;joe.li@okchem.com&quot;,</span><br><span class="line">        &quot;userRole&quot;: &quot;BUYER&quot;,</span><br><span class="line">        &quot;userStatus&quot;: &quot;ACTIVE&quot;,</span><br><span class="line">        &quot;userProfile&quot;: &#123;</span><br><span class="line">            &quot;firstName&quot;: &quot;joe&quot;,</span><br><span class="line">            &quot;lastName&quot;: &quot;li&quot;,</span><br><span class="line">            &quot;companyName&quot;: &quot;ly&quot;,</span><br><span class="line">            &quot;country&quot;: &quot;CHN&quot;,</span><br><span class="line">            &quot;telphone&quot;: &quot;8618086068133&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;chemToken&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTA0LCJ1c2VyRW1haWwiOiJqb2UubGlAb2tjaGVtLmNvbSIsInVzZXJSb2xlIjoiQlVZRVIiLCJ1c2VyU3RhdHVzIjoiQUNUSVZFIiwidXNlclByb2ZpbGUiOnsiZmlyc3ROYW1lIjoiam9lIiwibGFzdE5hbWUiOiJsaSIsImNvbXBhbnlOYW1lIjoibHkiLCJjb3VudHJ5IjoiQ0hOIiwidGVscGhvbmUiOiI4NjE4MDg2MDY4MTMzIn0sImlhdCI6MTUyNTg0NjA2NCwiZXhwIjoxNTI1OTMyNDY0fQ.hIQFv71SHMX2Vd5RPD8ir08LIVeaveZEoN-DQdkxcj0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Request-to-Resource"><a href="#Request-to-Resource" class="headerlink" title="Request to Resource"></a>Request to Resource</h2><p>Token in the header:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chem-token:  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTA0LCJ1c2VyRW1haWwiOiJqb2UubGlAb2tjaGVtLmNvbSIsInVzZXJSb2xlIjoiQlVZRVIiLCJ1c2VyU3RhdHVzIjoiQUNUSVZFIiwidXNlclByb2ZpbGUiOnsiZmlyc3ROYW1lIjoiam9lIiwibGFzdE5hbWUiOiJsaSIsImNvbXBhbnlOYW1lIjoibHkiLCJjb3VudHJ5IjoiQ0hOIiwidGVscGhvbmUiOiI4NjE4MDg2MDY4MTMzIn0sImlhdCI6MTUyNTg0NjA2NCwiZXhwIjoxNTI1OTMyNDY0fQ.hIQFv71SHMX2Vd5RPD8ir08LIVeaveZEoN-DQdkxcj0</span><br></pre></td></tr></table></figure></p><p>In the following request, get user from req buy <code>req.user</code>, Try test using ‘<a href="http://localhost:3000/api/group-buying/application-list/10/1&#39;" target="_blank" rel="noopener">http://localhost:3000/api/group-buying/application-list/10/1&#39;</a></p><h1 id="Something-you-may-concern"><a href="#Something-you-may-concern" class="headerlink" title="Something you may concern"></a>Something you may concern</h1><p>Here, the jwt is actually an ‘value token’, not an ‘reference token’. Mostly the value token is rolling when request continues. It’s more like an<br>Access Token. Here we set the expire time to 24 hours. For me, I believe one use an app for 24 hours, so it’s not an issue. But rolling is what you need, I suggest below 2 solutions.</p><ul><li>Switch to reference token. Changes needed:<ul><li>Involve such as redis to store value which the token refer</li><li>Fetch value from redis after you got the token </li><li>Extend the expire data in redis</li></ul></li><li>Add refresh API to refresh a new token, so that app can call to refresh a new token each 30 minutes.<ul><li>Refresh API will check access token</li><li>Only refresh a new token if the access is about to expire in 1 hour</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java 短ID 随机字符串</title>
      <link href="/Java-Technologies/Java-UUID/"/>
      <url>/Java-Technologies/Java-UUID/</url>
      
        <content type="html"><![CDATA[<p>使用apache common的lib 包。 用1000,0000 次测试，无重复字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.apache.commons.lang.RandomStringUtils;</span><br><span class="line">/**</span><br><span class="line"> * 短ID 测试，使用1000,0000 次测试无重复字符串。 main1()生成500,0000。 后再用main2() 读取，然后再次新加500,0000生成，无重复记录。 </span><br><span class="line"> * @author Joe</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class RandomStringUtilsTrial &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;    </span><br><span class="line">main2();</span><br><span class="line">  &#125;</span><br><span class="line">  public static void main1() throws IOException &#123;</span><br><span class="line">    System.out.print(&quot;8 char string  &gt;&gt;&gt;&quot;);</span><br><span class="line">    Set&lt;String&gt; set = new HashSet&lt;String&gt;();</span><br><span class="line">    for (int i = 0; i &lt; 5000000; i++) &#123;</span><br><span class="line">    set.add(RandomStringUtils.random(9, true, true));</span><br><span class="line">&#125;  </span><br><span class="line">    FileUtils.writeLines(new File(&quot;test.txt&quot;), set);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public static void main2() throws IOException &#123;</span><br><span class="line">    System.out.print(&quot;8 char string  &gt;&gt;&gt;&quot;);</span><br><span class="line">    Set&lt;String&gt; set = new HashSet&lt;String&gt;();</span><br><span class="line">    List&lt;String&gt; list = FileUtils.readLines(new File(&quot;test.txt&quot;));</span><br><span class="line">    for (String string : list) &#123;</span><br><span class="line">    set.add(string);</span><br><span class="line">&#125;</span><br><span class="line">    for (int i = 0; i &lt; 5000000; i++) &#123;</span><br><span class="line">    set.add(RandomStringUtils.random(9, true, true));</span><br><span class="line">&#125; </span><br><span class="line">    System.out.println(set.size());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java 工具类收集</title>
      <link href="/Java-Technologies/java-utils/"/>
      <url>/Java-Technologies/java-utils/</url>
      
        <content type="html"><![CDATA[<h2 id="URI-工具类"><a href="#URI-工具类" class="headerlink" title="URI 工具类"></a>URI 工具类</h2><p>org.springframework.web.util.UriUtils  - Utility class for URI encoding and decoding based on RFC 3986. Offers encoding methods for the various URI components.  </p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>关于Java 正则表达式的介绍</title>
      <link href="/Java-Technologies/java-regular-expressions/"/>
      <url>/Java-Technologies/java-regular-expressions/</url>
      
        <content type="html"><![CDATA[<p>在本文中，我们将讨论Java Regex API以及如何在Java编程语言中使用正则表达式。 在正则表达式的世界中，有许多不同的风格可供选择，例如grep，Perl，Python，PHP，awk等等。 这意味着在一种编程语言中工作的正则表达式可能在另一种编程语言中不起作用。 Java中的正则表达式语法与Perl中的语法最相似。</p><blockquote><p>这篇文章大部分内容只是针对： <a href="https://www.baeldung.com/regular-expressions-java" target="_blank" rel="noopener">https://www.baeldung.com/regular-expressions-java</a> 进行了翻译； Chrome的插件翻译的近乎完美，大部分的翻译都是直接来源于此。</p></blockquote><p>要在Java中使用正则表达式，我们不需要任何特殊设置。 JDK包含一个特殊的包java.util.regex，完全专用于正则表达式操作。我们只需要将它导入我们的代码中。 此外，java.lang.String类还具有内置的正则表达式支持，我们通常在代码中使用它们</p><h2 id="Java-正则表达式包"><a href="#Java-正则表达式包" class="headerlink" title="Java 正则表达式包"></a>Java 正则表达式包</h2><p>java.util.regex包由三个类组成：Pattern，Matcher和PatternSyntaxException： </p><ul><li>Pattern对象是一个已编译的正则表达式。 Pattern类不提供公共构造函数。要创建模式，我们必须首先调用其公共静态编译方法之一，然后返回Pattern对象。这些方法接受正则表达式作为第一个参数。 </li><li>Matcher对象解释模式并对输入String执行匹配操作。它还定义了没有公共构造函数。我们通过在Pattern对象上调用matcher方法来获取Matcher对象。 </li><li>PatternSyntaxException对象是未经检查的异常，表示正则表达式模式中的语法错误。</li></ul><h2 id="简单示例来理解如何应用"><a href="#简单示例来理解如何应用" class="headerlink" title="简单示例来理解如何应用"></a>简单示例来理解如何应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenText_whenSimpleRegexMatches_thenCorrect() &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;foo&quot;);</span><br><span class="line">    Matcher matcher = pattern.matcher(&quot;foo&quot;);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matcher.find());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们首先通过调用静态编译方法创建一个Pattern对象，并将它传递给我们想要使用的模式。 然后我们创建一个Matcher对象，调用Pattern对象的matcher方法并将它传递给我们要检查匹配的文本。 之后，我们在Matcher对象中调用方法find。 </p><p>find方法不断推进输入文本并为每个匹配返回true，因此我们也可以使用它来查找匹配计数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenText_whenSimpleRegexMatchesTwice_thenCorrect() &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;foo&quot;);</span><br><span class="line">    Matcher matcher = pattern.matcher(&quot;foofoo&quot;);</span><br><span class="line">    int matches = 0;</span><br><span class="line">    while (matcher.find()) &#123;</span><br><span class="line">        matches++;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于我们将运行更多测试，因此我们可以在名为runTest的方法中抽象查找匹配数的逻辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static int runTest(String regex, String text) &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(regex);</span><br><span class="line">    Matcher matcher = pattern.matcher(text);</span><br><span class="line">    int matches = 0;</span><br><span class="line">    while (matcher.find()) &#123;</span><br><span class="line">        matches++;</span><br><span class="line">    &#125;</span><br><span class="line">    return matches;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符会影响模式的匹配方式，从而为搜索模式添加逻辑。 Java API支持几个元字符，最直接的是匹配任何字符的点“.”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenText_whenMatchesWithDotMetach_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;.&quot;, &quot;foo&quot;);</span><br><span class="line">     </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>考虑前面的例子，其中正则表达式foo与文本foo以及foofoo匹配两次。如果我们在正则表达式中使用点元字符，我们在第二种情况下不会得到两个匹配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRepeatedText_whenMatchesOnceWithDotMetach_thenCorrect() &#123;</span><br><span class="line">    int matches= runTest(&quot;foo.&quot;, &quot;foofoo&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意正则表达式中foo之后的点。匹配器匹配前面有foo的每个文本，因为最后一个点部分表示后面的任何字符。所以在找到第一个foo之后，其余部分被视为任何角色。这就是为什么只有一个匹配。 API支持其他几个元字符<code>&lt;（[{\ ^ - = $！|]}）？* +。&gt;</code>，我们将在本文中进一步研究。</p><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>浏览官方Pattern类规范，我们将发现支持的正则表达式结构的摘要。在字符类下，我们有大约6个构造。</p><h3 id="OR类"><a href="#OR类" class="headerlink" title="OR类"></a>OR类</h3><p>构造为[abc]。集合中的任何元素都匹配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenORSet_whenMatchesAny_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;[abc]&quot;, &quot;b&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果它们都出现在文本中，则每个都是单独匹配而不考虑顺序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenORSet_whenMatchesAnyAndAll_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;[abc]&quot;, &quot;cab&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它们也可以作为String的一部分进行交替。在下面的示例中，当我们通过将第一个字母与集合中的每个元素交替来创建不同的单词时，它们都匹配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenORSet_whenMatchesAllCombinations_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;[bcr]at&quot;, &quot;bat cat rat&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="NOR-类"><a href="#NOR-类" class="headerlink" title="NOR 类"></a>NOR 类</h3><p>通过添加插入符号<code>^</code>作为第一个元素来取消上面的设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenNORSet_whenMatchesNon_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;[^abc]&quot;, &quot;g&quot;);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Another case:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenNORSet_whenMatchesAllExceptElements_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;[^bcr]at&quot;, &quot;sat mat eat&quot;);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Range-类"><a href="#Range-类" class="headerlink" title="Range 类"></a>Range 类</h3><p>我们可以定义一个类，使用连字符（ - ）指定匹配文本应该落在的范围内，同样，我们也可以否定范围。</p><p>匹配大写的英文字母:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenUpperCaseRange_whenMatchesUpperCase_</span><br><span class="line">  thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(</span><br><span class="line">      &quot;[A-Z]&quot;, &quot;Two Uppercase alphabets 34 overall&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>匹配小写的英文字母:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenLowerCaseRange_whenMatchesLowerCase_</span><br><span class="line">  thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(</span><br><span class="line">      &quot;[a-z]&quot;, &quot;Two Uppercase alphabets 34 overall&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 26);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>匹配大小写的英文字母:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenBothLowerAndUpperCaseRange_</span><br><span class="line">  whenMatchesAllLetters_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(</span><br><span class="line">      &quot;[a-zA-Z]&quot;, &quot;Two Uppercase alphabets 34 overall&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 28);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>匹配给定范围的数字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenNumberRange_whenMatchesAccurately_</span><br><span class="line">  thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(</span><br><span class="line">      &quot;[1-5]&quot;, &quot;Two Uppercase alphabets 34 overall&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>匹配另一个数字范围：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenNumberRange_whenMatchesAccurately_</span><br><span class="line">  thenCorrect2()&#123;</span><br><span class="line">    int matches = runTest(</span><br><span class="line">      &quot;[30-35]&quot;, &quot;Two Uppercase alphabets 34 overall&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Union-类"><a href="#Union-类" class="headerlink" title="Union 类"></a>Union 类</h3><p>联合字符类是组合两个或多个字符类的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenTwoSets_whenMatchesUnion_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;[1-3[7-9]]&quot;, &quot;123456789&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的测试只匹配9个整数中的6个，因为联合集跳过了3,4和5。</p><h3 id="Intersection-类"><a href="#Intersection-类" class="headerlink" title="Intersection 类"></a>Intersection 类</h3><p>与union类相似，此类是从两个或多个集合之间选择公共元素得到的。要应用交集，我们使用&amp;&amp;：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenTwoSets_whenMatchesIntersection_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;[1-6&amp;&amp;[3-9]]&quot;, &quot;123456789&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们得到4个匹配，因为两个集合的交集只有4个元素。</p><h3 id="Subtraction-Class"><a href="#Subtraction-Class" class="headerlink" title="Subtraction Class"></a>Subtraction Class</h3><p>我们可以使用减法来否定一个或多个字符类，例如匹配一组奇数十进制数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenSetWithSubtraction_whenMatchesAccurately_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;[0-9&amp;&amp;[^2468]]&quot;, &quot;123456789&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有1,3,5,7,9匹配。</p><h2 id="预定义字符类"><a href="#预定义字符类" class="headerlink" title="预定义字符类"></a>预定义字符类</h2><p>Java正则表达式API也接受预定义的字符类。上述某些字符类可以用较短的形式表示，但使代码不太直观。这个正则表达式的Java版本的一个特殊方面是转义字符。 正如我们将看到的，大多数字符将以反斜杠开头，这在Java中具有特殊含义。要由Pattern类编译这些 - 必须转义前导反斜杠，即<code>\ d</code>变为<code>\\ d</code>。 匹配数字，相当于[0-9]：</p><p>匹配数字，相当于[0-9]：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenDigits_whenMatches_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\d&quot;, &quot;123&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配非数字，相当于[^ 0-9]：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenNonDigits_whenMatches_thenCorrect() &#123;</span><br><span class="line">    int mathces = runTest(&quot;\\D&quot;, &quot;a6c&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配空白区域：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenWhiteSpace_whenMatches_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\s&quot;, &quot;a c&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配非白色空间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenNonWhiteSpace_whenMatches_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\S&quot;, &quot;a c&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>匹配单词字符，相当于[a-zA-Z_0-9]：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenWordCharacter_whenMatches_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\w&quot;, &quot;hi!&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>匹配非单词字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenNonWordCharacter_whenMatches_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\W&quot;, &quot;hi!&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p>Java正则表达式API还允许我们使用量词。这使我们能够通过指定要匹配的出现次数来进一步调整匹配的行为。</p><p>为了匹配文本零或一次，我们使用？量词：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenZeroOrOneQuantifier_whenMatches_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\a?&quot;, &quot;hi&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者，我们可以使用Java正则表达式API支持的大括号语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenZeroOrOneQuantifier_whenMatches_thenCorrect2() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\a&#123;0,1&#125;&quot;, &quot;hi&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此示例介绍了零长度匹配的概念。碰巧的是，如果量词的匹配阈值为零，它总是匹配文本中的所有内容，包括每个输入末尾的空字符串。这意味着即使输入为空，它也将返回一个零长度匹配。 </p><p>这解释了为什么我们在上面的例子中得到3个匹配，尽管有一个长度为2的字符串。第三个匹配是零长度的空字符串。 </p><p>为了匹配文本零或无限次，我们使用<code>*</code>量词，它类似于<code>？</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenZeroOrManyQuantifier_whenMatches_thenCorrect() &#123;</span><br><span class="line">     int matches = runTest(&quot;\\a*&quot;, &quot;hi&quot;);</span><br><span class="line">  </span><br><span class="line">     assertEquals(matches, 3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同等效果的另外一种写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenZeroOrManyQuantifier_whenMatches_thenCorrect2() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\a&#123;0,&#125;&quot;, &quot;hi&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具有差异的量词是+，它具有匹配阈值1.如果根本不发生所需的字符串，则不会匹配，甚至不是零长度字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenOneOrManyQuantifier_whenMatches_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\a+&quot;, &quot;hi&quot;);</span><br><span class="line">  </span><br><span class="line">    assertFalse(matches);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同等效果的另外一种写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenOneOrManyQuantifier_whenMatches_thenCorrect2() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\a&#123;1,&#125;&quot;, &quot;hi&quot;);</span><br><span class="line">  </span><br><span class="line">    assertFalse(matches);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与Perl和其他语言一样，大括号语法可用于多次匹配给定文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenBraceQuantifier_whenMatches_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;a&#123;3&#125;&quot;, &quot;aaaaaa&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们得到两个匹配项，因为匹配仅在连续出现三次时才会发生。但是，在下一个测试中，我们不会得到匹配，因为文本只连续出现两次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenBraceQuantifier_whenFailsToMatch_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;a&#123;3&#125;&quot;, &quot;aa&quot;);</span><br><span class="line">  </span><br><span class="line">    assertFalse(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们在大括号中使用一个范围时，匹配将是贪婪的，从范围的较高端匹配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenBraceQuantifierWithRange_whenMatches_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;a&#123;2,3&#125;&quot;, &quot;aaaa&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们已经指定了至少两次但不超过三次，所以我们得到一个匹配，而匹配器看到一个aaa和一个无法匹配的孤独aa。</p><p>但是，API允许我们指定一个懒惰或不情愿的方法，以便匹配器可以从范围的下端开始，在这种情况下匹配两次出现为aa和aa：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenBraceQuantifierWithRange_whenMatchesLazily_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;a&#123;2,3&#125;?&quot;, &quot;aaaa&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h2><p>API还允许我们通过捕获组将多个字符视为一个单元。 它会将数字附加到捕获组，并允许使用这些数字进行反向引用。 在本节中，我们将看到一些关于如何在Java regex API中使用捕获组的示例。 让我们使用仅当输入文本包含彼此相邻的两个数字时才匹配的捕获组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenCapturingGroup_whenMatches_thenCorrect() &#123;</span><br><span class="line">    int maches = runTest(&quot;(\\d\\d)&quot;, &quot;12&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附加到上面匹配的数字是1，使用后向引用告诉匹配器我们要匹配文本的匹配部分的另一个出现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenCapturingGroup_whenMatches_thenCorrect2() &#123;</span><br><span class="line">    int matches = runTest(&quot;(\\d\\d)&quot;, &quot;1212&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于输入有两个单独的匹配，我们可以有一个匹配但传播相同的正则表达式匹配以使用反向引用跨越输入的整个长度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenCapturingGroup_whenMatchesWithBackReference_</span><br><span class="line">  thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;(\\d\\d)\\1&quot;, &quot;1212&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们必须在没有反向引用的情况下重复正则表达式以获得相同的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenCapturingGroup_whenMatches_thenCorrect3() &#123;</span><br><span class="line">    int matches = runTest(&quot;(\\d\\d)(\\d\\d)&quot;, &quot;1212&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似地，对于任何其他重复次数，反向引用可以使匹配器将输入视为单个匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenCapturingGroup_whenMatchesWithBackReference_</span><br><span class="line">  thenCorrect2() &#123;</span><br><span class="line">    int matches = runTest(&quot;(\\d\\d)\\1\\1\\1&quot;, &quot;12121212&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(matches, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果你改变了哪怕最后一位数，那么匹配就会失败：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenCapturingGroupAndWrongInput_whenMatchFailsWithBackReference_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;(\\d\\d)\\1&quot;, &quot;1213&quot;);</span><br><span class="line">  </span><br><span class="line">    assertFalse(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重要的是不要忘记转义反斜杠，这在Java语法中至关重要。</p><blockquote><p>捕获组更有价值的地方在于通过Matcher 的 group()方法来后去捕获到的字符串；详情可以参考：  <a href="http://www.runoob.com/w3cnote/java-capture-group.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/java-capture-group.html</a></p></blockquote><h2 id="边界匹配"><a href="#边界匹配" class="headerlink" title="边界匹配"></a>边界匹配</h2><p>Java正则表达式API还支持边界匹配。如果我们关心匹配应该在输入文本中的确切位置，那么这就是我们正在寻找的。在前面的例子中，我们关心的是是否找到匹配。 要仅在文本开头所需的正则表达式为真时匹配，我们使用插入符号^。 此测试将成功，因为可以在开头找到文本狗：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenText_whenMatchesAtBeginning_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;^dog&quot;, &quot;dogs are friendly&quot;);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面的将失败：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenTextAndWrongInput_whenMatchFailsAtBeginning_</span><br><span class="line">  thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;^dog&quot;, &quot;are dogs are friendly?&quot;);</span><br><span class="line">  </span><br><span class="line">    assertFalse(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要仅在文本末尾所需的正则表达式为真时匹配，我们使用美元字符$。在以下情况中将找到匹配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenTextAndWrongInput_whenMatchFailsAtEnd_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;dog$&quot;, &quot;is a dog man&apos;s best friend?&quot;);</span><br><span class="line">  </span><br><span class="line">    assertFalse(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我们只想在单词边界找到所需的文本时匹配，我们在正则表达式的开头和结尾使用\ b正则表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenText_whenMatchesAtWordBoundary_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\bdog\\b&quot;, &quot;a dog is friendly&quot;);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>空格是一个词边界：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenText_whenMatchesAtWordBoundary_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\bdog\\b&quot;, &quot;a dog is friendly&quot;);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一行开头的空字符串也是一个单词边界：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenText_whenMatchesAtWordBoundary_thenCorrect2() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\bdog\\b&quot;, &quot;dog is man&apos;s best friend&quot;);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这些测试通过，因为String的开头以及一个文本和另一个文本之间的空格标记了单词边界，但是，以下测试显示相反的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenWrongText_whenMatchFailsAtWordBoundary_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\bdog\\b&quot;, &quot;snoop dogg is a rapper&quot;);</span><br><span class="line">  </span><br><span class="line">    assertFalse(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>连续出现的双字符不标记单词边界，但我们可以通过更改正则表达式的结尾来查找非单词边界：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenText_whenMatchesAtWordAndNonBoundary_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\\bdog\\B&quot;, &quot;snoop dogg is a rapper&quot;);</span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Pattern-Class-Methods"><a href="#Pattern-Class-Methods" class="headerlink" title="Pattern Class Methods"></a>Pattern Class Methods</h2><p>之前，我们只以基本方式创建了Pattern对象。但是，此类具有另一种编译方法，它接受一组标志以及影响模式匹配方式的正则表达式参数。 这些标志只是抽象的整数值。让我们重载测试类中的runTest方法，以便它可以将标志作为第三个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static int runTest(String regex, String text, int flags) &#123;</span><br><span class="line">    pattern = Pattern.compile(regex, flags);</span><br><span class="line">    matcher = pattern.matcher(text);</span><br><span class="line">    int matches = 0;</span><br><span class="line">    while (matcher.find())&#123;</span><br><span class="line">        matches++;</span><br><span class="line">    &#125;</span><br><span class="line">    return matches;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本节中，我们将查看不同的受支持标志及其使用方式。</p><h3 id="Pattern-CANON-EQ"><a href="#Pattern-CANON-EQ" class="headerlink" title="Pattern.CANON_EQ"></a>Pattern.CANON_EQ</h3><p>此标志启用规范等效。如果指定，当且仅当它们的完整规范分解匹配时，才会认为两个字符匹配。</p><p>考虑重音字符é。它的复合Unicode代码是u00E9。但是，Unicode还为其组件字符<code>e</code>(u0065)和急性重音u0301分别设置了一个代码点。在这种情况下，复合字符u00E9与两个字符序列u0065 u0301无法区分。在<a href="http://tool.chinaz.com/tools/unicode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/unicode.aspx</a> 输入Unicode: <code>\u00E9</code>和<code>\u0065\u0301</code>转化后是同一个字符</p><p>默认情况下，匹配不会将规范等效考虑在内</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegexWithoutCanonEq_whenMatchFailsOnEquivalentUnicode_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\u00E9&quot;, &quot;\u0065\u0301&quot;);</span><br><span class="line">  </span><br><span class="line">    assertFalse(matches &gt; 0); // 注意这里是assertFalse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果我们添加标志，那么测试将通过:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegexWithCanonEq_whenMatchesOnEquivalentUnicode_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;\u00E9&quot;, &quot;\u0065\u0301&quot;, Pattern.CANON_EQ);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pattern-CASE-INSENSITIVE"><a href="#Pattern-CASE-INSENSITIVE" class="headerlink" title="Pattern.CASE_INSENSITIVE"></a>Pattern.CASE_INSENSITIVE</h3><p>该标志无论大小写都能够进行匹配。默认情况下，匹配将案例考虑在内：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegexWithDefaultMatcher_whenMatchFailsOnDifferentCases_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;dog&quot;, &quot;This is a Dog&quot;);</span><br><span class="line">  </span><br><span class="line">    assertFalse(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，使用此标志，我们可以更改默认行为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegexWithCaseInsensitiveMatcher_whenMatchesOnDifferentCases_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(</span><br><span class="line">      &quot;dog&quot;, &quot;This is a Dog&quot;, Pattern.CASE_INSENSITIVE);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以使用等效的嵌入式标志表达式来实现相同的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegexWithEmbeddedCaseInsensitiveMatcher_whenMatchesOnDifferentCases_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;(?i)dog&quot;, &quot;This is a Dog&quot;);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Pattern-COMMENTS"><a href="#Pattern-COMMENTS" class="headerlink" title="Pattern.COMMENTS"></a>Pattern.COMMENTS</h3><p>TJava API允许在正则表达式中使用＃包含注释。这有助于记录复杂的正则表达式，这对于另一个程序员来说可能并不是很明显。 comments标志使匹配器忽略正则表达式中的任何空格或注释，只考虑模式。在默认匹配模式下，以下测试将失败： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegexWithComments_whenMatchFailsWithoutFlag_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(</span><br><span class="line">      &quot;dog$  #check for word dog at end of text&quot;, &quot;This is a dog&quot;);</span><br><span class="line">  </span><br><span class="line">    assertFalse(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为匹配器将在输入文本中查找整个正则表达式，包括空格和＃字符。但是当我们使用该标志时，它将忽略额外的空格，并且以＃开头的每个文本将被视为每行忽略的注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegexWithComments_whenMatchesWithFlag_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(</span><br><span class="line">      &quot;dog$  #check end of text&quot;,&quot;This is a dog&quot;, Pattern.COMMENTS);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个替代的嵌入式标志表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegexWithComments_whenMatchesWithEmbeddedFlag_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(</span><br><span class="line">      &quot;(?x)dog$  #check end of text&quot;, &quot;This is a dog&quot;);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pattern-DOTALL"><a href="#Pattern-DOTALL" class="headerlink" title="Pattern.DOTALL"></a>Pattern.DOTALL</h3><p>默认情况下，当我们在regex中使用点“.”表达式时，我们匹配输入String中的每个字符，直到遇到新的行字符。 使用此标志，匹配也将包括行终止符。</p><p>我们将通过以下示例更好地理解。这些例子会有所不同。由于我们对匹配的String断言感兴趣，因此我们将使用matcher的group方法返回上一个匹配项。 首先，我们将看到默认行为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegexWithLineTerminator_whenMatchFails_thenCorrect() &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;(.*)&quot;);</span><br><span class="line">    Matcher matcher = pattern.matcher(</span><br><span class="line">      &quot;this is a text&quot; + System.getProperty(&quot;line.separator&quot;) </span><br><span class="line">        + &quot; continued on another line&quot;);</span><br><span class="line">    matcher.find();</span><br><span class="line">  </span><br><span class="line">    assertEquals(&quot;this is a text&quot;, matcher.group(1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，只有行终止符之前输入的第一部分匹配。 </p><p>下面的示例处于dotall模式，包括行终止符的整个文本将匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegexWithLineTerminator_whenMatchesWithDotall_thenCorrect() &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;(.*)&quot;, Pattern.DOTALL);</span><br><span class="line">    Matcher matcher = pattern.matcher(</span><br><span class="line">      &quot;this is a text&quot; + System.getProperty(&quot;line.separator&quot;) </span><br><span class="line">        + &quot; continued on another line&quot;);</span><br><span class="line">    matcher.find();</span><br><span class="line">    assertEquals(</span><br><span class="line">      &quot;this is a text&quot; + System.getProperty(&quot;line.separator&quot;) </span><br><span class="line">        + &quot; continued on another line&quot;, matcher.group(1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以使用嵌入式标志表达式来启用dotall模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegexWithLineTerminator_whenMatchesWithEmbeddedDotall_thenCorrect() &#123;</span><br><span class="line">     </span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;(?s)(.*)&quot;);</span><br><span class="line">    Matcher matcher = pattern.matcher(</span><br><span class="line">      &quot;this is a text&quot; + System.getProperty(&quot;line.separator&quot;) </span><br><span class="line">        + &quot; continued on another line&quot;);</span><br><span class="line">    matcher.find();</span><br><span class="line">  </span><br><span class="line">    assertEquals(</span><br><span class="line">      &quot;this is a text&quot; + System.getProperty(&quot;line.separator&quot;) </span><br><span class="line">        + &quot; continued on another line&quot;, matcher.group(1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pattern-LITERAL"><a href="#Pattern-LITERAL" class="headerlink" title="Pattern.LITERAL"></a>Pattern.LITERAL</h3><p>在此模式下，matcher对任何元字符，转义字符或正则表达式语法没有特殊含义。如果没有此标志，匹配器将对任何输入字符串匹配以下正则表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegex_whenMatchFailsWithLiteralFlag_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;(.*)&quot;, &quot;text&quot;, Pattern.LITERAL);</span><br><span class="line">  </span><br><span class="line">    assertFalse(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，如果我们添加所需的字符串，测试将通过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegex_whenMatchesWithLiteralFlag_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(&quot;(.*)&quot;, &quot;text(.*)&quot;, Pattern.LITERAL);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有用于启用文字解析的嵌入标志字符。</p><h3 id="Pattern-MULTILINE"><a href="#Pattern-MULTILINE" class="headerlink" title="Pattern.MULTILINE"></a>Pattern.MULTILINE</h3><p>默认情况下，^和$ metacharacters分别在整个输入String的开头和结尾处匹配。匹配器忽略任何行终止符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegex_whenMatchFailsWithoutMultilineFlag_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(</span><br><span class="line">      &quot;dog$&quot;, &quot;This is a dog&quot; + System.getProperty(&quot;line.separator&quot;) </span><br><span class="line">      + &quot;this is a fox&quot;);</span><br><span class="line">  </span><br><span class="line">    assertFalse(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面匹配失败，因为匹配器在整个String的末尾搜索dog，但是狗出现在字符串第一行的末尾。 </p><p>但是，使用该标志，相同的测试将通过，因为匹配器现在考虑了行终止符。所以String line就在行终止之前找到，因此成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegex_whenMatchesWithMultilineFlag_thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(</span><br><span class="line">      &quot;dog$&quot;, &quot;This is a dog&quot; + System.getProperty(&quot;line.separator&quot;) </span><br><span class="line">      + &quot;this is a fox&quot;, Pattern.MULTILINE);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是嵌入式标志版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenRegex_whenMatchesWithEmbeddedMultilineFlag_</span><br><span class="line">  thenCorrect() &#123;</span><br><span class="line">    int matches = runTest(</span><br><span class="line">      &quot;(?m)dog$&quot;, &quot;This is a dog&quot; + System.getProperty(&quot;line.separator&quot;) </span><br><span class="line">      + &quot;this is a fox&quot;);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matches &gt; 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Matcher-Class-Methods"><a href="#Matcher-Class-Methods" class="headerlink" title="Matcher Class Methods"></a>Matcher Class Methods</h2><p>在本节中，我们将介绍Matcher类的一些有用方法。我们将根据功能对它们进行分组以便清晰。</p><h3 id="Index-Methods"><a href="#Index-Methods" class="headerlink" title="Index Methods"></a>Index Methods</h3><p>索引方法提供有用的索引值，可以精确显示在输入String中找到匹配的位置。在下面的测试中，我们将在输入String中确认dog匹配的开始和结束索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void givenMatch_whenGetsIndices_thenCorrect() &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;dog&quot;);</span><br><span class="line">    Matcher matcher = pattern.matcher(&quot;This dog is mine&quot;);</span><br><span class="line">    matcher.find();</span><br><span class="line">  </span><br><span class="line">    assertEquals(5, matcher.start());</span><br><span class="line">    assertEquals(8, matcher.end());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Methods-match-and-lookingAt"><a href="#Methods-match-and-lookingAt" class="headerlink" title="Methods match and lookingAt"></a>Methods match and lookingAt</h3><p>研究方法遍历输入String并返回一个布尔值，指示是否找到该模式。常用的是match和lookingAt方法。 matches和lookingAt方法都尝试将输入序列与模式匹配。不同之处在于，匹配需要匹配整个输入序列，而查找则不需要。</p><p>Both methods start at the beginning of the input String :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void whenStudyMethodsWork_thenCorrect() &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;dog&quot;);</span><br><span class="line">    Matcher matcher = pattern.matcher(&quot;dogs are friendly&quot;);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matcher.lookingAt());</span><br><span class="line">    assertFalse(matcher.matches());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方法都从输入String的开头开始：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void whenMatchesStudyMethodWorks_thenCorrect() &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;dog&quot;);</span><br><span class="line">    Matcher matcher = pattern.matcher(&quot;dog&quot;);</span><br><span class="line">  </span><br><span class="line">    assertTrue(matcher.matches());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Replacement-Methods"><a href="#Replacement-Methods" class="headerlink" title="Replacement Methods"></a>Replacement Methods</h3><p>替换方法对于替换输入字符串中的文本很有用。常见的是replaceFirst和replaceAll。 replaceFirst和replaceAll方法替换匹配给定正则表达式的文本。正如其名称所示，replaceFirst替换第一个匹配项，replaceAll替换所有匹配项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void whenReplaceFirstWorks_thenCorrect() &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;dog&quot;);</span><br><span class="line">    Matcher matcher = pattern.matcher(</span><br><span class="line">      &quot;dogs are domestic animals, dogs are friendly&quot;);</span><br><span class="line">    String newStr = matcher.replaceFirst(&quot;cat&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(</span><br><span class="line">      &quot;cats are domestic animals, dogs are friendly&quot;, newStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换所有匹配项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void whenReplaceAllWorks_thenCorrect() &#123;</span><br><span class="line">    Pattern pattern = Pattern.compile(&quot;dog&quot;);</span><br><span class="line">    Matcher matcher = pattern.matcher(</span><br><span class="line">      &quot;dogs are domestic animals, dogs are friendly&quot;);</span><br><span class="line">    String newStr = matcher.replaceAll(&quot;cat&quot;);</span><br><span class="line">  </span><br><span class="line">    assertEquals(&quot;cats are domestic animals, cats are friendly&quot;, newStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java 正则表达式示例</title>
      <link href="/Java-Technologies/java-regular-expression-example/"/>
      <url>/Java-Technologies/java-regular-expression-example/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">package test.com;</span><br><span class="line"></span><br><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">/**</span><br><span class="line"> * Unit Test for domain regular expression</span><br><span class="line"> * @author Joe</span><br><span class="line"> */</span><br><span class="line">public class DomainRegexTester &#123;</span><br><span class="line"></span><br><span class="line">private final static Pattern mainDomainPattern = Pattern.compile(&quot;(m\\.)?((www|en|pt|es|ru)\\.)?okchem\\.com&quot;);</span><br><span class="line"></span><br><span class="line">private final static Pattern vipDomainPattern = Pattern.compile(&quot;(\\w&#123;3,30&#125;)\\.(m\\.)?((en|pt|es|ru)\\.)okchem\\.com&quot;);</span><br><span class="line"></span><br><span class="line">public static boolean match(String regex, String text) &#123;</span><br><span class="line">Pattern pattern = Pattern.compile(regex);</span><br><span class="line">Matcher matcher = pattern.matcher(text);</span><br><span class="line">    </span><br><span class="line">    return matcher.matches();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testMatchGroup_NonVIP_PC() &#123;</span><br><span class="line">Matcher pcMatcherWww = mainDomainPattern.matcher(&quot;www.okchem.com&quot;);</span><br><span class="line">    if(pcMatcherWww.find()) &#123;</span><br><span class="line">    assertTrue(&quot;www&quot;.equals(pcMatcherWww.group(3)));</span><br><span class="line">    assertTrue(&quot;www.&quot;.equals(pcMatcherWww.group(2)));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Matcher pcMatcherEn = mainDomainPattern.matcher(&quot;en.okchem.com&quot;);</span><br><span class="line">    if(pcMatcherEn.find()) &#123;</span><br><span class="line">    assertTrue(pcMatcherEn.group(1)==null);</span><br><span class="line">    assertTrue(&quot;en&quot;.equals(pcMatcherEn.group(3)));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    Matcher mobileMatcherEn = mainDomainPattern.matcher(&quot;m.okchem.com&quot;);</span><br><span class="line">    if(mobileMatcherEn.find()) &#123;</span><br><span class="line">    assertTrue(&quot;m.&quot;.equals(mobileMatcherEn.group(1)));</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    Matcher mobileMatcherEs = mainDomainPattern.matcher(&quot;m.es.okchem.com&quot;);</span><br><span class="line">    if(mobileMatcherEs.find()) &#123;</span><br><span class="line">    assertTrue(&quot;es&quot;.equals(mobileMatcherEs.group(3)));</span><br><span class="line">    assertTrue(&quot;es.&quot;.equals(mobileMatcherEs.group(2)));</span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testMainDomainMatch() &#123;</span><br><span class="line">   assertTrue(matchMain(&quot;www.okchem.com&quot;));</span><br><span class="line">   assertTrue(matchMain(&quot;pt.okchem.com&quot;));</span><br><span class="line">   assertTrue(matchMain(&quot;es.okchem.com&quot;));</span><br><span class="line">   assertTrue(matchMain(&quot;pt.okchem.com&quot;));</span><br><span class="line">   assertTrue(matchMain(&quot;ru.okchem.com&quot;));</span><br><span class="line">   </span><br><span class="line">   assertTrue(matchMain(&quot;m.okchem.com&quot;));</span><br><span class="line">   assertTrue(matchMain(&quot;m.pt.okchem.com&quot;));</span><br><span class="line">   assertTrue(matchMain(&quot;m.es.okchem.com&quot;));</span><br><span class="line">   assertTrue(matchMain(&quot;m.ru.okchem.com&quot;));  </span><br><span class="line">   </span><br><span class="line">   assertTrue(matchMain(&quot;m.www.okchem.com&quot;));</span><br><span class="line">   assertFalse(matchMain(&quot;m.www.jiu-shu.com&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void testVipDomainmatch() &#123;</span><br><span class="line">/*** VIP store domain ***/</span><br><span class="line">assertTrue(matchVIP(&quot;vipcode.ru.okchem.com&quot;));</span><br><span class="line">assertTrue(matchVIP(&quot;vipcode.en.okchem.com&quot;));</span><br><span class="line">assertTrue(matchVIP(&quot;vipcode.es.okchem.com&quot;));</span><br><span class="line">assertTrue(matchVIP(&quot;vipcode.pt.okchem.com&quot;));</span><br><span class="line"></span><br><span class="line">assertTrue(matchVIP(&quot;vipcode.m.pt.okchem.com&quot;));</span><br><span class="line">assertTrue(matchVIP(&quot;vipcode.m.ru.okchem.com&quot;));</span><br><span class="line">assertTrue(matchVIP(&quot;vipcode.m.en.okchem.com&quot;));</span><br><span class="line">assertTrue(matchVIP(&quot;vipcode.m.es.okchem.com&quot;));</span><br><span class="line"></span><br><span class="line">assertFalse(matchVIP(&quot;v.pt.okchem.com&quot;));// vipcode is too short</span><br><span class="line">assertTrue(matchVIP(&quot;abcdefghij12345678901234567980.en.okchem.com&quot;));// vipcode is just 30</span><br><span class="line">assertFalse(matchVIP(&quot;abcdefghij123456789012345679801.pt.okchem.com&quot;));// vipcode is too short</span><br><span class="line"></span><br><span class="line">assertFalse(matchVIP(&quot;v.m.pt.okchem.com&quot;));// vipcode is too short</span><br><span class="line">assertTrue(matchVIP(&quot;abcdefghij12345678901234567980.m.pt.okchem.com&quot;));// vipcode is just 30</span><br><span class="line">assertFalse(matchVIP(&quot;abcdefghij123456789012345679801.m.pt.okchem.com&quot;));// vipcode is too short</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean matchMain(String text) &#123;</span><br><span class="line">Matcher matcher = mainDomainPattern.matcher(text);</span><br><span class="line">    return matcher.matches();</span><br><span class="line">&#125;</span><br><span class="line">public static boolean matchVIP(String text) &#123;</span><br><span class="line">Matcher matcher = vipDomainPattern.matcher(text);</span><br><span class="line">    return matcher.matches();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">package test.com;</span><br><span class="line"></span><br><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">/**</span><br><span class="line"> * Unit Test for domain regular expression</span><br><span class="line"> * @author Joe</span><br><span class="line"> */</span><br><span class="line">public class DomainRegexTester &#123;</span><br><span class="line"></span><br><span class="line">private final static Pattern pattern = Pattern.compile(&quot;(\\w&#123;3,30&#125;\\.)?(m\\.)?((www|en|pt|es|ru)\\.)?okchem\\.com&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static boolean match(String regex, String text) &#123;</span><br><span class="line">Pattern pattern = Pattern.compile(regex);</span><br><span class="line">Matcher matcher = pattern.matcher(text);</span><br><span class="line">    </span><br><span class="line">    return matcher.matches();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testMatchGroup_NonVIP_PC() &#123;</span><br><span class="line">Matcher matcher1 = pattern.matcher(&quot;www.okchem.com&quot;);</span><br><span class="line">    if(matcher1.find()) &#123;</span><br><span class="line">    assertTrue(&quot;www.&quot;.equals(matcher1.group(1)));</span><br><span class="line">    assertTrue(matcher1.group(2)==null);</span><br><span class="line">    assertTrue(matcher1.group(3)==null);</span><br><span class="line">    assertTrue(matcher1.group(4)==null);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Matcher matcher2 = pattern.matcher(&quot;en.okchem.com&quot;);</span><br><span class="line">    if(matcher2.find()) &#123;</span><br><span class="line">    assertTrue(&quot;en&quot;.equals(matcher2.group(4)));</span><br><span class="line">    assertTrue(matcher2.group(2)==null);</span><br><span class="line">    assertTrue(&quot;en.&quot;.equals(matcher2.group(3)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void testMatchGroup() &#123;</span><br><span class="line">Matcher matcher = pattern.matcher(&quot;www.okchem.com&quot;);</span><br><span class="line">    if(matcher.find()) &#123;</span><br><span class="line">    assertTrue(&quot;www.&quot;.equals(matcher.group(1)));</span><br><span class="line">    assertTrue(matcher.group(2)==null);</span><br><span class="line">    assertTrue(matcher.group(3)==null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testParseLanguage_NonLanguage() throws Exception &#123;</span><br><span class="line">assertTrue(parseLanguageFromText(&quot;www.okchem.com&quot;)==null);</span><br><span class="line">assertTrue(parseLanguageFromText(&quot;m.okchem.com&quot;)==null);</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void testParseLanguage_HasLanguage() throws Exception &#123;</span><br><span class="line">assertTrue(&quot;pt&quot;.equals(parseLanguageFromText(&quot;pt.okchem.com&quot;)));</span><br><span class="line">assertTrue(&quot;pt&quot;.equals(parseLanguageFromText(&quot;m.pt.okchem.com&quot;)));</span><br><span class="line">assertTrue(&quot;ru&quot;.equals(parseLanguageFromText(&quot;vipcode.ru.okchem.com&quot;)));</span><br><span class="line">assertTrue(&quot;pt&quot;.equals(parseLanguageFromText(&quot;vipcode.m.pt.okchem.com&quot;)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testDomainMatch() &#123;</span><br><span class="line">   assertTrue(match(&quot;www.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;pt.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;es.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;pt.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;ru.okchem.com&quot;));</span><br><span class="line">   </span><br><span class="line">   assertTrue(match(&quot;m.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;m.pt.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;m.es.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;m.ru.okchem.com&quot;));</span><br><span class="line">   </span><br><span class="line">   /*** VIP store domain ***/</span><br><span class="line">   </span><br><span class="line">   assertTrue(match(&quot;vipcode.ru.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;vipcode.en.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;vipcode.es.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;vipcode.pt.okchem.com&quot;));</span><br><span class="line">   </span><br><span class="line">   assertTrue(match(&quot;vipcode.m.pt.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;vipcode.m.ru.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;vipcode.m.en.okchem.com&quot;));</span><br><span class="line">   assertTrue(match(&quot;vipcode.m.es.okchem.com&quot;));   </span><br><span class="line">  </span><br><span class="line">   assertFalse(match(&quot;vi.pt.okchem.com&quot;));// vipcode is too short  </span><br><span class="line">   assertTrue(match(&quot;abcdefghij12345678901234567980.en.okchem.com&quot;));// vipcode is just 30</span><br><span class="line">   assertFalse(match(&quot;abcdefghij123456789012345679801.pt.okchem.com&quot;));// vipcode is too short</span><br><span class="line">   </span><br><span class="line">   assertFalse(match(&quot;vi.m.pt.okchem.com&quot;));// vipcode is too short   </span><br><span class="line">   assertTrue(match(&quot;abcdefghij12345678901234567980.m.pt.okchem.com&quot;));// vipcode is just 30</span><br><span class="line">   assertFalse(match(&quot;abcdefghij123456789012345679801.m.pt.okchem.com&quot;));// vipcode is too short</span><br><span class="line">   </span><br><span class="line">   assertTrue(match(&quot;m.www.okchem.com&quot;));</span><br><span class="line">   assertFalse(match(&quot;m.www.jiu-shu.com&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean match(String text) &#123;</span><br><span class="line">Matcher matcher = pattern.matcher(text);</span><br><span class="line">    return matcher.matches();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String parseLanguageFromText(String text) throws Exception &#123;</span><br><span class="line">Matcher matcherPc = pattern.matcher(text);</span><br><span class="line">    if(matcherPc.find()) &#123;</span><br><span class="line">    return matcherPc.group(4);</span><br><span class="line">    &#125;</span><br><span class="line">    throw new Exception(&quot;Not Match&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java并发编程的艺术 -02 Java并发机制的底层实现原理</title>
      <link href="/Java-Technologies/Java-Concurrency-2/"/>
      <url>/Java-Technologies/Java-Concurrency-2/</url>
      
        <content type="html"><![CDATA[<p>读Java 并发编程的艺术第二章 - Java并发机制的底层实现原理</p><h1 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h1><p>volatile是轻量级的synchronized, 不会引起线程上下文的切换。<br>volatile 只能保证其修饰变量的原子操作的数据一致，一些比如num++ 等都是复合操作，仅仅靠volatile修饰变量是无法保证并发情况下的数据一致的; 因此volatile不能像synchronized那样普遍用于线程安全。</p><p>线程安全的场景，一般来说我们很容易想到类似购票系统这种场景(安全计数器), 但是由于上面介绍的原因，仅仅靠volatile关键字是做不到’安全计数’的。 关于具体使用场景可以参考：文章： <a href="http://blog.csdn.net/hxpjava1/article/details/55188908" target="_blank" rel="noopener">http://blog.csdn.net/hxpjava1/article/details/55188908</a> 。</p><blockquote><p>synchronized 会引起上线文切换? </p></blockquote><p>以下示例说明了非原子操作的时候，volatile无法保证数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonAtomicOperationOnVolatile</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count); <span class="comment">//  不是 0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="synchronized-关键字"><a href="#synchronized-关键字" class="headerlink" title="synchronized 关键字"></a>synchronized 关键字</h1><p>synchronzied是偏重量级，但是在并发不是很大的情况下的优选实现方式。Java中的每一个对象都可以作为锁：</p><ul><li>对于实例方法：锁是当前对象</li><li>对于静态方法：锁是当前类的Class 对象</li><li>对于同步方法块： 锁是synnchronized括号里的对象</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java并发编程的艺术-01-并发编程的挑战</title>
      <link href="/Java-Technologies/Java-Concurrency-1/"/>
      <url>/Java-Technologies/Java-Concurrency-1/</url>
      
        <content type="html"><![CDATA[<p><strong>并发编程的目的是为了让程序运行的更快</strong></p><h1 id="知识点汇总"><a href="#知识点汇总" class="headerlink" title="知识点汇总"></a>知识点汇总</h1><ul><li>并非启动更多线程程序并发就最大</li><li>多线程不一定就快，线程的创建和上下文切换需要成本</li><li>减少上下文切换<ul><li>无锁并发 - 通过ID将数据分开</li><li>CAS算法； 使用Java的Atomic包</li><li>使用最少线程；避免创建不必要的线程导致太多线程等待</li></ul></li></ul><h2 id="死锁示例"><a href="#死锁示例" class="headerlink" title="死锁示例"></a>死锁示例</h2><p>下面的示例一般不会出现在大家的代码中，只做展示。</p><blockquote><p>很多面试会有考死锁，简单来说当线程同时需要获取多个锁就很容易出现死锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String A = <span class="string">"A"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String B = <span class="string">"B"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">System.out.println(<span class="string">"T1 Locked A"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">System.out.println(<span class="string">"T1 Locked B"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread t2 =<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">System.out.println(<span class="string">"T2 Locked B"</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">System.out.println(<span class="string">"T2 Locked A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="避免死锁的出现"><a href="#避免死锁的出现" class="headerlink" title="避免死锁的出现"></a>避免死锁的出现</h2><ul><li>避免一个线程同时获取多个锁</li><li></li></ul><h2 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h2><p>当资源(cpu)的利用率已经很高，达到或者接近100%的时候，增加线程反而导致程序运行的更慢。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>无线路由器桥接步骤</title>
      <link href="/It-Infrastructures/Wireless-Bridging/"/>
      <url>/It-Infrastructures/Wireless-Bridging/</url>
      
        <content type="html"><![CDATA[<p>路由器A已经设置可以上网; 路由器A提供DHCP服务，网关地址：192.168.1.1; 现将无线路由器B桥接到A来扩大信号范围。<br>步骤如下：</p><h1 id="一：重置无线路由器B"><a href="#一：重置无线路由器B" class="headerlink" title="一：重置无线路由器B"></a>一：重置无线路由器B</h1><p>重置到初始状态</p><h1 id="二：设置初始密码"><a href="#二：设置初始密码" class="headerlink" title="二：设置初始密码"></a>二：设置初始密码</h1><p>浏览器登录路由器B，一般登录地址192.168.1.1。 第一次打开，会提示输入密码：（假设输入密码：Peng12345）</p><h1 id="三：设置无线路路由器的安全"><a href="#三：设置无线路路由器的安全" class="headerlink" title="三：设置无线路路由器的安全"></a>三：设置无线路路由器的安全</h1><h3 id="关闭WPS"><a href="#关闭WPS" class="headerlink" title="关闭WPS"></a>关闭WPS</h3><p>无线设置 &gt; WPS &gt; 关闭<br>设置完成，等待路由器重启</p><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>无线设置 &gt; 无线安全设置 &gt; WPA-PSK/WPA2-PSK<br>认证类型： WPA2； 加密算法： SKIP；设置密码 （比如： 66668888）此类算法目前万能钥匙服务破解。</p><blockquote><p> 保存后路由器重启，重新输入密码进行连接。</p></blockquote><h1 id="四：设置桥接"><a href="#四：设置桥接" class="headerlink" title="四：设置桥接"></a>四：设置桥接</h1><p>进入 无线设置 &gt; 基本设置页面； 设置SSID名称； 点击开启WDS；通过扫描选择路由器A; (如果知道A的SSID和加密及信道信息等，可以直接输入)。 点击扫描后会列出供选择的wifi，选择A点击链接；输入对应的加密方式和密码。 然后路由器会重启，此时我们连接路由器B即可上网</p><blockquote><p>在设置桥接的时候需要选定信道，保存的时候如果设置的信道和A的无线信号的信道不一致将无法保存；同时会提示并提示信道是几。为了保证B上网通畅，需要将A的无线信号的信道选定一个，而不是自动，防止重启路由信道变化后导致无法通过路由器B上网。</p></blockquote><h1 id="五：修改Lan-口地址-amp-关闭DHCP服务"><a href="#五：修改Lan-口地址-amp-关闭DHCP服务" class="headerlink" title="五：修改Lan 口地址 &amp; 关闭DHCP服务"></a>五：修改Lan 口地址 &amp; 关闭DHCP服务</h1><p>进入：网络参数&gt;Lan口设置；修改Lan口的地址为192.168.1.2 防止和A冲突；同时关闭DHCP服务。 </p><blockquote><p>关闭DHCP后有可能动态分配的IP地址和路由器的IP地址不在一个网段，比如：手机终端的地址是：192.168.2.101，这个时候手机浏览器是无法打开<a href="http://192.168.1.2" target="_blank" rel="noopener">http://192.168.1.2</a> 来配置路由器B的。如果需要进一步配置路由器B，则需要手动设置终端的静态IP地址，保证和路由器同一个网段（比如：192.168.1.13）来连接配置路由器B。配置完成后需要清除静态的IP地址，切换至动态IP地址才能上网。</p></blockquote><h1 id="六：-连接路由器B上网去吧"><a href="#六：-连接路由器B上网去吧" class="headerlink" title="六： 连接路由器B上网去吧"></a>六： 连接路由器B上网去吧</h1><p>把B放在你家窗口，和其他家的路由器桥接起来共享你们的网络吧。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Mac Pro 上 配置 Shadowsocks NG</title>
      <link href="/It-Infrastructures/shadowsocks-ng-mac/"/>
      <url>/It-Infrastructures/shadowsocks-ng-mac/</url>
      
        <content type="html"><![CDATA[<p>购买了shadowsocks 账号后，只需要下载Shadowsocks NG简单配置即可完成翻墙。<br>下载地址：<a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank" rel="noopener">https://github.com/shadowsocks/ShadowsocksX-NG</a></p><blockquote><p>百度shadowsocks搜不到什么文章，估计是被屏蔽了，可以理解，估计大部分翻墙的都是要上google的。 CDN上有很多文章，不过由于更新问题，大部分都容易误导人。</p></blockquote><p>上面链接去找下载地址，下载后是无需安装的，直接运行。<br>通过server -&gt; perference 来配置后即可。<br><img src="/assets/preimg/It-Infrastructures/shadowsocks-ng-server-config.png" alt="shadowsocks-ng-server-config.png"></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
