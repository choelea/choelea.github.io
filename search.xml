<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Data Elasticsearch 快速上手全文检索</title>
      <link href="/Elastic-Technologies/spring-data-elasticsearch-quick-start/"/>
      <url>/Elastic-Technologies/spring-data-elasticsearch-quick-start/</url>
      
        <content type="html"><![CDATA[<p>通过Spring Data Elasticsearch 实现全文检索; 通过指定 boost 来控制查询语句的相对的权重; 通过自定义ResultMapper 来实现查询聚合功能。</p><h2 id="Elasticsearch-基础知识"><a href="#Elasticsearch-基础知识" class="headerlink" title="Elasticsearch 基础知识"></a>Elasticsearch 基础知识</h2><p>建立对Elasticsearch的初步的认识可以参考：<a href="https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA</a></p><p>上面的有些解释只是为了方便初学者快速掌握知识。ES的索引的Type在后期ES中会逐渐消失。<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html</a></p><p>官方的中文文档参考： <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>Spring Boot： 1.4.7</li><li>Spring Data Elasticsearch  2.0.11</li><li>Elasticsearch server 2.4</li></ul><blockquote><p>追加补充： 在随后的版本spring-data-elasticsearch 2.1.10.RELEASE 中增加了<code>AggregatedPage</code> ， 同时<code>org.springframework.data.elasticsearch.core.DefaultResultMapper</code> 也增加了聚合的支持。 笔者这里针对聚合的有部分工作，在2.1.10.RELEASE种已经不在需要，或者可以更优化一些。</p></blockquote><h2 id="安装与运行"><a href="#安装与运行" class="headerlink" title="安装与运行"></a>安装与运行</h2><h3 id="Elasticsearch-安装及运行"><a href="#Elasticsearch-安装及运行" class="headerlink" title="Elasticsearch 安装及运行"></a>Elasticsearch 安装及运行</h3><p>elasticsearch 是运行于java之上，可以直接下载运行。从<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-6" target="_blank" rel="noopener">https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-6</a> 下载2.4.6 版本。 </p><ul><li>ZIP sha   —– window安装包  </li><li>TAR sha   —– Mac 或者linux安装包</li><li>DEB sha   </li><li>RPM sha   —– linux rpm 包可以安装成系统服务</li></ul><p>ZIP包解压的直接进入 bin 目录运行 <code>./elasticserach</code>, 运行 <code>./elasticsearch -d</code> 后台运行<br> RPM 安装后通过 <code>service elasticsearch start</code> 来启动</p><h3 id="Kibana-安装及运行"><a href="#Kibana-安装及运行" class="headerlink" title="Kibana 安装及运行"></a>Kibana 安装及运行</h3><p> 和es的类似，elasticsearch2.4 对应kibana的版本是4.6； 下载地址： <a href="https://www.elastic.co/downloads/past-releases/kibana-4-6-6" target="_blank" rel="noopener">https://www.elastic.co/downloads/past-releases/kibana-4-6-6</a> </p><blockquote><p>kibana 解压方式无后台运行命令，建议通过rpm方式安装<code>sudo rpm -ivh kibana-4.6.6-x86_64.rpm</code> , 以服务方式启动和停止。</p></blockquote><h3 id="安装Kibana的Sense插件"><a href="#安装Kibana的Sense插件" class="headerlink" title="安装Kibana的Sense插件"></a>安装Kibana的Sense插件</h3><p>此版本下没有dev tools，需要单独安装sense插件, 进入Kibana 的安装目录 <code>/opt/kibana</code> 运行<code>./bin/kibana plugin --install elastic/sense</code>。 </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/choelea/spring-data-elasticsearch-quick-start" target="_blank" rel="noopener">https://github.com/choelea/spring-data-elasticsearch-quick-start</a>  2.0.11.RELEASE<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/choelea/spring-data-elasticsearch-quick-start</span><br><span class="line">cd spring-data-elasticsearch-quick-start/</span><br><span class="line">git checkout tags/2.0.11.RELEASE</span><br></pre></td></tr></table></figure></p><blockquote><p>最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch  自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper  已经支持了聚合。无需为聚合儿自定义ResultMapper。 </p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.data.elasticsearch.repositories.enabled = true</span><br><span class="line">spring.data.elasticsearch.cluster-nodes : 192.168.1.99:9300</span><br></pre></td></tr></table></figure><h2 id="定义Document"><a href="#定义Document" class="headerlink" title="定义Document"></a>定义Document</h2><p>参考： <code>com.joe.springdataelasticsearch.document.ProductDoc</code> . 定义文档需要注意必须有个id字段或者通过注解指定一个id字段，只有在有ID得情况下，文档才可以被更新。 否则会抛出异常：<code>No id property found for class com.joe.springdataelasticsearch.document.ProductDoc</code></p><p>当前版本下需要指定Field的type，否则也会报错。</p><blockquote><p>修改FieldType 会导致无法通过程序启动异常，需要手动删除后创建索引。 比如: 原有的type字段的FieldType是Long，改成String后会出现类似如下错误：<code>mapper [type] of different type, current_type [long], merged_type [string]</code></p></blockquote><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>系统启动后，创建索引和创建/更新mapping</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elasticsearchTemplate.deleteIndex(ProductDoc.class);</span><br><span class="line">elasticsearchTemplate.createIndex(ProductDoc.class);</span><br><span class="line">elasticsearchTemplate.putMapping(ProductDoc.class);</span><br></pre></td></tr></table></figure><p>启动后可以通过<code>http://192.168.1.99:9200/product-index/_mapping/main/</code> 来查看mapping。</p><blockquote><p>Notes：文档索引的mapping的创建，不会因为注解@Document， 而是因为ElasticsearchRepository的存在。删除ProductDocRespository，可以发现启动服务后，文档不会自动创建。 参考问题：<a href="https://stackoverflow.com/questions/29496081/spring-data-elasticsearchs-field-annotation-not-working" target="_blank" rel="noopener">https://stackoverflow.com/questions/29496081/spring-data-elasticsearchs-field-annotation-not-working</a></p></blockquote><h2 id="索引文档"><a href="#索引文档" class="headerlink" title="索引文档"></a>索引文档</h2><p>elasticsearch 是通过PUT接口来索引文档。<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html</a>。 在使用Spring Data Elasticsearch的的时候，我们可以很方便的通过防JPA Repository的方式来操作;  <code>ProductDocRespository.save(ProductDoc doc)</code>  来索引和更新文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface ProductDocRespository extends ElasticsearchRepository&lt;ProductDoc, Long&gt;</span><br></pre></td></tr></table></figure></p><p>参考<code>com.joe.springdataelasticsearch.listner.ContextRefreshedListener</code> 来查看索引测试文档数据。</p><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><p><img src="http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-productdocs.png" alt="spring-data-elasticsearch-productdocs"></p><h2 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h2><p>查询主要解决：</p><ul><li>多个字段搜索查询使用布尔匹配的方式， 参考官方说明 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_how_match_uses_bool.html" target="_blank" rel="noopener">布尔匹配</a></li><li>不同字段的权重设置，采用设置Boost方式， 参考： <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_boosting_query_clauses.html" target="_blank" rel="noopener">查询语句提升权重</a></li><li>聚合结果集 </li></ul><p><strong>具体代码参考如下</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public Page&lt;ProductDoc&gt; search(String keyword, Boolean isSelfRun, Pageable pageable) &#123;</span><br><span class="line">BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">if (StringUtils.isNotEmpty(keyword)) &#123;</span><br><span class="line">queryBuilder.should(QueryBuilders.matchQuery(ProductDoc._name, keyword).boost(3)); // 给name字段更高的权重</span><br><span class="line">queryBuilder.should(QueryBuilders.matchQuery(ProductDoc._description, keyword));   // description 默认权重 1</span><br><span class="line">queryBuilder.minimumNumberShouldMatch(1); // 至少一个should条件满足</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isSelfRun!=null &amp;&amp; isSelfRun) &#123;</span><br><span class="line">queryBuilder.must(QueryBuilders.matchQuery(ProductDoc._isSelfRun, Boolean.TRUE)); // 精准值条件查询</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)</span><br><span class="line">.withPageable(pageable).build();</span><br><span class="line">LOGGER.info(&quot;\n search(): searchContent [&quot; + keyword + &quot;] \n DSL  = \n &quot; + searchQuery.getQuery().toString());</span><br><span class="line">return productDocRespository.search(searchQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试全文检索"><a href="#测试全文检索" class="headerlink" title="测试全文检索"></a>测试全文检索</h2><ol><li><a href="http://localhost:8080/products?keyword=huawei" target="_blank" rel="noopener">http://localhost:8080/products?keyword=huawei</a> </li><li><a href="http://localhost:8080/products?keyword=iphone" target="_blank" rel="noopener">http://localhost:8080/products?keyword=iphone</a> 通过对iphone的搜索可以验证boost值得效果</li><li><a href="http://localhost:8080/products?keyword=iphone&amp;isSelfRun=true" target="_blank" rel="noopener">http://localhost:8080/products?keyword=iphone&amp;isSelfRun=true</a>  验证精准值匹配效果</li></ol><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><p><strong>需求： </strong>统计搜索出来的智能手机和普通手机的数量，从而提供进一步的过滤。</p><p>聚合的详细理解参考 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/aggregations.html" target="_blank" rel="noopener">聚合 | Elasticsearch: 权威指南  | Elastic</a>， 这里我们只通过简单的桶（Bucket）的方式来实现需求。</p><p>通过google搜索<code>spring data elasticsearch aggregation example</code> 不难找到类似如下链接中的代码：<a href="https://github.com/spring-projects/spring-data-elasticsearch/blob/master/src/test/java/org/springframework/data/elasticsearch/core/aggregation/ElasticsearchTemplateAggregationTests.java；" target="_blank" rel="noopener">https://github.com/spring-projects/spring-data-elasticsearch/blob/master/src/test/java/org/springframework/data/elasticsearch/core/aggregation/ElasticsearchTemplateAggregationTests.java；</a> 但是我们需要同时返回桶的信息和检索出来的分页信息。如何利用Spring Data Elasticsearch来完成？</p><p>通过查看spring-data-elasticsearch的源代码我们可以发现<code>org.springframework.data.elasticsearch.core.DefaultResultMapper</code> 会被默认用来返回分页检索出来的数据。需要同时返回分页数据及桶的数据，我们就需要定制一个ResultMapper； 参考：<code>com.joe.springdataelasticsearch.core.ProductDocAggregationResultMapper</code>。</p><h2 id="聚合查询测试"><a href="#聚合查询测试" class="headerlink" title="聚合查询测试"></a>聚合查询测试</h2><p><a href="http://localhost:8080/products/aggregation?keyword=China" target="_blank" rel="noopener">http://localhost:8080/products/aggregation?keyword=China</a> 可以查出总共有5条结果，聚合返回告诉你其中有4个智能手机，1个普通手机。<br><strong>返回JSON 数据如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;content&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 2,</span><br><span class="line">      &quot;name&quot;: &quot;Huawei&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 5,</span><br><span class="line">      &quot;name&quot;: &quot;Iphone X&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Iphone X is made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 1,</span><br><span class="line">      &quot;name&quot;: &quot;Mac Pro&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Mac Pro is made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 7,</span><br><span class="line">      &quot;name&quot;: &quot;Nokia N90&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Nokia N 90 is made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;GENERAL&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 3,</span><br><span class="line">      &quot;name&quot;: &quot;Huawei Max3&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Huawei is designed / made by China&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;isSelfRun&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;bucketsByType&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;key&quot;: &quot;SMARTPHONE&quot;,</span><br><span class="line">      &quot;lable&quot;: &quot;type&quot;,</span><br><span class="line">      &quot;docCount&quot;: 4</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;key&quot;: &quot;GENERAL&quot;,</span><br><span class="line">      &quot;lable&quot;: &quot;type&quot;,</span><br><span class="line">      &quot;docCount&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;totalElements&quot;: 5,</span><br><span class="line">  &quot;last&quot;: true,</span><br><span class="line">  &quot;totalPages&quot;: 1,</span><br><span class="line">  &quot;number&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 10,</span><br><span class="line">  &quot;sort&quot;: null,</span><br><span class="line">  &quot;numberOfElements&quot;: 5,</span><br><span class="line">  &quot;first&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h2><p>参考：<a href="http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-highlight" target="_blank" rel="noopener">http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-highlight</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Spring Data Elasticsearch 快速上手全文检索 - 进阶</title>
      <link href="/Elastic-Technologies/spring-data-elasticsearch-quick-start-2/"/>
      <url>/Elastic-Technologies/spring-data-elasticsearch-quick-start-2/</url>
      
        <content type="html"><![CDATA[<p>继上一篇 <a href="http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-quick-start" target="_blank" rel="noopener">Spring Data Elasticsearch 快速上手全文检索</a>之后，进一步深入以下内容：</p><ul><li>高亮显示关键词</li><li>指定Analyzer更合理的检索</li></ul><blockquote><p>最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch 自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper 已经支持了聚合。无需为聚合儿自定义ResultMapper。</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/choelea/spring-data-elasticsearch-quick-start</span><br></pre></td></tr></table></figure><p><a href="https://github.com/elastic/elasticsearch/issues/11713" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch/issues/11713</a></p><h2 id="高亮关键词"><a href="#高亮关键词" class="headerlink" title="高亮关键词"></a>高亮关键词</h2><p>对name和description中的关键字进行高亮显示，直接参考代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)</span><br><span class="line">.withPageable(pageable)</span><br><span class="line">.withHighlightFields( new HighlightBuilder.Field(ProductDoc._name).forceSource(true), new HighlightBuilder.Field(ProductDoc._description).forceSource(true))</span><br><span class="line">.addAggregation(termBuilder).build();</span><br></pre></td></tr></table></figure></p><p>默认情况下返回高亮字段不在_source内，当转成成我们的ProductDoc的时候对应的name和description是不会有变化的， 这个时候还是需要定制ResultMapper， 因此这里定制了一个ExtResultMapper。 将高亮字段覆盖到ProductDoc 中对应的字段去。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>文档的title，页面及列表都会展示</title>
      <link href="/Elastic-Technologies/spring-data-elasticsearch-2.1.12-highlight/"/>
      <url>/Elastic-Technologies/spring-data-elasticsearch-2.1.12-highlight/</url>
      
        <content type="html"><![CDATA[<p>这个是一个模板, 请务必将showOnHome 修改为true</p><h1 id="欢迎使用"><a href="#欢迎使用" class="headerlink" title="欢迎使用"></a>欢迎使用</h1><p>本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：</p><ul><li><strong>Markdown和扩展Markdown简洁的语法</strong></li><li><strong>代码块高亮</strong></li><li><strong>图片链接和图片上传</strong></li><li><strong>丰富的快捷键</strong></li></ul><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>Cmd-‘ 引用</li><li>Cmd-B    加粗</li><li>Cmd-E     清除Block</li><li>Cmd-H     标题Header变小</li><li>Cmd-I       斜体</li><li>Cmd-K      链接</li><li>Cmd-L     无序列表</li><li>Cmd-P     Preview</li><li>Cmd-Alt-C     代码块</li><li>Cmd-Alt-I     插入图片</li><li>Cmd-Alt-L    有序列表</li><li>Shift-Cmd-H  标题Header变大</li><li>F9     窗口拆分</li><li>F11    全屏</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/Elastic-Technologies/elasticsearch-fuzzy-query/"/>
      <url>/Elastic-Technologies/elasticsearch-fuzzy-query/</url>
      
        <content type="html"><![CDATA[<hr><p>title:  Elasticsearch 模糊匹配<br>description: fuzzy 查询是一个词项级别的查询，所以它不做任何分析。它通过某个词项以及指定的 fuzziness 查找到词典中所有的词项。 fuzziness 默认设置为 AUTO 。<br>…</p><p>这个是一个模板, 请务必将showOnHome 修改为true</p><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/fuzzy-scoring.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/fuzzy-scoring.html</a><br>以下来自<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">模糊性评分编辑</span><br><span class="line">用户喜欢模糊查询。他们认为这种查询会魔法般的找到正确拼写组合。 很遗憾，实际效果平平。</span><br><span class="line"></span><br><span class="line">假设我们有1000个文档包含 ``Schwarzenegger`` ，只是一个文档的出现拼写错误 ``Schwarzeneger`` 。 根据 term frequency/inverse document frequency 理论，这个拼写错误文档比拼写正确的相关度更高，因为错误拼写出现在更少的文档中！</span><br><span class="line"></span><br><span class="line">换句话说，如果我们对待模糊匹配 类似其他匹配方法，我们将偏爱错误的拼写超过了正确的拼写，这会让用户抓狂。</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>kibana的访问控制 - Nginx 反向代理 - 免费</title>
      <link href="/Elastic-Technologies/Nignx-Kibana-Security/"/>
      <url>/Elastic-Technologies/Nignx-Kibana-Security/</url>
      
        <content type="html"><![CDATA[<p>前一篇<a href="http://blog.csdn.net/choelea/article/details/53841218" target="_blank" rel="noopener"> Kibana 5.x 加强安全</a> 采用的是官方的x-pack 插件来实现elastic技术栈的相关产品的权限控制。功能不错，也提供了很大的灵活性，不过x-pack并非免费产品；咨询了下licence价格，大概三个节点年费六千多美刀。。。废话不多说了，想想替代方案 - Nginx 反向代理 （收回5601端口，通过nginx反向代理+basic authentication来保证安全）</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-on-centos-7" target="_blank" rel="noopener">How To Create a Self-Signed SSL Certificate for Nginx on CentOS 7</a></p><h3 id="配置Nginx-SSL"><a href="#配置Nginx-SSL" class="headerlink" title="配置Nginx SSL"></a>配置Nginx SSL</h3><h4 id="第一步-安装-Nginx-并配置防火墙"><a href="#第一步-安装-Nginx-并配置防火墙" class="headerlink" title="第一步: 安装 Nginx 并配置防火墙"></a>第一步: 安装 Nginx 并配置防火墙</h4><p>参考上面的文章</p><blockquote><p><strong>注意： 80 和 443 端口必须对外打开。 当遇见ERR_CONNECTION_REFUSED 这类错误的时候，一定要提高警惕查看端口是否打开。以免浪费时间在配置上面。可以ssh到nginx机器上通过curl 的命令来验证，如果服务器上curl可以访问，外面不可访问；那么很可能端口没开放</strong></p></blockquote><h4 id="第二步：生成证书"><a href="#第二步：生成证书" class="headerlink" title="第二步：生成证书"></a>第二步：生成证书</h4><p>参考上面的文章</p><h4 id="第三步：添加kibana-https-conf配置"><a href="#第三步：添加kibana-https-conf配置" class="headerlink" title="第三步：添加kibana.https.conf配置"></a>第三步：添加kibana.https.conf配置</h4><p>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 http2 ssl;</span><br><span class="line">    listen [::]:443 http2 ssl;</span><br><span class="line"></span><br><span class="line">    server_name kibana.domain.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;</span><br><span class="line">    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;</span><br><span class="line">    ssl_dhparam /etc/ssl/certs/dhparam.pem;</span><br><span class="line"></span><br><span class="line">    ########################################################################</span><br><span class="line">    # from https://cipherli.st/                                            #</span><br><span class="line">    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html #</span><br><span class="line">    ########################################################################</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_ciphers &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;</span><br><span class="line">    ssl_ecdh_curve secp384r1;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_tickets off;</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    ssl_stapling_verify on;</span><br><span class="line">    resolver 8.8.8.8 8.8.4.4 valid=300s;</span><br><span class="line">    resolver_timeout 5s;</span><br><span class="line">    # Disable preloading HSTS for now.  You can use the commented out header line that includes</span><br><span class="line">    # the &quot;preload&quot; directive if you understand the implications.</span><br><span class="line">    #add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains&quot;;</span><br><span class="line">    add_header X-Frame-Options DENY;</span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line"></span><br><span class="line">    ##################################</span><br><span class="line">    # END https://cipherli.st/ BLOCK #</span><br><span class="line">    ##################################</span><br><span class="line">    </span><br><span class="line">    # 这里是反向代理到kibana服务 走http协议</span><br><span class="line">    location / &#123;</span><br><span class="line">       proxy_pass   http://localhost:5601;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第四步：验证SSL-访问"><a href="#第四步：验证SSL-访问" class="headerlink" title="第四步：验证SSL 访问"></a>第四步：验证SSL 访问</h4><p>为设置http跳转的时候，注意在浏览器地址栏中输入<a href="https://kibana.domain.com" target="_blank" rel="noopener">https://kibana.domain.com</a> 来验证</p><h4 id="第五步：-添加Nginx的Basic-Authentication-访问控制"><a href="#第五步：-添加Nginx的Basic-Authentication-访问控制" class="headerlink" title="第五步： 添加Nginx的Basic Authentication 访问控制"></a>第五步： 添加Nginx的Basic Authentication 访问控制</h4><ol><li>查看是否有安装httpd-tools <code>sudo rpm -qa | grep httpd-tools</code>, 如果有，则可以看到如下信息：<code>httpd-tools-2.4.6-40.el7.centos.4.x86_64</code> 如果没有安装，可以通过<code>sudo yum -y install httpd-tools</code> 来安装</li><li><p>配置nginx 反向代理 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auth_basic &quot; Basic Authentication &quot;;      </span><br><span class="line">auth_basic_user_file &quot;/etc/nginx/.htpasswd&quot;;</span><br></pre></td></tr></table></figure><p>添加至反向代理的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass   http://localhost:5601;</span><br><span class="line">    auth_basic &quot; Basic Authentication &quot;;      </span><br><span class="line">    auth_basic_user_file &quot;/etc/nginx/.htpasswd&quot;;       </span><br><span class="line">&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></li><li><p>生成密码文件 <code>sudo htpasswd -c /etc/nginx/.htpasswd username</code> 根据提示输入密码</p></li><li>重新加载ngixn <code>sudo service nginx reload</code></li><li>再次登录来，提示弹出框，输入用户名和密码</li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Metricbeat 的使用</title>
      <link href="/Elastic-Technologies/Metricbeat-Usage/"/>
      <url>/Elastic-Technologies/Metricbeat-Usage/</url>
      
        <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>统计并展示系统的信息 cpu， 内存等 (当然metricbeat能收集的信息种类还很多)</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol><li>版本： 5.x</li><li>已经安装了ELK (elasticsearch, logstash (可选）, kibana)</li><li>安装了x-pack  （配置了对应的security）（可选） 参考 <a href="http://blog.csdn.net/choelea/article/details/53841218" target="_blank" rel="noopener">Kibana 5.x 加强安全</a></li></ol><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装，配置参考  <a href="https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-installation.html" target="_blank" rel="noopener">官方网站</a><br>使用OOTB配置即可，一般只需要修改ES的端口和地址。 如果加强了security，也需要更改 metricbeat.yml。 这里已经加强了安全，配置了用户，故需要更改metricbeat.yml添加elasticsearch的相关访问用户。<br>（创建角色和用户可以参考 <a href="http://blog.csdn.net/choelea/article/details/53841218" target="_blank" rel="noopener">Kibana 5.x 加强安全</a> ，这里角色需要用操作索引metricbeat-*）</p><blockquote><p>elasticsearch 默认绑定了localhost的访问，需要取消这种绑定。 设置<code>network.host: 0.0.0.0</code> 0.0.0.0 表示任意地址，如果设置成了IP地址，那么同台机器的kibana和logstash的需要做对应的修改。（比如：192.168.1.50， logstash和kibana需要把链接elasticsearch的hosts 从localhost改成：192.168.1.50）</p></blockquote><h3 id="加载kibana的示例-index-template-和-dashboards"><a href="#加载kibana的示例-index-template-和-dashboards" class="headerlink" title="加载kibana的示例 index template 和 dashboards"></a>加载kibana的示例 index template 和 dashboards</h3><blockquote><p>因为metricbeat 可能装在多个机器，index template 和dashboard 只需要导入一次即可。默认会自动加载index template到elasticsearch。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./scripts/import_dashboards -es http://localhost:9200 -user elastic -pass changeme</span><br></pre></td></tr></table></figure><h3 id="kibana中查看对应的结果"><a href="#kibana中查看对应的结果" class="headerlink" title="kibana中查看对应的结果"></a>kibana中查看对应的结果</h3><p>登录kibana打开对应的dashboard 既可以看到统计报告了</p><p><img src="http://tech.jiu-shu.com/Elastic-Technologies/kibana-statics.png" alt="Kibana 中 展示系统运行状态"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Logstash Filter 配置</title>
      <link href="/Elastic-Technologies/Logstash-Filter/"/>
      <url>/Elastic-Technologies/Logstash-Filter/</url>
      
        <content type="html"><![CDATA[<p>笔者这里仅仅列出配置文件，在研究之后最红并没有采用在logstash的接下日志为json的做法。而是将json的输出放在了各个服务/应用中处理， spring boot的app可以参考：<a href="https://github.com/logstash/logstash-logback-encoder" target="_blank" rel="noopener">logstash-logback-encoder</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  #If log line contains tab character followed by &apos;at&apos; then we will tag that entry as stacktrace</span><br><span class="line">  if [message] =~ &quot;\tat&quot; &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; [&quot;message&quot;, &quot;^(\tat)&quot;]</span><br><span class="line">      add_tag =&gt; [&quot;stacktrace&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #Grokking Spring Boot&apos;s default log format</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; [ </span><br><span class="line">#Record transaction</span><br><span class="line">&quot;message&quot;,&quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \[\s*(?&lt;thread&gt;[^\]]+)\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\s*: \[\s*(?&lt;transactionInfo&gt;[^\]]+)\]&quot;,</span><br><span class="line">&quot;message&quot;, &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \[\s*(?&lt;thread&gt;[^\]]+)\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\s*:\s+(?&lt;logmessage&gt;.*)&quot;,</span><br><span class="line">&quot;message&quot;, &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- .+? :\s+(?&lt;logmessage&gt;.*)&quot;</span><br><span class="line">             ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #Parsing out timestamps which are in timestamp field thanks to previous grok section</span><br><span class="line">  date &#123;</span><br><span class="line">    match =&gt; [ &quot;timestamp&quot; , &quot;yyyy-MM-dd HH:mm:ss.SSS&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line"> elasticsearch&#123;&#125; </span><br><span class="line"> stdout&#123;</span><br><span class="line">   codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里grok配置了三册过滤， 第一层用作统计，message的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2016-07-15 20:30:30.884  INFO 14624 --- [nio-8081-exec-3] c.l.a.w.controller.OfbizProxyController  : [&#123;&quot;transactionCode&quot;:&quot;ofbizProxy&quot;,&quot;transactionDuration&quot;:246&#125;]</span><br></pre></td></tr></table></figure><p>使用<a href="http://grokdebug.herokuapp.com/" target="_blank" rel="noopener">Grok Debugger</a> 解析后如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"timestamp"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"2016-07-15 20:30:30.884"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"YEAR"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"2016"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"MONTHNUM"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"07"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"MONTHDAY"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"15"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"TIME"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"20:30:30.884"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"HOUR"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"20"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"MINUTE"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"30"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"SECOND"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"30.884"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"level"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"INFO"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"pid"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"14624"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"BASE10NUM"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"14624"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"thread"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"nio-8081-exec-3"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"class"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"c.l.a.w.controller.OfbizProxyController"</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"transactionInfo"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"&#123;"</span>transactionCode<span class="string">":"</span>ofbizProxy<span class="string">","</span>transactionDuration<span class="string">":246&#125;"</span></span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二层针对普通的log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2016-07-15 20:30:07.768  INFO 14624 --- [nio-8081-exec-1] c.l.a.web.controller.LoginController     : Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1</span><br></pre></td></tr></table></figure><p>解析后的json如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;timestamp&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;2016-07-15 20:30:07.768&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;YEAR&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;2016&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;MONTHNUM&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;07&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;MONTHDAY&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;15&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;TIME&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;20:30:07.768&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;HOUR&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;20&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;MINUTE&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;30&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;SECOND&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;07.768&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;level&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;INFO&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;pid&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;14624&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;BASE10NUM&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;14624&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;thread&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;nio-8081-exec-1&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;class&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;c.l.a.web.controller.LoginController&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;logmessage&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1&quot;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三层针对遗漏的无法匹配到的log再次解析， 这里暂时没有示例</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>使用ELK来做日志归总</title>
      <link href="/Elastic-Technologies/Elasticsearch-Logstash-Kibana-Log-Collecting/"/>
      <url>/Elastic-Technologies/Elasticsearch-Logstash-Kibana-Log-Collecting/</url>
      
        <content type="html"><![CDATA[<h1 id="ELK-初探"><a href="#ELK-初探" class="headerlink" title="ELK 初探"></a>ELK 初探</h1><p>ELK实时日志分析平台 初次尝试。 ELK 的多种架构请参考文章: <a href="https://blog.csdn.net/lively1982/article/details/50678657" target="_blank" rel="noopener">漫谈ELK在大数据运维中的应用</a></p><h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><ul><li>CentOS 7 </li><li>Oracle JDK 8</li><li>Kibana 4.5.2</li><li>Elaticsearch 2.3.4</li><li>logstash 2.3.4</li><li>filebeat 1.2.3<br>查看version command： <code>filebeat --version</code><h2 id="系统架构图"><a href="#系统架构图" class="headerlink" title="系统架构图"></a>系统架构图</h2><img src="http://tech.jiu-shu.com/Elastic-Technologies/elk.png" alt="elk"><h2 id="软件的安装"><a href="#软件的安装" class="headerlink" title="软件的安装"></a>软件的安装</h2>采用yum的安装模式。首先需要添加对应的repo文件。 对应的详细的安装方法可以参考在线文档， 这里以logstash为例。<h3 id="logstash-安装"><a href="#logstash-安装" class="headerlink" title="logstash 安装"></a>logstash 安装</h3></li></ul><ul><li><strong>Download and install the public signing key</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure><ul><li><strong>添加Repo到目录/etc/yum.repos.d/， 比如：logstash.repo</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[logstash-2.3]</span><br><span class="line">name=Logstash repository for 2.3.x packages</span><br><span class="line">baseurl=https://packages.elastic.co/logstash/2.3/centos</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><ul><li><strong>安装</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install logstash</span><br></pre></td></tr></table></figure><ul><li><strong>随系统自动启动</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig --add filebeat</span><br></pre></td></tr></table></figure></li></ul><h3 id="其他软件的repositories"><a href="#其他软件的repositories" class="headerlink" title="其他软件的repositories"></a>其他软件的repositories</h3><p><strong>filebeat</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[beats]</span><br><span class="line">name=Elastic Beats Repository</span><br><span class="line">baseurl=https://packages.elastic.co/beats/yum/el/$basearch</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure><p><strong>elasticsearch <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-repositories.html" target="_blank" rel="noopener">官方介绍</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch-2.x]</span><br><span class="line">name=Elasticsearch repository for 2.x packages</span><br><span class="line">baseurl=https://packages.elastic.co/elasticsearch/2.x/centos</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p><strong>kibana <a href="https://www.elastic.co/guide/en/kibana/current/setup.html" target="_blank" rel="noopener">在线文档</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[kibana-4.5]</span><br><span class="line">name=Kibana repository for 4.5.x packages</span><br><span class="line">baseurl=http://packages.elastic.co/kibana/4.5/centos</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p><strong>查看服务状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">servie logstash status</span><br></pre></td></tr></table></figure><p><strong>查看服务文件路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql logstash</span><br></pre></td></tr></table></figure><h2 id="FileBeat-使用"><a href="#FileBeat-使用" class="headerlink" title="FileBeat 使用"></a>FileBeat 使用</h2><p>filebeat 安装后的配置文件存放于：/etc/filebeat/下<br>修改配置文件filebeat.yml<br><strong>1， 修改文件的路径：比如：/home/osboxes/app.log</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filebeat:</span><br><span class="line">  prospectors:</span><br><span class="line">    -</span><br><span class="line">      paths:</span><br><span class="line">        - &quot;/home/osboxes/app.log&quot;</span><br></pre></td></tr></table></figure></p><p><strong>2， 修改输出， 默认是直接输出到Elasticsearch，我们修改输出到logstash</strong><br>只需要打开对应的注释即可，将elasticsearch相关注释掉， 打开logstash的注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line">  logstash:</span><br><span class="line">    hosts: [&quot;127.0.0.1:5044&quot;]</span><br><span class="line"></span><br><span class="line">    # Optional load balance the events between the Logstash hosts</span><br><span class="line">    #loadbalance: true</span><br></pre></td></tr></table></figure><p>filebeat.yml 已经配置了多个output选项，我们只需要打开注解。 这里可以做个小的测试。 修改配置后可运行命令验证：<code>filebeat -configtest -e.</code> <strong>filebeat只能配置一个output项，修改配置后需要重启</strong><br>1，找到Console output，打开注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##Console output</span><br><span class="line">   console:</span><br><span class="line">    # Pretty print json event</span><br><span class="line">    pretty: true</span><br></pre></td></tr></table></figure><p>2， 停止filebeat服务 <code>sudo service filebeat stop</code>，手动启动filebeat来方便我们观察console输出<code>sudo filebeat -e -c /etc/filebeat/filebeat.yml</code>。(On windows: <code>filebeat.exe -e -c filebeat.yml</code>)<br>3， 新开窗口输出信息至文件/var/log/app.log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure></p><p>4，切换至filebeat的启动窗口可以看到如下的输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[osboxes@osboxes logstash]$ sudo filebeat -e -c /etc/filebeat/filebeat.yml</span><br><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2016-07-11T13:44:43.926Z&quot;,</span><br><span class="line">  &quot;beat&quot;: &#123;</span><br><span class="line">    &quot;hostname&quot;: &quot;osboxes&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;osboxes&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;count&quot;: 1,</span><br><span class="line">  &quot;fields&quot;: null,</span><br><span class="line">  &quot;input_type&quot;: &quot;log&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot;,</span><br><span class="line">  &quot;offset&quot;: 130,</span><br><span class="line">  &quot;source&quot;: &quot;/home/osboxes/app.log&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;log&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LogStash-配置"><a href="#LogStash-配置" class="headerlink" title="LogStash 配置"></a>LogStash 配置</h2><p> 上面的小测做完后，将filebeat的配置改回输出到logstash。</p><h3 id="连通filebeat和logstash"><a href="#连通filebeat和logstash" class="headerlink" title="连通filebeat和logstash"></a>连通filebeat和logstash</h3><p> <strong>1， 添加logstash.conf 文件在/etc/logstash/conf.d/logstash.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后可以通过命令验证配置是否正确：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf --configtest</span><br></pre></td></tr></table></figure><p><strong>2, 启动logstash</strong><br>采用命令启动方便从console观察输出。<code>sudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf</code>如果采用service的启动方式，需要去/var/log/logstash/logstash.stdout 查看log<br><strong>3，启动filebeat 然后向文件app.log 写入log</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure><p><strong>4，切换至logstash窗口， 可以观察到一下输出，证明filebeat已经可以成功输出到logstash</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[osboxes@osboxes bin]$ sudo ./logstash -f /etc/logstash/conf.d/logstash.conf </span><br><span class="line">Settings: Default pipeline workers: 1</span><br><span class="line">Pipeline main started</span><br><span class="line">2016-07-12T05:57:46.877Z osboxes 2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Grok-Filter-Plugin解析日志-（spring-boot-的默认日志格式）"><a href="#使用Grok-Filter-Plugin解析日志-（spring-boot-的默认日志格式）" class="headerlink" title="使用Grok Filter Plugin解析日志 （spring boot 的默认日志格式）"></a>使用Grok Filter Plugin解析日志 （spring boot 的默认日志格式）</h3><p><strong>1， 修改logstash.conf 添加filter，重启logstash</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  #If log line contains tab character followed by &apos;at&apos; then we will tag that entry as stacktrace</span><br><span class="line">  if [message] =~ &quot;\tat&quot; &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; [&quot;message&quot;, &quot;^(\tat)&quot;]</span><br><span class="line">      add_tag =&gt; [&quot;stacktrace&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #Grokking Spring Boot&apos;s default log format</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; [ &quot;message&quot;,</span><br><span class="line">               &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \[(?&lt;thread&gt;[A-Za-z0-9-]+)\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\s*:\s+(?&lt;logmessage&gt;.*)&quot;,</span><br><span class="line">               &quot;message&quot;,</span><br><span class="line">               &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- .+? :\s+(?&lt;logmessage&gt;.*)&quot;</span><br><span class="line">             ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #Parsing out timestamps which are in timestamp field thanks to previous grok section</span><br><span class="line">  date &#123;</span><br><span class="line">    match =&gt; [ &quot;timestamp&quot; , &quot;yyyy-MM-dd HH:mm:ss.SSS&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout&#123;</span><br><span class="line">   codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>2，写入log到文件app.log</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure><p><strong>3， 切换logstash查看输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       &quot;message&quot; =&gt; &quot;2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; &quot;2016-06-29T16:14:09.477Z&quot;,</span><br><span class="line">         &quot;count&quot; =&gt; 1,</span><br><span class="line">        &quot;fields&quot; =&gt; nil,</span><br><span class="line">        &quot;source&quot; =&gt; &quot;/home/osboxes/app.log&quot;,</span><br><span class="line">        &quot;offset&quot; =&gt; 987,</span><br><span class="line">          &quot;type&quot; =&gt; &quot;log&quot;,</span><br><span class="line">    &quot;input_type&quot; =&gt; &quot;log&quot;,</span><br><span class="line">          &quot;beat&quot; =&gt; &#123;</span><br><span class="line">        &quot;hostname&quot; =&gt; &quot;osboxes&quot;,</span><br><span class="line">            &quot;name&quot; =&gt; &quot;osboxes&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">          &quot;host&quot; =&gt; &quot;osboxes&quot;,</span><br><span class="line">          &quot;tags&quot; =&gt; [</span><br><span class="line">        [0] &quot;beats_input_codec_plain_applied&quot;</span><br><span class="line">    ],</span><br><span class="line">     &quot;timestamp&quot; =&gt; &quot;2016-06-29 17:14:09.477&quot;,</span><br><span class="line">         &quot;level&quot; =&gt; &quot;INFO&quot;,</span><br><span class="line">           &quot;pid&quot; =&gt; &quot;6244&quot;,</span><br><span class="line">        &quot;thread&quot; =&gt; &quot;main&quot;,</span><br><span class="line">         &quot;class&quot; =&gt; &quot;faultConfiguringBeanFactoryPostProcessor&quot;,</span><br><span class="line">    &quot;logmessage&quot; =&gt; &quot;No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，完成了初步的日志的解析，日志别解析至对应的fields中。 接下来将这些数据推送至Elasticsearch进行索引。</p><h3 id="修改logstash配置，输出到elasticsearch"><a href="#修改logstash配置，输出到elasticsearch" class="headerlink" title="修改logstash配置，输出到elasticsearch"></a>修改logstash配置，输出到elasticsearch</h3><p>修改配置文件的output。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这样的结构，Logstash使用http协议连接到Elasticsearch。上面的例子假设Logstash和Elasticsearch运行在同一个机器上。您可以使用主机配置<code>hosts =&gt; &quot;es-machine:9092</code>指定远程Elasticsearch实例。</p><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p>一次启动elasticsearch，kibana，logstash，filebeat。 （filebeat已启动的话，无需重启）</p><h3 id="安装Sense"><a href="#安装Sense" class="headerlink" title="安装Sense"></a>安装Sense</h3><p>进入/opt/kibana/ 运行：<code>$sudo ./bin/kibana plugin --install elastic/sense</code><br>You should now be able to access Sense with a web browser on <a href="http://localhost:5601/app/sense" target="_blank" rel="noopener">http://localhost:5601/app/sense</a></p><h2 id="spring-boot-日志配置"><a href="#spring-boot-日志配置" class="headerlink" title="spring boot 日志配置"></a>spring boot 日志配置</h2><p><strong>尽量采用统一的日志输出格式</strong><br>1, JPA 的sql输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#spring.jpa.show-sql = true #不推荐这种方式</span><br><span class="line">logging.level.org.hibernate.SQL=DEBUG</span><br></pre></td></tr></table></figure><h2 id="常见的部署方式"><a href="#常见的部署方式" class="headerlink" title="常见的部署方式"></a>常见的部署方式</h2><p>由于logstash比较消耗系统资源， 采用filebeat 来采集数据， 然后推送到logstash。 简单的case可以将logstash elasticsearch  kibana 放在一个虚拟机。 filebeat可以分别安装在各个对应的微服务上。 <strong>注意：</strong>当这些部署在不同的机器上的时候，需要打开对应的端口。 对应的配置也需要相对修改下。<br><strong>打开logstash的端口：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo firewall-cmd --zone=public --add-port=5044/tcp --permanent</span><br><span class="line">$ sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>filebeat的配置修改</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logstash:</span><br><span class="line">    # The Logstash hosts</span><br><span class="line">    hosts: [&quot;192.168.1.186:5044&quot;]</span><br></pre></td></tr></table></figure><p><strong>修改hostName</strong><br>如果微服务部署在不同的虚拟机中， 可以通过修改hostname，然后在ES的index中通过hostname 来区分日志的来源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hostnamectl status</span><br><span class="line"># hostnamectl set-hostname Your-New-Host-Name-Here</span><br></pre></td></tr></table></figure><h2 id="关于日志采集的策略"><a href="#关于日志采集的策略" class="headerlink" title="关于日志采集的策略"></a>关于日志采集的策略</h2><p>（网上未提及此topic）<br>配置logstash是件麻烦事情。 一下两种策略互相冲突<br><strong>1， 保证所有的log都index到ES</strong><br>这中策略方便用户查找问题， 因为所有的log都可以搜索到<br><strong>2， 严格过滤， 只提取我们需要的log信息</strong><br>这种很方便做统计， 但是其他很多log会被过滤掉， 用来找问题不方便。</p><h2 id="服务器时间设置"><a href="#服务器时间设置" class="headerlink" title="服务器时间设置"></a>服务器时间设置</h2><p>最好保证日志源的服务器时间和ELK的数据库服务器时间一直<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Elasticsearch 自定义Mapping</title>
      <link href="/Elastic-Technologies/Elasticsearch-Mapping/"/>
      <url>/Elastic-Technologies/Elasticsearch-Mapping/</url>
      
        <content type="html"><![CDATA[<h2 id="Mapping-定义"><a href="#Mapping-定义" class="headerlink" title="Mapping 定义"></a>Mapping 定义</h2><p>前面有一个篇简单的关于mapping的博客，当时是基于2.4 版本。 elastic技术栈在最近很活跃，目前版本已经更新至5.x。5.x有了比较大的变化。2.4 版本的定义在5.x上大部分已经失去了意义。（比如：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/string.html" target="_blank" rel="noopener">5.x已经不再支持string 类型</a>）<br><strong>这里截取一点官网对应的</strong><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/mapping.html" target="_blank" rel="noopener">定义</a>：</p><blockquote><p>elasticsearch 通过定义的映射mapping来决定文档及其字段改如何被存储和索引。比如：字段是否可以支持全文搜索; 字段是否包含日期，地理位置; 日期的格式; 自定义自动映射的规则。</p></blockquote><p>基于5.x，<a href="http://blog.csdn.net/choelea/article/details/53320140" target="_blank" rel="noopener">前面博客</a> 提到的user，uri等字段就可以使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/keyword.html" target="_blank" rel="noopener">keyword type</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /business-index-*/_mapping/business</span><br><span class="line">&#123;</span><br><span class="line"> &quot;properties&quot; : &#123;</span><br><span class="line">    &quot;uri&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class="line">    &quot;user&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class="line">    &quot;keyword&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class="line">    &quot;responseStatus&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125;,</span><br><span class="line">    &quot;responseTime&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>elastic的文档维护的算是比较好的，基本英语OK的都是直接去参考官方文档。  mapping的更新可以参考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/indices-put-mapping.html" target="_blank" rel="noopener">elastic 官网</a>     </p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Kibana 5.x 加强安全 - x-pack篇</title>
      <link href="/Elastic-Technologies/Elasticsearch-Kibana-Security-xpack/"/>
      <url>/Elastic-Technologies/Elasticsearch-Kibana-Security-xpack/</url>
      
        <content type="html"><![CDATA[<p> 此文之前，假定读者已经一次完成了Kibana和elasticsearch的安装。参考官方文档，安装后默认配置已经可以连通kibana和es。 </p><ul><li>系统： centos7</li><li><p>内容： 增加authentication &amp; enable ssl</p><p>elastic 技术栈 的另外一个重要的角色是x-pack. </p></li></ul><p><img src="http://tech.jiu-shu.com/Elastic-Technologies/elastic-charm.png" alt="elastic-charm"></p><h3 id="ES安装xpack插件"><a href="#ES安装xpack插件" class="headerlink" title="ES安装xpack插件"></a>ES安装xpack插件</h3><p>参考<a href="https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html" target="_blank" rel="noopener">安装xpack</a><br>Run bin/elasticsearch-plugin install from ES_HOME on each node in your cluster:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch-plugin install x-pack</span><br></pre></td></tr></table></figure></p><h3 id="Kibana-安装xpack-插件"><a href="#Kibana-安装xpack-插件" class="headerlink" title="Kibana 安装xpack 插件"></a>Kibana 安装xpack 插件</h3><p>参考<a href="https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html" target="_blank" rel="noopener">安装xpack</a></p><p>Install X-Pack into Kibana by running bin/kibana-plugin in your Kibana installation directory.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kibana-plugin install x-pack</span><br></pre></td></tr></table></figure></p><h3 id="依次启动elasticsearch-和kibana"><a href="#依次启动elasticsearch-和kibana" class="headerlink" title="依次启动elasticsearch 和kibana"></a>依次启动elasticsearch 和kibana</h3><h3 id="修改用户elastic-和-kibana的密码"><a href="#修改用户elastic-和-kibana的密码" class="headerlink" title="修改用户elastic 和 kibana的密码"></a>修改用户elastic 和 kibana的密码</h3><p><a href="https://www.elastic.co/guide/en/x-pack/current/security-getting-started.html" target="_blank" rel="noopener">X-Pack 文档：修改密码</a></p><blockquote><p>X-Pack security provides a built-in elastic superuser you can use to start setting things up. The default password for the elastic user is changeme.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -u elastic &apos;localhost:9200/_xpack/security/user/elastic/_password&apos; -d &apos;&#123;</span><br><span class="line">  &quot;password&quot; : &quot;elasticpassword&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -u elastic &apos;localhost:9200/_xpack/security/user/kibana/_password&apos; -d &apos;&#123;</span><br><span class="line">  &quot;password&quot; : &quot;kibanapassword&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>CURL授权<br>在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权。 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露</p></blockquote><h3 id="Enable-Kibana-SSL"><a href="#Enable-Kibana-SSL" class="headerlink" title="Enable Kibana SSL"></a>Enable Kibana SSL</h3><p><a href="https://www.elastic.co/guide/en/kibana/current/production.html" target="_blank" rel="noopener">Using Kibana in a Production Environment</a><br>配置上证书的路径即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># SSL for outgoing requests from the Kibana Server (PEM formatted)</span><br><span class="line">server.ssl.key: /path/to/your/server.key</span><br><span class="line">server.ssl.cert: /path/to/your/server.crt</span><br></pre></td></tr></table></figure></p><p>修改了超级用户的密码，enable ssl后，就可以放心的去使用kibana的<strong>Dev Tools</strong> 或者chrome插件（sense）进行大部分API 的操作。 （在此之前需要ssh到服务器通过curl来操作以保证安全）</p><h3 id="创建用户logstash-writer"><a href="#创建用户logstash-writer" class="headerlink" title="创建用户logstash_writer"></a>创建用户logstash_writer</h3><p><a href="https://www.elastic.co/guide/en/x-pack/5.1/logstash.html" target="_blank" rel="noopener">官方参考</a><br>上面步骤完成后会发现logstash推送给es报错了。因为现在ES需要用户名和密码了。 这里我们需要创建一个用户拥有write, delete, and create_index的权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[2016-12-23T20:42:19,350][WARN ][logstash.outputs.elasticsearch] Attempted to resurrect connection to dead ES instance, but got an error. &#123;:url=&gt;#&lt;URI::HTTP:0x17b5a1bd URL:http://localhost:9200&gt;, :error_type=&gt;LogStash::Outputs::ElasticSearch::HttpClient::Pool::BadResponseCodeError, :error=&gt;&quot;Got response code &apos;401&apos; contact Elasticsearch at URL &apos;http://localhost:9200/&apos;&quot;&#125;</span><br><span class="line">[2016-12-23T20:42:20,132][WARN ][logstash.shutdownwatcher ] &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>先创建一个role：logstash_writer</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST _xpack/security/role/logstash_writer</span><br><span class="line">&#123;</span><br><span class="line">  &quot;cluster&quot;: [&quot;manage_index_templates&quot;, &quot;monitor&quot;],</span><br><span class="line">  &quot;indices&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;names&quot;: [ &quot;logstash-*&quot;,&quot;business-index-*&quot;], </span><br><span class="line">      &quot;privileges&quot;: [&quot;write&quot;,&quot;delete&quot;,&quot;create_index&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再创建一个用户：logstash_internal拥有Role：logstash_writer</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /_xpack/security/user/logstash_internal</span><br><span class="line">&#123;</span><br><span class="line">  &quot;password&quot; : &quot;changeme&quot;,</span><br><span class="line">  &quot;roles&quot; : [ &quot;logstash_writer&quot;],</span><br><span class="line">  &quot;full_name&quot; : &quot;Internal Logstash User&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的操作也可以通过Kibana的Management UI来操作</p></blockquote><ul><li>配置logstash.conf</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    ...</span><br><span class="line">    user =&gt; logstash_internal</span><br><span class="line">    password =&gt; changeme</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>logstash, elasticsearch, kibana 如果在同一网络，而暴露出去的只有kibana的话，logstash和elasticsearch 之前是无需授权的。可以参考<a href="https://www.elastic.co/guide/en/x-pack/current/anonymous-access.html" target="_blank" rel="noopener">Enabling Anonymous Access</a> 另外，logstash和elasticsearch之间如果需要授权，会不会有性能的影响？</p></blockquote><h3 id="给Kibana用户加上index的读的权限"><a href="#给Kibana用户加上index的读的权限" class="headerlink" title="给Kibana用户加上index的读的权限"></a>给Kibana用户加上index的读的权限</h3><p>Kibana安装xpack后默认就需要登录了。也可以用超级用户elastic登录<br>登录后打开DevTools进行ES API的操作。</p><p>修改后停掉kibana服务。修改kibana的配置：</p><blockquote><p>Once you change the password, you need to specify it with the elasticsearch.password property in kibana.yml:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.password: &quot;s0m3th1ngs3cr3t&quot;</span><br></pre></td></tr></table></figure><h3 id="坑-（Tricky-Part）"><a href="#坑-（Tricky-Part）" class="headerlink" title="坑 （Tricky Part）"></a>坑 （Tricky Part）</h3><ol><li>/etc/logstash/conf.d 下不要有多余的文件。比如logstash.conf.bak， 似乎logstash会读这个文件夹下的不止logstash.conf这个文件配置。logstash.conf.bak 会导致死循环一样的重启。<a href="https://discuss.elastic.co/t/logstash-endless-loop-with-starting-and-stopping/69913" target="_blank" rel="noopener">elastic community</a></li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Elastcisearch 6.2 Restful API</title>
      <link href="/Elastic-Technologies/Elasticsearch-6_2-Restful-API/"/>
      <url>/Elastic-Technologies/Elasticsearch-6_2-Restful-API/</url>
      
        <content type="html"><![CDATA[<h1 id="Elastcisearch"><a href="#Elastcisearch" class="headerlink" title="Elastcisearch"></a>Elastcisearch</h1><p>详细的API请参考官方网站： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a> 这里只列举常用的方式。</p><h2 id="索引API"><a href="#索引API" class="headerlink" title="索引API"></a>索引API</h2><p>官方链接： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html</a></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><h4 id="快速创建"><a href="#快速创建" class="headerlink" title="快速创建"></a>快速创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /news</span><br></pre></td></tr></table></figure><p>创建名为test的索引，没有创建任何对应的Type,以及Mapping<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;acknowledged&quot;: true,</span><br><span class="line">  &quot;shards_acknowledged&quot;: true,</span><br><span class="line">  &quot;index&quot;: &quot;news&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /news</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;news&quot;: &#123;</span><br><span class="line">    &quot;aliases&quot;: &#123;&#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;&#125;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;index&quot;: &#123;</span><br><span class="line">        &quot;creation_date&quot;: &quot;1535677066065&quot;,</span><br><span class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot;: &quot;-fZX17QdQjWE_AK79pO8lQ&quot;,</span><br><span class="line">        &quot;version&quot;: &#123;</span><br><span class="line">          &quot;created&quot;: &quot;6020499&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot;: &quot;news&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE &quot;http://192.168.1.99:9200/news&quot; // 删除索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;ok&quot;: true,</span><br><span class="line">   &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置类型并定义Mapping-推荐"><a href="#设置类型并定义Mapping-推荐" class="headerlink" title="设置类型并定义Mapping (推荐)"></a>设置类型并定义Mapping (推荐)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT /news/_mapping/_doc</span><br><span class="line">&#123;</span><br><span class="line">   &quot;properties&quot;:&#123;</span><br><span class="line">     &quot;title&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;text&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;content&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;text&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;postDate&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;date&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;categories&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;tags&quot;:&#123;</span><br><span class="line">       &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>title和content是用于全文检索的，同时需要分词的</li><li>categories tags无需分词，这里的categories和tags都会存放多个值的数组。关于数组类型参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/array.html" target="_blank" rel="noopener">Array DataType</a></li></ol><blockquote><p>elasticsearch 支持 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-mapping.html" target="_blank" rel="noopener">Dynamical Mapping</a>, 大多数情况下，这都不是一个推荐方式。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Elastcisearch 2.4 Restful API</title>
      <link href="/Elastic-Technologies/Elasticsearch-2_4-Restful-Api/"/>
      <url>/Elastic-Technologies/Elasticsearch-2_4-Restful-Api/</url>
      
        <content type="html"><![CDATA[<h1 id="Elastcisearch"><a href="#Elastcisearch" class="headerlink" title="Elastcisearch"></a>Elastcisearch</h1><p>详细的API请参考官方网站： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a> 这里只列举常用的方式。</p><h2 id="索引API"><a href="#索引API" class="headerlink" title="索引API"></a>索引API</h2><p>官方链接： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html</a></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &quot;http://192.168.1.99:9200/test&quot; //创建test的索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;ok&quot;: true,</span><br><span class="line">   &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE &quot;http://192.168.1.99:9200/test&quot; // 删除索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;ok&quot;: true,</span><br><span class="line">   &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以下开始使用Kibana的Sense 来简化curl的操作</strong></p><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test</span><br></pre></td></tr></table></figure><h3 id="创建索引并设置Type和Mapping"><a href="#创建索引并设置Type和Mapping" class="headerlink" title="创建索引并设置Type和Mapping"></a>创建索引并设置Type和Mapping</h3><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>Cmd-‘ 引用</li><li>Cmd-B    加粗</li><li>Cmd-E     清除Block</li><li>Cmd-H     标题Header变小</li><li>Cmd-I       斜体</li><li>Cmd-K      链接</li><li>Cmd-L     无序列表</li><li>Cmd-P     Preview</li><li>Cmd-Alt-C     代码块</li><li>Cmd-Alt-I     插入图片</li><li>Cmd-Alt-L    有序列表</li><li>Shift-Cmd-H  标题Header变大</li><li>F9     窗口拆分</li><li>F11    全屏</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Elasticsearch 2.X 自定义字段的Mapping</title>
      <link href="/Elastic-Technologies/Elasticsearch-2-X-Mapping/"/>
      <url>/Elastic-Technologies/Elasticsearch-2-X-Mapping/</url>
      
        <content type="html"><![CDATA[<p>说到Mapping大家可能觉得有些不解，其实我大体上可以将Elasticsearch理解为一个RDBMS（关系型数据库，比如MySQL），那么index 就相当于数据库实例，type可以理解为表,这样mapping可以理解为表的结构和相关设置的信息（当然mapping有更大范围的意思）。</p><p>默认情况不需要显式的定义mapping， 当新的type或者field引入时，Elasticsearch会自动创建并且注册有合理的默认值的mapping(毫无性能压力)， 只有要覆盖默认值时才必须要提供mapping定义。</p><blockquote><p>引用博客：<a href="http://blog.csdn.net/top_code/article/details/50767138" target="_blank" rel="noopener">http://blog.csdn.net/top_code/article/details/50767138</a></p></blockquote><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>term - individual word （拆分后的最小单词）</p><h2 id="Mapping-简介"><a href="#Mapping-简介" class="headerlink" title="Mapping 简介"></a>Mapping 简介</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping.html" target="_blank" rel="noopener">Elasticsearch Reference [2.4] » Mapping</a><br>Mapping是用来定义文档及包含字段的保存和索引的方式。</p><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>接触mapping是因为要收集除了log之外的业务信息。 业务log和系统log不同，很多的自定义字段，并将这些信息推送到单独的index。 最终目的是用过kibana的图形化的展示来统计和分析。当我们要统计比如：用户的访问排名（字段名：user：<a href="mailto:test@gmail.com" target="_blank" rel="noopener">test@gmail.com</a>）。 当没有设置任何mapping的时候，ES会采用动态mapping（Dynamic Mapping），针对String的字段默认的index方式是：analyzed。这种方式下，<a href="mailto:test@gmail.com" target="_blank" rel="noopener">test@gmail.com</a> 会被拆分成test和gmail.com(怎么拆分取决于用什么analyzer)。这样不便于统计，这里我们必须显示地去设置mapping。<br> <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-index.html" target="_blank" rel="noopener">Mapping parameters » index</a> </p><blockquote><p>通过kibana去选择analyzed的字段去做terms aggregation可以看到对应的warning信息</p></blockquote><h2 id="自定义mapping"><a href="#自定义mapping" class="headerlink" title="自定义mapping"></a>自定义mapping</h2><p>可以通过API 去自定义mapping。 （这个最好在数据开始index之前，因为数据index的时候会动态设置mapping，再去修改会出现一些冲突）新增加的字段可以继续通过修改mapping来增加。  ES 支持一个index多个type，mapping可以针对单个type也可以针对index。<br><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT http://localhost:9200/business-index-*/_mapping/biz -d &apos;</span><br><span class="line">&#123;</span><br><span class="line"> &quot;properties&quot; : &#123;</span><br><span class="line">    &quot;uri&quot; : &#123;&quot;type&quot;: &quot;string&quot;,&quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class="line">    &quot;user&quot; : &#123;&quot;type&quot;: &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class="line">&quot;keyword&quot; : &#123;&quot;type&quot;: &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class="line">    &quot;responseStatus&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125;,</span><br><span class="line">    &quot;responseTime&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;&apos;;</span><br></pre></td></tr></table></figure><h2 id="自定义template"><a href="#自定义template" class="headerlink" title="自定义template"></a>自定义template</h2><p>对于确定的index，通过mapping的方式就可以达到我们的目的。 比如： 商品的索引，这个index不会变，里面的数据document会增删改查，但是index始终在那里。<br>但是对于类似log和数据分析的数据，这些数据会惊人的速度增加，如果放在一个index就不现实。 所以ELK就有了 “<strong><em>time-based index pattern</em></strong>“ , 通过这种方式可以每天或者每月生成一个index文件。比如logstash的日志： <code>logstash-2016.08.20</code> 针对这种场景，就需要引入更高一层的配置: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html" target="_blank" rel="noopener">Index Template</a><br>设定自己的template的示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT http://localhost:9200/_template/business -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">&quot;template&quot;: &quot;business*&quot;,</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;number_of_shards&quot;: 1</span><br><span class="line">&#125;,</span><br><span class="line">&quot;mappings&quot;: &#123;</span><br><span class="line">&quot;_default_&quot;: &#123;</span><br><span class="line">&quot;properties&quot;: &#123;</span><br><span class="line">&quot;uri&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;string&quot;,</span><br><span class="line">&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;user&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;string&quot;,</span><br><span class="line">&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;keyword&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;string&quot;,</span><br><span class="line">&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;responseStatus&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;integer&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;responseTime&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;long&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>The settings and mappings will be applied to any index name that matches the business* template</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/Elastic-Technologies/Elasticsearch-2.4-Restful-Api/"/>
      <url>/Elastic-Technologies/Elasticsearch-2.4-Restful-Api/</url>
      
        <content type="html"><![CDATA[<hr><p>title:  文档的title，页面及列表都会展示<br>description: 描述这个页面的信息<br>showOnHome: false<br>…</p><p>这个是一个模板, 请务必将showOnHome 修改为true</p><h1 id="欢迎使用"><a href="#欢迎使用" class="headerlink" title="欢迎使用"></a>欢迎使用</h1><p>本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：</p><ul><li><strong>Markdown和扩展Markdown简洁的语法</strong></li><li><strong>代码块高亮</strong></li><li><strong>图片链接和图片上传</strong></li><li><strong>丰富的快捷键</strong></li></ul><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>Cmd-‘ 引用</li><li>Cmd-B    加粗</li><li>Cmd-E     清除Block</li><li>Cmd-H     标题Header变小</li><li>Cmd-I       斜体</li><li>Cmd-K      链接</li><li>Cmd-L     无序列表</li><li>Cmd-P     Preview</li><li>Cmd-Alt-C     代码块</li><li>Cmd-Alt-I     插入图片</li><li>Cmd-Alt-L    有序列表</li><li>Shift-Cmd-H  标题Header变大</li><li>F9     窗口拆分</li><li>F11    全屏</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Windows 常用命令</title>
      <link href="/Dev-Ops/Windows-Commands/"/>
      <url>/Dev-Ops/Windows-Commands/</url>
      
        <content type="html"><![CDATA[<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>doc 窗口设置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=512m</span><br></pre></td></tr></table></figure></p><h2 id="删除服务"><a href="#删除服务" class="headerlink" title="删除服务"></a>删除服务</h2><p>删除服务名为mysql的服务： <code>sc delete mysql</code></p><h2 id="端口相关"><a href="#端口相关" class="headerlink" title="端口相关"></a>端口相关</h2><h3 id="端口占用的应用的PID"><a href="#端口占用的应用的PID" class="headerlink" title="端口占用的应用的PID"></a>端口占用的应用的PID</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon|findstr &quot;8599&quot;</span><br></pre></td></tr></table></figure><p>结果如下： （PID为2948）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Documents and Settings\XPMUser&gt;netstat -aon|findstr &quot;8599&quot;</span><br><span class="line">  TCP    0.0.0.0:8599           0.0.0.0:0              LISTENING       2948</span><br></pre></td></tr></table></figure></p><h3 id="对应PID的进程"><a href="#对应PID的进程" class="headerlink" title="对应PID的进程"></a>对应PID的进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist|findstr &quot;2948&quot;</span><br></pre></td></tr></table></figure><p>结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Documents and Settings\XPMUser&gt;tasklist|findstr &quot;2948&quot;</span><br><span class="line">tomcat6.exe                 2948 RDP-Tcp#4               0     44,072 K</span><br></pre></td></tr></table></figure></p><p>或者：打开任务管理器，切换到进程选项卡，在PID一列查看2720对应的进程是谁，如果看不到PID这一列，点击查看—&gt;选择列，将PID(进程标示符)前面的勾打上，点击确定。</p><h3 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h3><p>结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im Tencentdl.exe。</p><h2 id="列出文件夹下面的文件名称"><a href="#列出文件夹下面的文件名称" class="headerlink" title="列出文件夹下面的文件名称"></a>列出文件夹下面的文件名称</h2><p>创建一个bat文件, 加入下面的内容。 将这个bat文件放入文件夹内运行即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DIR *.* /B&gt; LIST.TXT</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Shell 脚本学习笔记</title>
      <link href="/Dev-Ops/Shell-learning-notes/"/>
      <url>/Dev-Ops/Shell-learning-notes/</url>
      
        <content type="html"><![CDATA[<h3 id="括号的使用说明"><a href="#括号的使用说明" class="headerlink" title="括号的使用说明"></a>括号的使用说明</h3><p>参考：<a href="http://stackoverflow.com/questions/31255699/double-parenthesis-with-and-without-dollar" target="_blank" rel="noopener">Double parenthesis with and without dollar</a></p><ul><li>$(…) means execute the command in the parens and return its stdout. </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;The current date is $(date)&quot;</span><br><span class="line">The current date is Mon Jul  6 14:27:59 PDT 2015</span><br></pre></td></tr></table></figure><ul><li>(…) means run the commands listed in the parens in a subshell. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ a=1; (a=2; echo &quot;inside: a=$a&quot;); echo &quot;outside: a=$a&quot;</span><br><span class="line">inside: a=2</span><br><span class="line">outside: a=1</span><br></pre></td></tr></table></figure><ul><li>$((…)) means perform arithmetic and return the result of the calculation. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ a=$((2+3)); echo &quot;a=$a&quot;</span><br><span class="line">a=5</span><br></pre></td></tr></table></figure><ul><li>((…)) means perform arithmetic, possibly changing the values of shell variables, but don’t return its result. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ((a=2+3)); echo &quot;a=$a&quot;</span><br><span class="line">a=5</span><br></pre></td></tr></table></figure><ul><li>${…} means return the value of the shell variable named in the braces. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo $&#123;SHELL&#125;</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><ul><li>{…} means execute the commands in the braces as a group. Example:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ false || &#123; echo &quot;We failed&quot;; exit 1; &#125;</span><br><span class="line">We failed</span><br></pre></td></tr></table></figure><h2 id="有用脚本收集"><a href="#有用脚本收集" class="headerlink" title="有用脚本收集"></a>有用脚本收集</h2><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>读取文件目录的所有文件，按行读取每个文件，判断行文字是否包含特定字符串；如果包含，通过特殊字符来split并输出想要的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">for filename in /home/okchem/mysqlbackup/*.sql; do</span><br><span class="line">    while IFS= read line</span><br><span class="line">do</span><br><span class="line"># display $line or do somthing with $line</span><br><span class="line">if [[ $line == *&quot;/ocf/&quot;* ]]; then</span><br><span class="line">SUBSTRING=$(echo $line| cut -d&apos;`&apos; -f 2) # 用&apos;`&apos;来拆分,输出数组第二个</span><br><span class="line">echo $SUBSTRING</span><br><span class="line">fi</span><br><span class="line">done &lt;&quot;$&#123;filename&#125;.sql&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Nginx 问题收集</title>
      <link href="/Dev-Ops/Nginx-Technologies/"/>
      <url>/Dev-Ops/Nginx-Technologies/</url>
      
        <content type="html"><![CDATA[<p>收集在使用Nginx过程中遇见的问题。</p><h1 id="知识积累"><a href="#知识积累" class="headerlink" title="知识积累"></a>知识积累</h1><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>平均负载示例如下; 以下配置必须保证两个实例都正常运行在，因为这个配置并不会failover。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">        server 127.0.0.1:8080;</span><br><span class="line">        server 127.0.0.1:8081;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name auth.jiu-shu.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">            client_max_body_size    10m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>上例中的8080 和 8081 端口都是Spring Boot的app。由于Java 是多线程的程序，在同一个虚拟机上运行多个实例并非最佳实践；这里只是方便测试。</p></blockquote><h1 id="问题收集"><a href="#问题收集" class="headerlink" title="问题收集"></a>问题收集</h1><h3 id="反向代理后request的host和schema和浏览器请求不一致"><a href="#反向代理后request的host和schema和浏览器请求不一致" class="headerlink" title="反向代理后request的host和schema和浏览器请求不一致"></a>反向代理后request的host和schema和浏览器请求不一致</h3><p>反向代理后<br>下面如果不加proxy_set_header的两行，那么在microservice这个服务中，<code>request.getScheme() + &quot;://&quot; + request.getServerName()</code> 就会变成<a href="http://microservice.dev.com" target="_blank" rel="noopener">http://microservice.dev.com</a>, nginx rewrite 之后，就可以获取到：<a href="http://www.dev.com" target="_blank" rel="noopener">http://www.dev.com</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server_name  www.dev.com;</span><br><span class="line">location / &#123;</span><br><span class="line"> proxy_set_header Host $host;</span><br><span class="line">   proxy_set_header X-Scheme $scheme;</span><br><span class="line"> proxy_pass   http://microservice.dev.com:8091;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="bind-to-0-0-0-0-80-failed-98-Address-already-in-use"><a href="#bind-to-0-0-0-0-80-failed-98-Address-already-in-use" class="headerlink" title="bind() to 0.0.0.0:80 failed (98: Address already in use)"></a>bind() to 0.0.0.0:80 failed (98: Address already in use)</h3><p>启动碰见以上问题，有两种可能</p><ol><li>先检查80端口是否已经被其他http server占用 <code>sudo netstat -nlpt</code></li><li>remove the IPv6 bind block (something along the lines of ::1:80。 参考：<a href="http://serverfault.com/questions/520535/nginx-is-still-on-port-80-bind-to-0-0-0-080-failed-98-address-already-in" target="_blank" rel="noopener">http://serverfault.com/questions/520535/nginx-is-still-on-port-80-bind-to-0-0-0-080-failed-98-address-already-in</a></li></ol><h3 id="403-forbidden-13-Permission-denied"><a href="#403-forbidden-13-Permission-denied" class="headerlink" title="403 forbidden (13: Permission denied)"></a>403 forbidden (13: Permission denied)</h3><p>参考：<a href="https://www.hi-docs.com/article/detail-MTE1.html" target="_blank" rel="noopener">Nginx报错403 forbidden (13: Permission denied)的解决办法</a><br>解决办法一： 关闭 SELinux  （在了解了SELinux的重要性后，决定继续寻找更好的解决办法）</p><p>需要进一步了解SELinux相关，需要解决办法二：（感谢Zeal老师给出的解决方案）</p><blockquote><p>Every directory has a SeLinux context and the default ‘Document Root’ ( /var/www/html ) has an context which allows the nginx / apache user to access the directory.<br>The new ROOT ( /data/images ) will not have the same context and thus SeLinux  is blocking the access.<br>You can verify with ls -lZ /Default-Document-Root and verify the context and associate the same context to /data/images.<br>This should ideally solve the issue, can you try and verify once  :-<br><code>chcon -R -u system_u -t httpd_sys_content_t /data/</code></p></blockquote><p>相信ftp等服务，如果更改了根目录，也会有同样的问题。需要更深入的对SELinux学习。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Maven父子工程的搭建</title>
      <link href="/Dev-Ops/Maven-usage-of-parent/"/>
      <url>/Dev-Ops/Maven-usage-of-parent/</url>
      
        <content type="html"><![CDATA[<p>尝试dubbo+spring的同时，总结下通过maven创建父子工程的方法。（不考虑unit test）</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p><strong>Spring Boot：</strong> 1.4.7.RELEASE<br><strong>Maven：</strong> 3.2.5</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>eclipse</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/dubbo/dubbo-spring-boot-project" target="_blank" rel="noopener">https://github.com/dubbo/dubbo-spring-boot-project</a><br><a href="http://blog.csdn.net/yaerfeng/article/details/26448417" target="_blank" rel="noopener">http://blog.csdn.net/yaerfeng/article/details/26448417</a><br><a href="http://blog.csdn.net/isea533/article/details/73744497" target="_blank" rel="noopener">http://blog.csdn.net/isea533/article/details/73744497</a></p><h2 id="maven-国内镜像"><a href="#maven-国内镜像" class="headerlink" title="maven 国内镜像"></a>maven 国内镜像</h2><p>如果不翻墙，下载maven的依赖相当慢，可以添加阿里云的镜像， 速度相当快。<br>修改conf文件夹下的settings.xml文件，添加如下镜像配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">  &lt;/mirrors&gt;</span><br></pre></td></tr></table></figure></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="创建父maven工程"><a href="#创建父maven工程" class="headerlink" title="创建父maven工程"></a>创建父maven工程</h3><h4 id="创建普通的maven工程，参考如下截图"><a href="#创建普通的maven工程，参考如下截图" class="headerlink" title="创建普通的maven工程，参考如下截图"></a>创建普通的maven工程，参考如下截图</h4><p><img src="http://tech.jiu-shu.com/Dev-Ops/maven-create-parent.png" alt="maven-create-parent"></p><h4 id="填写参数"><a href="#填写参数" class="headerlink" title="填写参数"></a>填写参数</h4><p><img src="http://tech.jiu-shu.com/Dev-Ops/maven-create-parent-1.png" alt="maven-create-parent-1"></p><h4 id="删除无用文件夹"><a href="#删除无用文件夹" class="headerlink" title="删除无用文件夹"></a>删除无用文件夹</h4><p><img src="http://tech.jiu-shu.com/Dev-Ops/maven-create-parent-2.png" alt="maven-create-parent-2"></p><h4 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h4><ol><li>packaging 从jar改成pom <code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></li><li>添加spring-boot-starter-parent，添加dependency management。（maven的配置解释参考：<a href="http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html）" target="_blank" rel="noopener">http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html）</a><br>修改后配置如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.dubboot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;dubboot-example&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;dubboot-example&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.4.7.RELEASE&lt;/version&gt; &lt;!-- keep the version same with $&#123;springboot.version&#125; --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;dependencyManagement&gt; &lt;!-- 存在的价值只是为了方便管理版本 --&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.dubbo.springboot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-dubbo&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt; </span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="方式一：创建子maven子工程-（dubbo-服务接口）"><a href="#方式一：创建子maven子工程-（dubbo-服务接口）" class="headerlink" title="方式一：创建子maven子工程 （dubbo 服务接口）"></a>方式一：创建子maven子工程 （dubbo 服务接口）</h3><ul><li>选中父maven工程右键，新建maven module，输入相关参数即可。 -      </li><li>工程导入后删除测试相关：pom.xml 的junit依赖及测试相关java文件夹。</li><li>pom.xml 添加 <code>&lt;packaging&gt;jar&lt;/packaging&gt;</code><h3 id="方式二：创建子maven子工程-（Spring-Boot，-dubbo-服务实现）"><a href="#方式二：创建子maven子工程-（Spring-Boot，-dubbo-服务实现）" class="headerlink" title="方式二：创建子maven子工程 （Spring Boot， dubbo 服务实现）"></a>方式二：创建子maven子工程 （Spring Boot， dubbo 服务实现）</h3>从<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 创建, 添加依赖，JPA， Validation, Mysql 及其他依赖项（不选Spring Cloud 相关）。下载后解压至父maven工程，修改pom.xml 中的parent使其匹配父工程。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;com.dubboot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;dubboot-example&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure><p><img src="http://tech.jiu-shu.com/Dev-Ops/spring-io-initiator.png" alt="Spring Initiator"></p><p>在父工程中添加module：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">&lt;module&gt;dubboot-jpa&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure><p>然后可以顺利将子工程导入eclipse。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>利用Nexus搭建Maven私服</title>
      <link href="/Dev-Ops/Maven-Private-Repository-Server/"/>
      <url>/Dev-Ops/Maven-Private-Repository-Server/</url>
      
        <content type="html"><![CDATA[<p>阐述如果利用Nexus来快速搭建maven仓库的私有服务器<br>私服搭建<br>Docker Hub链接地址： <a href="https://hub.docker.com/r/sonatype/nexus/" target="_blank" rel="noopener">https://hub.docker.com/r/sonatype/nexus/</a></p><p>docker pull sonatype/nexus<br>mkdir /data/nexus-data &amp;&amp; chown -R 200 /data/nexus-data<br>docker run -d -p 8081:8081 –name nexus -v /data/nexus-data:/nexus-data sonatype/nexus3​</p><p>本地Maven配置<br>​修改Maven的全局setting.xml文件如下：</p><p>文件路径： $MAVEN_HOME/conf/setting.xml</p><p>mirrors节点加入如下内容<br>    <mirror><br>      <id>nexus</id><br>      <mirrorof>*</mirrorof><br>      <name>Nexus</name><br>      <url><a href="http://192.168.1.80:8081/repository/maven-public/" target="_blank" rel="noopener">http://192.168.1.80:8081/repository/maven-public/</a></url><br>    </mirror> </p><p>profiles节点加入如下内容<br>    <profile><br>      <id>nexus</id><br>      <!--Enable snapshots for the built in central repo to direct --><br>      <!--all requests to nexus via the mirror --><br>      <repositories><br>        <repository><br>          <id>central</id><br>          <url><a href="http://central" target="_blank" rel="noopener">http://central</a></url><br>          <releases><enabled>true</enabled></releases><br>          <snapshots><enabled>true</enabled></snapshots><br>        </repository><br>      </repositories><br>     <pluginrepositories><br>        <pluginrepository><br>          <id>central</id><br>          <url><a href="http://central" target="_blank" rel="noopener">http://central</a></url><br>          <releases><enabled>true</enabled></releases><br>          <snapshots><enabled>true</enabled></snapshots><br>        </pluginrepository><br>      </pluginrepositories><br>    </profile> </p><p>activeProfiles​节点加入</p><p><activeprofile>nexus</activeprofile>​</p><p>对于Snapshot的jar，如果想及时的更新，可以在maven参数中加上-U，就可以获得最新的jar包。<br>本地组件deploy<br>除了配置本地Maven配置外，还需要在setting.xml文件中加入如下内容：</p><p>servers节点<br>    <server><br>      <id>maven-releases</id><br>      <username>admin</username><br>      <password>admin123</password><br>    </server><br>    <server><br>      <id>maven-snapshots</id><br>      <username>admin</username><br>      <password>admin123</password><br>    </server>  </p><p>项目的pom.xml文件，加入如下配置：<br>  <distributionmanagement><br>      <repository><br>          <id>maven-releases</id><br>          <url><a href="http://192.168.1.​80:8081/repository/maven-releases/" target="_blank" rel="noopener">http://192.168.1.​80:8081/repository/maven-releases/</a></url><br>      </repository><br>      <snapshotrepository><br>          <id>maven-snapshots</id><br>          <url><a href="http://192.168.1.80:8081/repository/maven-snapshots/" target="_blank" rel="noopener">http://192.168.1.80:8081/repository/maven-snapshots/</a></url><br>      </snapshotrepository><br>  </distributionmanagement>​</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java 开发工具使用技巧收集</title>
      <link href="/Dev-Ops/Java-IDE-Useful-Skills/"/>
      <url>/Dev-Ops/Java-IDE-Useful-Skills/</url>
      
        <content type="html"><![CDATA[<h1 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h1><h2 id="Eclipse-提速"><a href="#Eclipse-提速" class="headerlink" title="Eclipse 提速"></a>Eclipse 提速</h2><p><a href="https://blog.csdn.net/leolu007/article/details/53541641" target="_blank" rel="noopener">https://blog.csdn.net/leolu007/article/details/53541641</a></p><p>Remote System Explorer Operation卡死<br>第一步：Eclipse -&gt; Preferences -&gt; General -&gt; Startup and Shutdown.不要勾选 RSE UI.<br>第二步：Eclipse -&gt; Preferences -&gt; Remote Systems. 取消勾选 Re-open Remote Systems view to previous state.</p><h2 id="在Eclispe中使用Git-命令"><a href="#在Eclispe中使用Git-命令" class="headerlink" title="在Eclispe中使用Git 命令"></a>在Eclispe中使用Git 命令</h2><p>参考： <a href="https://blog.csdn.net/wu_cai_/article/details/71637199" target="_blank" rel="noopener">https://blog.csdn.net/wu_cai_/article/details/71637199</a>  （建议选择git-bash）<br>直接在eclipse中使用并不是很方便，但是可以快速打开git-bash. 配置方式参考上面。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="断点出用于打印信息的代码收集"><a href="#断点出用于打印信息的代码收集" class="headerlink" title="断点出用于打印信息的代码收集"></a>断点出用于打印信息的代码收集</h3><h4 id="Request的Header信息"><a href="#Request的Header信息" class="headerlink" title="Request的Header信息"></a>Request的Header信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.util.Enumeration headerNames = req.getHeaderNames();</span><br><span class="line">while(headerNames.hasMoreElements()) &#123;</span><br><span class="line">  String headerName = (String)headerNames.nextElement();</span><br><span class="line">  System.out.println(&quot;Header Name - &quot; + headerName + &quot;, Value - &quot; + req.getHeader(headerName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Git 常用命令</title>
      <link href="/Dev-Ops/Git-Commands/"/>
      <url>/Dev-Ops/Git-Commands/</url>
      
        <content type="html"><![CDATA[<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git help command // eg: git commit help</span><br></pre></td></tr></table></figure><p>windows 打开默认的浏览器显示帮助内容， mac直接显示</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global setting value</span><br><span class="line">示例：git config --global user.name &quot;Your Name&quot;</span><br><span class="line">示例：git config --global user.email &quot;you@someplace.com&quot;</span><br><span class="line">git config --global --list // 列出全局配置项</span><br></pre></td></tr></table></figure><p>配置内容保存在当前<strong>用户</strong>目录下的.gitconfig文件中</p><h2 id="本地命令"><a href="#本地命令" class="headerlink" title="本地命令"></a>本地命令</h2><h3 id="设置邮箱"><a href="#设置邮箱" class="headerlink" title="设置邮箱"></a>设置邮箱</h3><h5 id="设置全局邮箱"><a href="#设置全局邮箱" class="headerlink" title="设置全局邮箱"></a>设置全局邮箱</h5><p>方式一： 运行命令： <code>git config --global user.email &quot;joe.lea@foxmail.com&quot;</code><br>方式二:   编辑文件 .gitconfig, 一般在用户目录下，上面的命令运行后也同样会修改这个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name =xiaoming</span><br><span class="line">email = xiaoming@qq.com</span><br></pre></td></tr></table></figure></p><h5 id="设置项目的提交邮箱"><a href="#设置项目的提交邮箱" class="headerlink" title="设置项目的提交邮箱"></a>设置项目的提交邮箱</h5><p>编辑文件 .git/config 即可</p><blockquote><p>github 项目只有设置了提交者的邮箱，才会在contibutors中you展示。 比如：<a href="https://github.com/choelea/markdown-cms/graphs/contributors" target="_blank" rel="noopener">https://github.com/choelea/markdown-cms/graphs/contributors</a></p></blockquote><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>方式一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd projects/</span><br><span class="line">git init git-demo  // projects下面创建文件夹 git-demo, 并初始化； 初始化其实就是在文件夹下面创建了相关内容存放在.git 隐藏文件夹下面</span><br></pre></td></tr></table></figure></p><p>方式二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd projects/</span><br><span class="line">mkdir website</span><br><span class="line">cd website/</span><br><span class="line">git init // 初始化</span><br></pre></td></tr></table></figure></p><p>方式三：<br>大多数的方式，我们从clone一个git 库开始的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &apos;url&apos;</span><br></pre></td></tr></table></figure></p><h3 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv  // 列出本地分支 * 标识当前分支</span><br><span class="line">git branch -a // 列出所有分支</span><br></pre></td></tr></table></figure><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;BranchName&gt;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 查看状态</span><br></pre></td></tr></table></figure><p>git status // Shows which files have been modified in the working directory vs Git’s staging area.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 添加新文件</span><br></pre></td></tr></table></figure></p><p>git add file-name  // Adds the new or newly modified file-name to Git’s staging area (index).<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 当很多文件修改，而且这些文件不属于同一个功能修改，想分开多个commit来提交的时候，可选择通过`git add  &lt;file&gt;` 先将指定的文件Stage，然后使用`git commit -m ` 来只提交stage的文件。</span><br><span class="line"></span><br><span class="line">### Commit 修改</span><br></pre></td></tr></table></figure></p><p>git commit -m “A really good commit message” // Commits all files currently in Git’s staging area.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 上面的命令只有所有的文件都在staging area在有效。  `git commit -am &quot;A really good commit message&quot;` 可以省掉git add这步，不过新文件必须先add下。</span><br><span class="line"></span><br><span class="line">### 回滚</span><br></pre></td></tr></table></figure></p><p>git add . // Add all new and newly modified files.<br>git reset HEAD file-name // Unstage the specified file from stage area. 修改的内容还在<br>git checkout – file-name // 回滚本次修改<br>git reset –hard HEAD^  // 回滚到远程仓库的版本，放弃本地所有包括commit的修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 检查修改内容</span><br></pre></td></tr></table></figure></p><p>git diff // 查看unstage状态下的文件的修改内容，staged的无法查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 合并到上次提交</span><br></pre></td></tr></table></figure></p><p>git add . // 将修改的文件 stage<br>git commit –amend // 将当前的staged的修改合并到上次commit，并打开编辑器修改commit<br>git commit –amend -m “New commit message” // 将当前的staged的修改合并到上次commit，并实用新的Message<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 使用Interactive Rebasing/squash也可以达到合并的效果，区别就是一个是事先（commit 前）就合并，一个是事后（commit 后）合并。</span><br><span class="line">### 放弃本地修改或新增的文件</span><br><span class="line">放弃modified的文件</span><br></pre></td></tr></table></figure></p><p>git checkout <file> // 重新checkout文件file，相当于丢掉了本地的修改<br>git checkout src/<em> // 使用通配符来checkout src文件夹下面所有的修改<br>git reset –hard // 丢掉所有的修改modified 文件<br>git clean -fd    // 移除所有untrack的文件和文件夹<br>git clean -fd src/</em> // 移除src目录下面所有的新增的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; git clean -fd 中 -f means force, -d means &apos;remove directories&apos;</span><br><span class="line">### 切换分支</span><br><span class="line">&gt; 切换分支前必须保证工作空间是干净的。（没有未提交的修改和新增）</span><br></pre></td></tr></table></figure></file></p><p>git checkout branchename // 切换到branchname分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 提交历史 log日志</span><br></pre></td></tr></table></figure></p><p>git log  // 默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。<br>git log –oneline –graph –decorate –color<br>git log – <filepath>  // 查看某个文件的日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 查看历史提交的内容差异</span><br></pre></td></tr></table></figure></filepath></p><p>git log -p -2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：</span><br><span class="line"></span><br><span class="line">### 移除文件</span><br><span class="line">方式一：完全通过git命令</span><br></pre></td></tr></table></figure></p><p>git rm debug.log  // remove and stage the change<br>git commit -m ‘remove file debug.log’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方式二：</span><br><span class="line">非git 命令删除文件后，运行下面的命令</span><br></pre></td></tr></table></figure></p><p>git add -u // git 2.0 以前的版本  stage删除的change<br>git add file-name // git 2.0 后也可以通过这个命令达到上面的命令的效果<br>git commit -m ‘commit message’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 移动文件</span><br></pre></td></tr></table></figure></p><p>git mv index.html web/  // 移动index.html 到web文件夹内。 命令完成后直接进入staging 状态<br>git commit -m ‘move index.html into web folder’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">### ignore 文件</span><br><span class="line">编辑 .gitignore 文件</span><br><span class="line"></span><br><span class="line">## SSH 命令</span><br><span class="line">windows cmd并没有自带ssh命令，我们可以通过git bash命令窗来运行这些命令。</span><br><span class="line">假定在当前用户的目录下：</span><br></pre></td></tr></table></figure></p><p>cd .ssh<br>ssh-keygen -t rsa -C “your email” // 生成SSH Key， 将id_rsa.pub公钥配置到github/bitbucket 等服务器上<br>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> // 验证SSH 配置成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Git Remote 相关命令</span><br><span class="line">关联一个远程的Repo。 （针对前两种初始化方式，一般情况用不上）</span><br></pre></td></tr></table></figure></p><p>git remote add remote-name remote-repository-location // 示例: git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:choelea/keycloak-demo.git<br>git push -u remote-name branch-name // 示例: git push -u origin master;  The -u parameter is needed the first time you push a branch to the remote.<br>git remote -v // list the names of all the remote repositories<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关联远程repo之前需要先在git服务器上创建对应的repo，如果采用的是github，在创建repository后，会有如下的提示：</span><br><span class="line">![Git-Push-Remote](http://tech.jiu-shu.com/Dev-Ops/git-push-remove.png)</span><br></pre></td></tr></table></figure></p><p>git pull origin master // 下载当前分支远程修改；每次push前都应该先pull<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Git Rebase</span><br><span class="line">关于rebase和merge的区别，建议参考：[Merging vs Rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)</span><br><span class="line">&gt; 一定要看看 &apos;The Golden Rule of Rebasing&apos;这部分.</span><br><span class="line">rebase 和 merge都是应该发生在分支之间的事情，当然在同一个分支上有时也需要。（可能不是最佳实践，git的开发流程一般建议创建单独的feature分支来完成不同的story，避免出现多人在同一个分支上直接commit）</span><br><span class="line">直接在当前分支做rebase</span><br></pre></td></tr></table></figure></p><p>git fetch // 这一步必须<br>git rebase // 将未push的commits 放至remote所有commits之上<br>// 修复冲突 如果有冲突必须进行修复，完成后，注意提示。一般需要git add 命令来stage下 ，接着git rebase –continue 至到没有任何冲突<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Squash</span><br><span class="line">通过Interactive Rebasing来完成当前分支的commits的squash</span><br></pre></td></tr></table></figure></p><p>git rebase -i // 列出所有未push的commit，注意是倒序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">根据提示编辑来达到squash的作用。</span><br><span class="line">![git-rebase](http://tech.jiu-shu.com/Dev-Ops/git-rebase.png)</span><br><span class="line">将第二个commit（435d22b）修改为:`pick 435d22b ...` 即将这个commit压缩至上面的commit，并放弃当前的commit message。</span><br><span class="line">&gt; 有些公司会很强调squash。 git估计本地多次提交防止丢失，所以git的commit有可能会很多；而svn的commit就意味着修改可以被其他用户拉取到， 所以svn的每一次commit都要保证系统可以运行，svn的commit会偏少。svn的代码更新时间取决于文件多少和大小；git的代码拉取时间取决于commit的多少。所以。。。是每次提交尽量合理依然很重要，squash/Ineractive Rebasing 很实用。</span><br><span class="line"></span><br><span class="line">## Changing remote URL</span><br><span class="line">repo换了名字，或者之前是https clone下来的，现在想换成ssh；这些情况都面临着修改远程的URL。</span><br></pre></td></tr></table></figure></p><p>git remote -v // 查看当前的地址<br>git remote set-url origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:choelea/tech-docs.git<br><code>`</code></p><blockquote><p>https的URL一般来说push代码是需要用户明和密码；而ssh的不需要。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Centos 常用命令</title>
      <link href="/Dev-Ops/Centos-Common-Commands/"/>
      <url>/Dev-Ops/Centos-Common-Commands/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下命令仅在centos7上验证过</p></blockquote><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h4><p>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install elasticsearch</span><br></pre></td></tr></table></figure></p><h4 id="rpm-包安装"><a href="#rpm-包安装" class="headerlink" title="rpm  包安装"></a>rpm  包安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh kibana-4.6.6-x86_64.rpm  // 安装后通过 sudo service kibana start 来启动</span><br></pre></td></tr></table></figure><h4 id="查看安装程序路径"><a href="#查看安装程序路径" class="headerlink" title="查看安装程序路径"></a>查看安装程序路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ql kibana  // 查看到安装在了/opt/kibana</span><br></pre></td></tr></table></figure><h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">$ sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="netstat-使用"><a href="#netstat-使用" class="headerlink" title="netstat 使用"></a>netstat 使用</h3><h4 id="查看某个服务是否在运行"><a href="#查看某个服务是否在运行" class="headerlink" title="查看某个服务是否在运行"></a>查看某个服务是否在运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -aple | grep nginx</span><br></pre></td></tr></table></figure><p>只查看tcp或者udp的connections需要添加-t参数: <code>sudo netstat -nplt</code> </p><blockquote><p>更多更实用的netstat命令参考：<a href="http://www.binarytides.com/linux-netstat-command-examples/" target="_blank" rel="noopener">Linux netstat 命令示例</a></p></blockquote><h3 id="查看centos-版本"><a href="#查看centos-版本" class="headerlink" title="查看centos 版本"></a>查看centos 版本</h3><p>cat /etc/centos-release<br><strong>设置环境变量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export KAFKA_HOME=/home/osboxes/kafka_2.10-0.10.0.1</span><br><span class="line">echo $KAFKA_HOME</span><br></pre></td></tr></table></figure><h3 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free</span><br></pre></td></tr></table></figure><h3 id="查看目录所占空间大小"><a href="#查看目录所占空间大小" class="headerlink" title="查看目录所占空间大小"></a>查看目录所占空间大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -smh *</span><br></pre></td></tr></table></figure><h3 id="统计文件夹下面的文件数量"><a href="#统计文件夹下面的文件数量" class="headerlink" title="统计文件夹下面的文件数量"></a>统计文件夹下面的文件数量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -1 | wc -l</span><br></pre></td></tr></table></figure><h3 id="grep-搜索文件内容"><a href="#grep-搜索文件内容" class="headerlink" title="grep 搜索文件内容"></a>grep 搜索文件内容</h3><p><strong>指定的文件类型中查找</strong><br>当前子目录中查找： <code>grep -r abcd *.properties</code> 当前子目录递归查找含有<code>abcd</code> 的*.properties 文件<br>指定目录及子目录中查找：<code>grep -r 3306 /home/okchem/storage92g/srm/</code> </p><h3 id="拷贝整个文件夹"><a href="#拷贝整个文件夹" class="headerlink" title="拷贝整个文件夹"></a>拷贝整个文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -avr /home/vivek/letters /usb/backup</span><br></pre></td></tr></table></figure><h3 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h3><blockquote><p>/etc/group file that lists all users groups  可以使用cut命令列出来<code>cut -d: -f1 /etc/group</code></p></blockquote><p><strong>查看当前用户的group:    </strong> <code>$ groups</code><br><strong>查看用户的group:    </strong> <code>$ groups root</code> <code>id -Gn root</code><br><strong>添加用户到组:    </strong> <code>$ sudo usermod -a -G osboxes nginx</code> 添加用户nginx到组osboxes  <code>usermod -a -G &lt;groupname&gt; username</code> 添加完成请用<code>groups &lt;username&gt;</code> 来验证<br><strong>获取组的所有用户:    </strong> <code>getent group kibana</code></p><p>其他有用资源： <a href="https://segmentfault.com/a/1190000004141370" target="_blank" rel="noopener">CentOS7之新建用户与SSH登陆</a></p><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><h4 id="修改文件-夹-owner"><a href="#修改文件-夹-owner" class="headerlink" title="修改文件[夹]owner"></a>修改文件[夹]owner</h4><p>chown 代表change owner；<code>chown --help</code> 提供了更详细的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R okchem:root /ebs</span><br></pre></td></tr></table></figure></p><h4 id="修改文件-夹-访问权限"><a href="#修改文件-夹-访问权限" class="headerlink" title="修改文件[夹]访问权限"></a>修改文件[夹]访问权限</h4><p>chmod 代表change mode;<br>例如：<code>chmod 644 important.txt</code> owner可读可写,group可读，others可读</p><blockquote><p>First position refers to the user. Second refers to the group of the user, and the third refers to all others.4 = read 2 = write 1 = execute</p></blockquote><p>文件权限更详细的解释可以参考：<a href="https://www.pluralsight.com/blog/it-ops/linux-file-permissions" target="_blank" rel="noopener">Linux File Permissions</a></p><h3 id="PS-命令"><a href="#PS-命令" class="headerlink" title="PS 命令"></a>PS 命令</h3><h4 id="查看java进程-ps-ef-grep-java"><a href="#查看java进程-ps-ef-grep-java" class="headerlink" title="查看java进程 ps -ef|grep java"></a>查看java进程 <code>ps -ef|grep java</code></h4><h4 id="产看进程的详细信息-ps-auxwe-grep-subscribe"><a href="#产看进程的详细信息-ps-auxwe-grep-subscribe" class="headerlink" title="产看进程的详细信息 ps -auxwe | grep subscribe"></a>产看进程的详细信息 <code>ps -auxwe | grep subscribe</code></h4><h3 id="命令行快捷键"><a href="#命令行快捷键" class="headerlink" title="命令行快捷键"></a>命令行快捷键</h3><p><strong>CTRL-a</strong> 光标移至行首<br><strong>CTRL-e</strong> 光标移至行尾<br><strong>CTRL-u</strong> 删除整行<br><strong>CTRL-h</strong>    删除光标前字符</p><h3 id="gzip-gunzip"><a href="#gzip-gunzip" class="headerlink" title="gzip / gunzip"></a>gzip / gunzip</h3><p> 压缩单个文件 <code>gzip fileName</code> 压缩后的名字=原文件名字加上后缀.gz<br> 解压缩单个文件<code>gunzip filename</code> 或者 <code>gzip -d filename</code><br>gzip 不能用来压缩整个文件夹至一个.gz 文件。压缩整个文件夹请参考targ + gzip 命令 即： <code>tar -z</code>命令。</p><blockquote><p>gzip -r  dictName 命令会压缩整个文件夹dictName 里面的所有文件，每个文件被压缩成一个单独的*.gz 文件</p></blockquote><h3 id="tar-命令"><a href="#tar-命令" class="headerlink" title="tar 命令"></a>tar 命令</h3><p>gzip / bzip2 是用来压缩单个文件， tar是用来归档。 所以tar结合gzip/bzip2 可以方便的进行整个文件夹的压缩及归档。<br>压缩整个文件夹<code>tar -zcvf outputFileName folderToCompress</code><br><a href="https://www.tecmint.com/18-tar-command-examples-in-linux/" target="_blank" rel="noopener">Examples</a></p><blockquote><p>bzip2 </p></blockquote><h3 id="sftp-命令"><a href="#sftp-命令" class="headerlink" title="sftp 命令"></a>sftp 命令</h3><h4 id="sftp登录"><a href="#sftp登录" class="headerlink" title="sftp登录"></a>sftp登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sftp  name@123.21.331.1</span><br></pre></td></tr></table></figure><h4 id="sftp-下载文件夹"><a href="#sftp-下载文件夹" class="headerlink" title="sftp 下载文件夹"></a>sftp 下载文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get -r  folder  /home/joe/</span><br></pre></td></tr></table></figure><h4 id="sftp-上传文件"><a href="#sftp-上传文件" class="headerlink" title="sftp 上传文件"></a>sftp 上传文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put  /name1.html  /name2/</span><br></pre></td></tr></table></figure><h3 id="crontab-命令"><a href="#crontab-命令" class="headerlink" title="crontab 命令"></a>crontab 命令</h3><p>创建执行任务， 添加cron job<br>参考cronjob <code>crontab -l</code><br>编辑cronjob <code>crontab -e</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 1 * * * /data/scripts/mysql-job.sh A</span><br><span class="line">20 1 * * 0 /data/scripts/mysql-job.sh I</span><br></pre></td></tr></table></figure><p>两个cron job 分别：</p><ol><li>每天1点执行</li><li>每周日1点20 执行</li></ol><p>参考：crontab 时间可以参考： <a href="https://www.cnblogs.com/intval/p/5763929.html" target="_blank" rel="noopener">https://www.cnblogs.com/intval/p/5763929.html</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Mysql 运维相关脚本收集</title>
      <link href="/Database-Technologies/Mysql-Administration/"/>
      <url>/Database-Technologies/Mysql-Administration/</url>
      
        <content type="html"><![CDATA[<p>mysql 版本： 5.6</p><h1 id="建库及用户"><a href="#建库及用户" class="headerlink" title="建库及用户"></a>建库及用户</h1><p>创建数据库dbname及用户dbuser/dbpassword 并授权数据库全不权限给用户dbuser<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span>  <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`dbname`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */</span></span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> dbname.* <span class="keyword">to</span> dbuser@localhost <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'dbpassword'</span>;</span><br></pre></td></tr></table></figure></p><h1 id="SQL-收集"><a href="#SQL-收集" class="headerlink" title="SQL 收集"></a>SQL 收集</h1><h2 id="找出有记录的表"><a href="#找出有记录的表" class="headerlink" title="找出有记录的表"></a>找出有记录的表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  * FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = &apos;okchem&apos; and table_rows &gt; 0;</span><br></pre></td></tr></table></figure><h2 id="快速删除树形表数据"><a href="#快速删除树形表数据" class="headerlink" title="快速删除树形表数据"></a>快速删除树形表数据</h2><p>如何快速删除树形比如：ProductCategory 这类模型的数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> okchem.ProductCategory <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">0</span>;  <span class="comment">-- id&gt;0 可以去除错误</span></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><blockquote><p>采用where条件<code>where id &gt; 0</code>可以去除如下错误：Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column To disable safe mode, toggle the option in Preferences -&gt; SQL Editor and reconnect.</p></blockquote><h2 id="快速查询表的依赖"><a href="#快速查询表的依赖" class="headerlink" title="快速查询表的依赖"></a>快速查询表的依赖</h2><p>查询表依赖那些表和查询那些表依赖此表； </p><h3 id="查询我依赖的："><a href="#查询我依赖的：" class="headerlink" title="查询我依赖的："></a>查询我依赖的：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT TABLE_NAME,</span><br><span class="line">       COLUMN_NAME,</span><br><span class="line">       CONSTRAINT_NAME,</span><br><span class="line">       REFERENCED_TABLE_NAME,</span><br><span class="line">       REFERENCED_COLUMN_NAME</span><br><span class="line">FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE</span><br><span class="line">WHERE TABLE_SCHEMA = &quot;schemaName&quot; </span><br><span class="line">      AND TABLE_NAME = &quot;TableName&quot; </span><br><span class="line">      AND REFERENCED_COLUMN_NAME IS NOT NULL;</span><br></pre></td></tr></table></figure><h3 id="查询依赖‘我的’："><a href="#查询依赖‘我的’：" class="headerlink" title="查询依赖‘我的’："></a>查询依赖‘我的’：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">      </span><br><span class="line">SELECT TABLE_NAME,</span><br><span class="line">       COLUMN_NAME,</span><br><span class="line">       CONSTRAINT_NAME,</span><br><span class="line">       REFERENCED_TABLE_NAME,</span><br><span class="line">       REFERENCED_COLUMN_NAME</span><br><span class="line">FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE</span><br><span class="line">WHERE TABLE_SCHEMA = &quot;schemaName&quot; </span><br><span class="line">      AND REFERENCED_TABLE_NAME = &quot;TableName&quot;;</span><br></pre></td></tr></table></figure><h2 id="删除重复的行"><a href="#删除重复的行" class="headerlink" title="删除重复的行"></a>删除重复的行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE t1 FROM contacts t1</span><br><span class="line">        INNER JOIN</span><br><span class="line">    contacts t2 </span><br><span class="line">WHERE</span><br><span class="line">    t1.id &lt; t2.id AND t1.email = t2.email;</span><br></pre></td></tr></table></figure><p>// 当表的记录太多，这种join很危险， 最好的方式是先查出来重复的email，再加上in的条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE t1 FROM contacts t1</span><br><span class="line">        INNER JOIN</span><br><span class="line">    contacts t2 </span><br><span class="line">WHERE</span><br><span class="line">    t1.id &lt; t2.id AND t1.email = t2.email and t2.email in (&apos;..&apos;,,,,,,,);</span><br></pre></td></tr></table></figure></p><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><h3 id="为空的时候给默认值"><a href="#为空的时候给默认值" class="headerlink" title="为空的时候给默认值"></a>为空的时候给默认值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ifnull(p.isActive,0) from product</span><br></pre></td></tr></table></figure><h3 id="转换成JSON"><a href="#转换成JSON" class="headerlink" title="转换成JSON"></a>转换成JSON</h3><h2 id="创建Function"><a href="#创建Function" class="headerlink" title="创建Function"></a>创建Function</h2><h3 id="Split-delimited-strings"><a href="#Split-delimited-strings" class="headerlink" title="Split delimited strings"></a>Split delimited strings</h3><p>参考： <a href="https://blog.fedecarg.com/2009/02/22/mysql-split-string-function/" target="_blank" rel="noopener">https://blog.fedecarg.com/2009/02/22/mysql-split-string-function/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION SPLIT_STR(</span><br><span class="line">  x VARCHAR(255),</span><br><span class="line">  delim VARCHAR(12),</span><br><span class="line">  pos INT</span><br><span class="line">)</span><br><span class="line">RETURNS VARCHAR(255)</span><br><span class="line">RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),</span><br><span class="line">       LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1),</span><br><span class="line">       delim, &apos;&apos;);</span><br></pre></td></tr></table></figure><h1 id="Mysql-分库备份脚本"><a href="#Mysql-分库备份脚本" class="headerlink" title="Mysql 分库备份脚本"></a>Mysql 分库备份脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#Backup databases into separated files excluding system schemas</span><br><span class="line">BACKUP_FOLDER=/home/okchem/mysqlbackup</span><br><span class="line">MYUSER=user</span><br><span class="line">MYPASS=password</span><br><span class="line">SOCKET=/data/mysql/mysql.sock</span><br><span class="line">MYCMD=&quot;mysql -u$MYUSER -p$MYPASS -S $SOCKET&quot;</span><br><span class="line">MYDUMP=&quot;mysqldump -u$MYUSER -p$MYPASS -S $SOCKET&quot;</span><br><span class="line"></span><br><span class="line">mkdir -p $&#123;BACKUP_FOLDER&#125;</span><br><span class="line"></span><br><span class="line">#for database in `$MYDUMP -e &quot;show databases;&quot;|sed &apos;1,2d&apos;|egrep -v &quot;mysql|schema&quot;`</span><br><span class="line">for database in `$MYCMD -e &quot;show databases;&quot; | egrep -Evi &quot;database|mysql|schema|test&quot;`</span><br><span class="line">do </span><br><span class="line">$MYDUMP $database &gt;$&#123;BACKUP_FOLDER&#125;/$&#123;database&#125;_$(date +%Y%m%d).sql</span><br><span class="line">    #If compression is needed, use this command: $MYDUMP $database |gzip &gt;/server/backup/$&#123;database&#125;_$(date +$F).sql.gz</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="Mysql-客户端导出数据"><a href="#Mysql-客户端导出数据" class="headerlink" title="Mysql 客户端导出数据"></a>Mysql 客户端导出数据</h1><p>在mysql 服务端可以很方便的导出到文件，也有灵活的选择。 如果需要导出的文件到其他服务器，不在mysql服务器上。 有两个选择：</p><ol><li>在mysql 服务器上导出文件，通过sftp上传至目标机器</li><li>在目标机器安装mysql 客户端，通过shell 脚本来导出数据 （此篇关注点）</li></ol><h2 id="验证环境"><a href="#验证环境" class="headerlink" title="验证环境"></a>验证环境</h2><p>Linux 系统：Centos 7</p><h2 id="安装Mysql-Client"><a href="#安装Mysql-Client" class="headerlink" title="安装Mysql Client"></a>安装Mysql Client</h2><p>参考：<a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation-rpm.html" target="_blank" rel="noopener">Installing MySQL on Linux Using RPM Packages from Oracle</a></p><h2 id="Shell-脚本"><a href="#Shell-脚本" class="headerlink" title="Shell 脚本"></a>Shell 脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############################################################################################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This script is used to retrieve data from mysql and output it into txt file. Also it will generate md5 file <span class="built_in">which</span> can be used to verify the integrity.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Script will make folder named <span class="string">"YYYYMMDD"</span>, also the file name will follow the pattern A/I&#123;tableName&#125;YYYYMMDD&#123;6 sequence number&#125; such as I0100320170303000001</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############################################################################################################################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############Global Configuration begins ####################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Root folder <span class="built_in">where</span> the data will be stored</span></span><br><span class="line">BEE_ROOT_GLOBAL=/data/b2bbuyerdata</span><br><span class="line">MYSQL_HOST=192.168.1.90</span><br><span class="line">MYSQL_PORT=3306</span><br><span class="line">MYSQL_USERNAME=username</span><br><span class="line">MYSQL_PASSWD=password</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############Global Configuration ends ####################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> exportAndMD5Sum querySql tableName. Output the query result into tableNameYYYYMMDD000001.txt and tableNameYYYYMMDD000001.md5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> .md5 file is used to verify data integrity. </span></span><br><span class="line">exportAndMD5Sum()</span><br><span class="line">&#123;</span><br><span class="line">if [ "$#" != 2 ];then</span><br><span class="line">echo  "Usage: exportAndMD5Sum querySql tableName";</span><br><span class="line">exit;</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> Starting <span class="built_in">export</span> data using mysql <span class="built_in">command</span></span></span><br><span class="line">SQL=$1;</span><br><span class="line">tableName=$2;</span><br><span class="line">TIMESTAMP=`date +%Y%m%d`</span><br><span class="line">BEE_ROOT=$&#123;BEE_ROOT_GLOBAL&#125;/$&#123;TIMESTAMP&#125;</span><br><span class="line"></span><br><span class="line">_tmpFile=$&#123;BEE_ROOT&#125;/$&#123;tableName&#125;$&#123;TIMESTAMP&#125;000001.tmp;</span><br><span class="line">destFile=$&#123;BEE_ROOT&#125;/$&#123;tableName&#125;$&#123;TIMESTAMP&#125;000001.AVL;</span><br><span class="line">destMD5File=$&#123;BEE_ROOT&#125;/$&#123;tableName&#125;$&#123;TIMESTAMP&#125;000001.CHK;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Create Folder</span></span><br><span class="line">[ ! -d "$BEE_ROOT" ] &amp;&amp;  mkdir "$BEE_ROOT"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Mysql <span class="built_in">command</span> to output data into file</span></span><br><span class="line">`mysql -h $&#123;MYSQL_HOST&#125; -p$&#123;MYSQL_PORT&#125; -u $&#123;MYSQL_USERNAME&#125; --password=$&#123;MYSQL_PASSWD&#125; -e "$&#123;SQL&#125;" &gt; "$&#123;_tmpFile&#125;"`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> If not empty(has records) change the file name, otherwise remove it.</span></span><br><span class="line">if [ -f "$_tmpFile" ] &amp;&amp; [ -s "$_tmpFile" ]</span><br><span class="line">then</span><br><span class="line">mv $&#123;_tmpFile&#125; $&#123;destFile&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">`md5sum <span class="variable">$&#123;destFile&#125;</span> &gt; <span class="variable">$&#123;destMD5File&#125;</span>`</span></span><br><span class="line">md5=($(md5sum $&#123;destFile&#125;))</span><br><span class="line">echo $md5 &gt; $&#123;destMD5File&#125;</span><br><span class="line">else</span><br><span class="line">rm $&#123;_tmpFile&#125;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">if [ "$1" = "I" ]; then</span><br><span class="line">echo "Starting export all data from mysql ............."</span><br><span class="line">exportAndMD5Sum "SELECT username,country,source,city,email,first_name,last_name,province,status,CAST(is_reveive_email AS UNSIGNED) AS is_reveive_email,created_stamp,last_updated_stamp FROM b2bbuyer.user" "I01001"</span><br><span class="line">exportAndMD5Sum "select u.username,a.address,a.city,a.company_name,a.country,a.first_name,CAST(a.is_default AS UNSIGNED) AS is_default ,a.last_name,a.province,a.tel_country_code,a.tel_ext,a.tel_no,a.zip_code,a.created_stamp,a.last_updated_stamp from b2bbuyer.user u inner join b2bbuyer.user_delivery_address a where a.user_id=u.id" "I01002"</span><br><span class="line">exportAndMD5Sum "select u.username,c.email,c.address,c.city,c.company_name,c.contact,c.country,c.fax_country_code,c.fax_ext,c.fax_tel_no,c.main_products,c.province,c.register_no,c.tax_no,c.tel_country_code,c.tel_ext,c.tel_no,c.website from b2bbuyer.user u inner join b2bbuyer.user_company c where c.user_id=u.id" "I01003"</span><br><span class="line">else</span><br><span class="line">echo "Starting export yesterday's data from mysql ............."</span><br><span class="line">exportAndMD5Sum "SELECT username,country,source,city,email,first_name,last_name,province,status,CAST(is_reveive_email AS UNSIGNED) AS is_reveive_email,created_stamp,last_updated_stamp FROM b2bbuyer.user where last_updated_stamp &lt; (UNIX_TIMESTAMP(CURDATE())*1000) and last_updated_stamp &gt; ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)" "A01001"</span><br><span class="line">exportAndMD5Sum "select u.username,a.address,a.city,a.company_name,a.country,a.first_name,CAST(a.is_default AS UNSIGNED) AS is_default ,a.last_name,a.province,a.tel_country_code,a.tel_ext,a.tel_no,a.zip_code,a.created_stamp,a.last_updated_stamp from b2bbuyer.user u inner join b2bbuyer.user_delivery_address a where a.user_id=u.id and a.last_updated_stamp &lt; (UNIX_TIMESTAMP(CURDATE())*1000) and a.last_updated_stamp &gt; ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)" "A01002"</span><br><span class="line">exportAndMD5Sum "select u.username,c.email,c.address,c.city,c.company_name,c.contact,c.country,c.fax_country_code,c.fax_ext,c.fax_tel_no,c.main_products,c.province,c.register_no,c.tax_no,c.tel_country_code,c.tel_ext,c.tel_no,c.website from b2bbuyer.user u inner join b2bbuyer.user_company c where c.user_id=u.id and c.last_updated_stamp &lt; (UNIX_TIMESTAMP(CURDATE())*1000) and c.last_updated_stamp &gt; ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)" "A01003"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="添加cron-job"><a href="#添加cron-job" class="headerlink" title="添加cron job"></a>添加cron job</h2><p>参考cronjob <code>crontab -l</code><br>编辑cronjob <code>crontab -e</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 1 * * * /data/scripts/mysql-job.sh A</span><br><span class="line">20 1 * * 0 /data/scripts/mysql-job.sh I</span><br></pre></td></tr></table></figure><p>两个cron job 分别：</p><ol><li>每天1点执行</li><li>每周日1点20 执行</li></ol><p>参考：crontab 时间可以参考： <a href="https://www.cnblogs.com/intval/p/5763929.html" target="_blank" rel="noopener">https://www.cnblogs.com/intval/p/5763929.html</a></p><h1 id="Mysql-客户端导入数据"><a href="#Mysql-客户端导入数据" class="headerlink" title="Mysql 客户端导入数据"></a>Mysql 客户端导入数据</h1><h2 id="从txt文件导入"><a href="#从txt文件导入" class="headerlink" title="从txt文件导入"></a>从txt文件导入</h2><p>参考： <a href="https://blog.csdn.net/huihui520com/article/details/79080512" target="_blank" rel="noopener">https://blog.csdn.net/huihui520com/article/details/79080512</a></p><p><a href="https://segmentfault.com/a/1190000009333563" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009333563</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use test;</span><br><span class="line">load data infile &apos;D:/tmp/hotwords.txt&apos; into table hot fields terminated by &apos;,&apos; lines terminated by&apos;\r\n&apos;;</span><br><span class="line">ALTER TABLE okchem.hot ADD `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY;</span><br></pre></td></tr></table></figure><p>需要解决问题：–secure-file-priv option so it cannot execute this statement<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">windows下：修改my.ini 在[mysqld]内加入secure_file_priv =</span><br><span class="line"></span><br><span class="line">linux下：修改my.cnf 在[mysqld]内加入secure_file_priv =</span><br></pre></td></tr></table></figure></p><h1 id="mysql-数据迁移"><a href="#mysql-数据迁移" class="headerlink" title="mysql 数据迁移"></a>mysql 数据迁移</h1><h2 id="自增字段问题"><a href="#自增字段问题" class="headerlink" title="自增字段问题"></a>自增字段问题</h2><p>新增表格，需要将旧的数据迁入新表。Mysql的自增字段默认行为：</p><ol><li>取最大的(比如： 创建表后，只插入一条数据， ID直接指定为9， 那么下一条插入的数据在不指定ID值的情况下，ID是10）</li><li>删除数据后，ID的起点不会因为删除而改变。 （插入N条数据，假如这N条都是未指定ID的插入，也就是说下一个ID是N+1， 这个时候删除所有的数据，再以不指定ID的方式插入一条数据，这个时候ID是<strong>N+1</strong>）<h1 id="Mysql-系统变量配置"><a href="#Mysql-系统变量配置" class="headerlink" title="Mysql 系统变量配置"></a>Mysql 系统变量配置</h1><h2 id="windows-下安装的mysql的配置文件地址"><a href="#windows-下安装的mysql的配置文件地址" class="headerlink" title="windows 下安装的mysql的配置文件地址"></a>windows 下安装的mysql的配置文件地址</h2>从服务列表<code>services.msc</code> 中找到mysql的服务，右键查看属性中的“可执行文件路径”。参考：<br><a href="https://blog.csdn.net/postnull/article/details/72455768" target="_blank" rel="noopener">https://blog.csdn.net/postnull/article/details/72455768</a><h2 id="Win-7-设置表明区分大小写"><a href="#Win-7-设置表明区分大小写" class="headerlink" title="Win 7 设置表明区分大小写"></a>Win 7 设置表明区分大小写</h2>参考： <a href="https://blog.csdn.net/postnull/article/details/72455768" target="_blank" rel="noopener">https://blog.csdn.net/postnull/article/details/72455768</a><br>在my.ini 文件中添加 <code>lower_case_table_names=2</code> </li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>MongoDB 命令 常用语句</title>
      <link href="/Database-Technologies/mongodb-command/"/>
      <url>/Database-Technologies/mongodb-command/</url>
      
        <content type="html"><![CDATA[<p>mongodb 常用命令收集</p><h2 id="导出JSON数据"><a href="#导出JSON数据" class="headerlink" title="导出JSON数据"></a>导出JSON数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoexport -h localhost:27017 -d guide-chem -c product --limit 10000 --skip 10000 --jsonArray -u okchem -p okchem -o /home/okchem/products.json</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li>-h 指定host 和端口</li><li>-d 指定db</li><li>-c 指定collection</li><li>–limit 导出多少条</li><li>–skip 跳过多少条</li><li>–jsonArray 保存为json数组</li><li>-u 指定用户</li><li>-p 指定密码</li><li>-o  指定导出文件路径output</li></ul><h2 id="修改字段名称"><a href="#修改字段名称" class="headerlink" title="修改字段名称"></a>修改字段名称</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.update(&#123;&#125;, &#123;$rename:&#123;&quot;旧键名称&quot;:&quot;新键名称&quot;&#125;&#125;, false, true)</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li>第一个false表示：可选，这个参数的意思是，如果不存在update的记录，true为插入新的记录，默认是false，不插入。 </li><li>第二个true表示：可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Mongodb 和 Mysql 的性能测试</title>
      <link href="/Database-Technologies/Mongodb-vs-Mysql-basic/"/>
      <url>/Database-Technologies/Mongodb-vs-Mysql-basic/</url>
      
        <content type="html"><![CDATA[<p>尝试测试Mongodb 和 Mysql的性能，测试/数据导入代码：<a href="https://github.com/choelea/mongo-vs-mysql" target="_blank" rel="noopener">github: mongo-vs-mysql</a></p><blockquote><p>性能比较很复杂，不能简单就说谁的性能高，谁的低。要基于场景，基于并发请求数量来谈，同时也要知道如何调优，本文只是初探，在没有任何调优的基础上，在本地windows 7上进行测试。</p></blockquote><h1 id="版本及环境"><a href="#版本及环境" class="headerlink" title="版本及环境"></a>版本及环境</h1><ul><li>操作系统：  windows 7 </li><li>硬件环境： （只做对比，mongodb和mysql都装在同一台机器上） </li><li>mongodb：  3.2.5</li><li>mysql：    5.7</li></ul><h1 id="Data-demo"><a href="#Data-demo" class="headerlink" title="Data-demo"></a>Data-demo</h1><p>Data-demo 是一个Spring Boot的项目， 通过Spring Boot的CommandLineRunner来批量动态插入1000,020 条数据。</p><p>数据结构采用常用的产品和类目的多对多的设计。<br><img src="http://tech.jiu-shu.com/Database-Technologies/mysql-product-category.png" alt="mysql-product-category"></p><p><strong>Category 数据如下：</strong></p><table><thead><tr><th>id</th><th>code</th><th>name  </th></tr></thead><tbody><tr><td>‘1’</td><td>‘cate-1’</td><td>‘Category 1’</td></tr><tr><td>‘2’</td><td>‘cate-2’</td><td>‘Category 2’</td></tr><tr><td>‘3’</td><td>‘cate-3’</td><td>‘Category 3’</td></tr><tr><td>‘4’</td><td>‘cate-4’</td><td>‘Category 4’</td></tr></tbody></table><p><strong>Product 数据如下</strong></p><table><thead><tr><th>id</th><th>code</th><th>name</th><th>price</th></tr></thead><tbody><tr><td>‘1’</td><td>‘p-0’</td><td>‘product 0’</td><td>‘19’</td></tr><tr><td>‘2’</td><td>‘p-1’</td><td>‘product 1’</td><td>‘19’</td></tr><tr><td>‘3’</td><td>‘p-2’</td><td>‘product 2’</td><td>‘19’</td></tr><tr><td> …</td><td>…</td><td>…</td><td>…</td></tr><tr><td>‘1000000’</td><td>‘p-999999’</td><td>‘product 999999’</td><td>‘19’</td></tr><tr><td>‘1000001’</td><td>‘pp-0’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000002’</td><td>‘pp-1’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000003’</td><td>‘pp-2’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000004’</td><td>‘pp-3’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000005’</td><td>‘pp-4’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000006’</td><td>‘pp-5’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000007’</td><td>‘pp-6’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000008’</td><td>‘pp-7’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000009’</td><td>‘pp-8’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000010’</td><td>‘pp-9’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000011’</td><td>‘pp-10’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000012’</td><td>‘pp-11’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000013’</td><td>‘pp-12’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000014’</td><td>‘pp-13’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000015’</td><td>‘pp-14’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000016’</td><td>‘pp-15’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000017’</td><td>‘pp-16’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000018’</td><td>‘pp-17’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000019’</td><td>‘pp-18’</td><td>‘iphone’</td><td>‘19’</td></tr><tr><td>‘1000020’</td><td>‘pp-19’</td><td>‘iphone’</td><td>‘19’    </td></tr></tbody></table><p>最后的二十行是用来方便查询验证的。</p><p><strong>Product_Category</strong></p><p>中间mapping的表格</p><h1 id="Mongo-数据"><a href="#Mongo-数据" class="headerlink" title="Mongo 数据"></a>Mongo 数据</h1><p>采用了 Nodejs+express+mongoose 来导入mongo的数据. 项目express-mongoose-microservice-api-boilerplate中的config/test.env来配置mongo的数据库地址。<code>npm install</code> 然后运行命令<code>npm run  produceTestData</code> 可以初始化1000,020 条产品数据到mongodb。 数据类似mysql的产品数据：</p><p>产品 Product<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;_id&quot;: &quot;59cb4952d44efa2eb45d4bf7&quot;,</span><br><span class="line">&quot;code&quot;: &quot;p-0&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Product 0&quot;,</span><br><span class="line">&quot;price&quot;: 19,</span><br><span class="line">&quot;__v&quot;: 0,</span><br><span class="line">&quot;categories&quot;: [</span><br><span class="line">&quot;cate-1&quot;,</span><br><span class="line">&quot;cate-2&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有20条产品数据的categories中有cate-4</p><h1 id="通过查询脚本直接测试："><a href="#通过查询脚本直接测试：" class="headerlink" title="通过查询脚本直接测试："></a>通过查询脚本直接测试：</h1><p>通过Robomongo 连接Mongodb来测试，通过mysql的workbench来完成mysql的脚本查询。</p><h2 id="场景一：查询单个类目下的产品"><a href="#场景一：查询单个类目下的产品" class="headerlink" title="场景一：查询单个类目下的产品"></a>场景一：查询单个类目下的产品</h2><h4 id="mongo-查询所有的cate-4-的产品"><a href="#mongo-查询所有的cate-4-的产品" class="headerlink" title="mongo 查询所有的cate-4 的产品"></a>mongo 查询所有的cate-4 的产品</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;products&apos;).find(&#123;categories:&apos;cate-4&apos;&#125;) // 初次查询1.321 秒 紧接着的两次查询大概0.791 秒</span><br></pre></td></tr></table></figure><h4 id="mysql-查询所有的cate-4-的产品"><a href="#mysql-查询所有的cate-4-的产品" class="headerlink" title="mysql 查询所有的cate-4 的产品"></a>mysql 查询所有的cate-4 的产品</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  product p <span class="keyword">inner</span> <span class="keyword">join</span> product_category pc <span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">category</span> c <span class="keyword">on</span> p.id=pc.product_id <span class="keyword">and</span> pc.category_id=c.id <span class="keyword">where</span> c.code =<span class="string">'cate-4'</span>; <span class="comment">-- 毫秒级，时间可以忽略不计, 产品和类目的code都是unique的索引，所以查询速度很快</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  product p <span class="keyword">inner</span> <span class="keyword">join</span> product_category pc <span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">category</span> c <span class="keyword">on</span> p.id=pc.product_id <span class="keyword">and</span> pc.category_id=c.id <span class="keyword">where</span> c.name =<span class="string">'Category 4'</span>; <span class="comment">-- 6.2秒，name不是索引，所以慢。（索引的用处毫无疑问，无需赘述）</span></span><br></pre></td></tr></table></figure><h2 id="场景二：查询多个类目下的产品"><a href="#场景二：查询多个类目下的产品" class="headerlink" title="场景二：查询多个类目下的产品"></a>场景二：查询多个类目下的产品</h2><p>查询所有cate-4 加上 cate-5 的产品。（实际上cate-5并不存在，不过不影响测试）</p><h4 id="mongod"><a href="#mongod" class="headerlink" title="mongod"></a>mongod</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;products&apos;).find(&#123;categories:&#123;$in:[&apos;cate-4&apos;,&apos;cate-5&apos;]&#125;&#125;) // 0.89 秒； 和查询cate-4的产品相差不多，都是全表扫描</span><br></pre></td></tr></table></figure><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM  product p inner join product_category pc inner join category c on p.id = pc.product_id and pc.category_id = c.id where c.code = &apos;cate-5&apos; or c.code=&apos;cate-4&apos;; -- 6.177 秒，</span><br><span class="line">SELECT * FROM  product p inner join product_category pc inner join category c on p.id = pc.product_id and pc.category_id = c.id where c.code in(&apos;cate-5&apos;,&apos;cate-4&apos;); -- 6.24 秒</span><br></pre></td></tr></table></figure><p>通过上面的测试可以看出，mysql数据库在数据体量大的时候，用or或者in都有很严重的性能问题，可以考虑使用union来代替。一般电商平台的处理方式：如果是后台维护功能应该从业务上来避免这种场景，如果是前端面向用户的功能，需要引入搜索引擎 比如： elasticsearch</p><h2 id="场景三：单表无索引"><a href="#场景三：单表无索引" class="headerlink" title="场景三：单表无索引"></a>场景三：单表无索引</h2><p>查询名称是iphone的产品</p><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from product where name=&apos;iphone&apos;; -- 0.546 秒，全表扫描</span><br></pre></td></tr></table></figure><h4 id="mongo"><a href="#mongo" class="headerlink" title="mongo"></a>mongo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;products&apos;).find(&#123;name:&apos;iphone&apos;&#125;) // 0.428 秒</span><br></pre></td></tr></table></figure><p>全表扫描两者并无太大的差距。</p><h2 id="场景四：单表索引"><a href="#场景四：单表索引" class="headerlink" title="场景四：单表索引"></a>场景四：单表索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;products&apos;).find(&#123;code:&apos;pp-1&apos;&#125;)  </span><br><span class="line">select * from product where code=&apos;pp-1&apos;;</span><br></pre></td></tr></table></figure><p>一百万条数据，单表索引速度都是毫秒级，时间可以忽略不计。</p><h2 id="场景五：单表索引字段使用In来查询"><a href="#场景五：单表索引字段使用In来查询" class="headerlink" title="场景五：单表索引字段使用In来查询"></a>场景五：单表索引字段使用In来查询</h2><p>场景二我们提到了Mysql中关联表时使用in查询的效率问题。下面测试下单表的In查询效率, 通过测试我们可以发现单表针对索引的in的查询都是毫秒级的。<br><strong>mongodb</strong> 历时0.004 sec. 索引被用上了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 非ID的索引字段</span><br><span class="line">db.getCollection(&apos;products&apos;).find(&#123;</span><br><span class="line">    &quot;code&quot;: &#123;</span><br><span class="line">        &quot;$in&quot;: [</span><br><span class="line">            &quot;pp-0&quot;,</span><br><span class="line">            &quot;pp-1&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// _id 主键的$in 查询</span><br><span class="line">db.getCollection(&apos;products&apos;).find(&#123;</span><br><span class="line">    &quot;_id&quot;: &#123;</span><br><span class="line">        &quot;$in&quot;: [</span><br><span class="line">            ObjectId(&quot;59cb4952d44efa2eb45d4bf7&quot;),</span><br><span class="line">            ObjectId(&quot;59cb4952d44efa2eb45d4bf8&quot;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>Mysql </strong> 也是毫秒级，时间忽略不计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> code <span class="keyword">in</span> (<span class="string">'pp-0'</span>,<span class="string">'pp-4'</span>); // 0.0000 sec</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
  
  
</search>
